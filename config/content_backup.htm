<h1>About</h1>
<p>Repo: <a href="https://github.com/mdecycu/cad2024">https://github.com/mdecycu/cad2024</a></p>
<p>Site: <a href="https://mde.tw/cad2024">https://mde.tw/cad2024</a></p>
<p>課程目標:</p>
<p style="padding-left: 30px;"><span>利用 CAD 套件 與 Python 程式協助執行機電整合系統設計</span></p>
<p>Python 課程教材:</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/Intro_to_Mechatronics.pdf">Intro_to_Mechatronics.pdf</a> (<a href="http://engineering.nyu.edu/mechatronics/Control_Lab/bck/VKapila/Intro2EngLect/">Source</a>)</p>
<p style="padding-left: 30px;"><a href="https://github.com/Asabeneh/30-Days-Of-Python">https://github.com/Asabeneh/30-Days-Of-Python</a></p>
<p style="padding-left: 60px;"><a href="https://www.youtube.com/watch?v=LbPawGKOJoE&amp;list=PLbvhRHYrmshRSX00KYKtG2czimpEjoYO5">Python for Begineers</a> (Video PlayList)</p>
<p style="padding-left: 30px;"><a href="https://pythontutor.com/">https://pythontutor.com/</a></p>
<p style="padding-left: 30px;"><a href="https://cs50.harvard.edu/python/2022/">https://cs50.harvard.edu/python/2022/</a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-031-49780-3">2023_course_in_python.pdf</a> (255頁)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-84996-537-8">2011 Python programming fundamentals.pdf</a> (243頁)</p>
<p style="padding-left: 60px;"><a href="https://web.archive.org/web/20160412022935/http://knuth.luther.edu/~leekent/IntroToComputing">Intro to Computing</a></p>
<p style="padding-left: 30px;"><a href="https://pythonnumericalmethods.studentorg.berkeley.edu/notebooks/Index.html">Python Programming And Numerical Methods: A Guide For Engineers And Scientists</a></p>
<p style="padding-left: 30px;"><a href="https://ocw.mit.edu/courses/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/">https://ocw.mit.edu/courses/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/</a></p>
<p>CAD 套件: <a href="https://solvespace.com/">Solvespace</a>、<a href="https://plm.sw.siemens.com/en-US/nx/">Siemens NX</a>、<a href="https://www.onshape.com/">Onshape</a> and <a href="https://github.com/jimy-byerley/pymadcad">Pymadcad</a></p>
<p>CAE 套件: <a href="https://plm.sw.siemens.com/en-US/simcenter/mechanical-simulation/simcenter-3d/">Siemens Simcenter 3D</a></p>
<p>機電模擬: <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> and <a href="https://cyberbotics.com/">Webots</a></p>
<p>課程評分:</p>
<p style="padding-left: 30px;">全勤出席 (20%)</p>
<p style="padding-left: 30px;">隔週採網頁與網誌紀錄學習心得 (30%)</p>
<p style="padding-left: 30px;">期中口頭專題簡報 (25%)</p>
<p style="padding-left: 30px;">期末口頭專題簡報 (25%)</p>
<p></p>
<hr/>
<p>行事曆</p>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei"> 全頁檢視 </a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p><h2>Mechatronics</h2>
<p>機電整合 (Mechatronics) 一詞將機械 (mecha) 和電子 (tronics) 結合在一起。意即在產品的設計與製造流程中，將機械工程、電子技術和智能計算機控制的相關技術加以結合。機電整合產品經常利用電子元件取代傳統的機械功能，從而<span style="background-color: #ffff99;">實現更大的靈活性、更簡單的重新設計與重新編程，並提升自動化數據收集與報告生成的能力</span>。</p><h1>Topics</h1>
<p><a href="https://youtu.be/pX03H1oeyN0?feature=shared">What do I do as a mechanical design engineer?</a></p>
<p><a href="https://youtu.be/u8THwmaU35U?feature=shared">Overview of mechanical design engineering</a></p>
<p><a href="https://youtu.be/yLMdxdV1bfU?feature=shared">What does a mechanical design engineer do?</a></p>
<p><a href="https://youtube.com/watch?v=q20HwaMxjBQ&amp;feature=shared">Guide to mechanical design engineering course</a></p>
<p><a href="https://drive.google.com/file/d/1uW7alBAk2zMYIHYDyGxtNZ2jmcBKrhZj/view">References</a> </p>
<p>CAD:</p>
<p style="padding-left: 30px;"><a href="https://www.tmt.unze.ba/zbornik/TMT2010/Keynote-Tornincasa.pdf">2010 THE FUTURE AND THE EVOLUTION OF CAD</a></p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/cadbook.pdf">cadbook.pdf</a> (from cadp2018 course)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/cad_history.pdf">cad_history.pdf</a> <span>(from cadp2018 course)</span></p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/NX-12-for-Engineering-Design.pdf">NX-12-for-Engineering-Design.pdf</a> (from <a href="https://me5763.github.io/lab/assets/books/NX-12-for-Engineering-Design.pdf">https://me5763.github.io/lab/assets/books/NX-12-for-Engineering-Design.pdf</a>)</p>
<p>Git:</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/Git_for_Electronic_Circuit_Design.pdf">Git for Electronic Circuit Design - CAD and Version Control for Electrical Engineers.pdf</a> (from <a href="https://link.springer.com/book/10.1007/978-1-4842-8124-6">Springer</a>)</p>
<p>ODOO:</p>
<p style="padding-left: 30px;"><a href="https://github.com/odoo/odoo">https://github.com/odoo/odoo</a> </p>
<p style="padding-left: 30px;"><a href="https://mde.tw/pj4101">https://mde.tw/pj4101</a> </p>
<h2>Quadruped</h2>
<p><a href="/downloads/quadruped robot_pj40922.7z">quadruped robot_pj40922.7z</a></p>
<p><img caption="false" height="269" src="/images/quadruped_robot_pj40922.png" width="400"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/STmAWqYgiw8?si=PcL_jl5fn5_5cxTW" title="YouTube video player" width="560"></iframe></p><h2>meArm</h2>
<p><a href="https://ucr-ee144.readthedocs.io/en/latest/">Foundation of Robotics</a> (Course document)</p>
<p><a href="https://link.springer.com/content/pdf/10.1007/978-3-319-62533-1.pdf">Elements of Robotics</a> (Open ebook)</p>
<p><a href="/downloads/uArm_manipulator_en.pdf">uArm_manipulator_en.pdf</a> (<a href="/downloads/uArm_manipulator_es.pdf">uArm_manipulator_es.pdf</a>)</p>
<p><img alt="" height="672" src="/images/cd2022_flowchart.png" width="544"/></p>
<hr/>
<p>Forward Kinematics and Inverse Kinematics of uArm robot:</p>
<p>Inverse Kinematics:</p>
<p>利用 <a href="https://www.sympy.org">sympy</a> 根據 <a href="/downloads/MeArmPiTechnicalOverviewV0-3DRAFT.pdf">meArm Pi Technical Overview</a> 中的說明 (修正錯誤後), 解出 Inverse Kinematics 如下:</p>
<p>當已知 manimpulator 端點的座標為 (x, y ,z) 時, 求 theta, ltheta (low arm link theta) 與 utheta (upper arm link theta). 利用 <a href="https://www.sympy.org">sympy</a> 之前必須先以 pip install sympy 安裝模組.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sympy as sp
   
# Define symbols
theta, ltheta, utheta, r, x, y, z = sp.symbols("theta ltheta utheta r x y z")
   
# Define equations, rearranged so expressions equal 0
eq1 = 15 + 50 + 80*sp.sin(ltheta) + 80*sp.sin(utheta) - r
eq2 = 53 + 80*sp.cos(ltheta) - 80*sp.cos(utheta) - z
# 從 eq3 與 eq4 可以得到 eq5 與 eq6, 將 r 及 theta 表示成 x, y 輸入的函式
# 因此 r 與 theta 在得知 x, y, z 時就可視為已知
eq3 = r*sp.cos(theta) - x
eq4 = r*sp.sin(theta) - y
eq5 = sp.sqrt(x*x + y*y) - r
eq6 = sp.atan(y/x) - theta
   
# Solve for theta1 &amp; theta3
solution = sp.solve([eq1, eq2], [ltheta, utheta], dict=True)
print(solution)
   
'''
[{ltheta: pi - asin(r/80 + sin(2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) - 13/16), 
   
utheta: -2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}, 
   
{ltheta: asin(-r/80 + sin(2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) + 13/16) + pi, 
   
utheta: 2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}, 
   
{ltheta: -asin(-r/80 + sin(2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) + 13/16), 
   
utheta: 2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}, 
   
{ltheta: asin(r/80 + sin(2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) - 13/16), 
   
utheta: -2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}]</pre>
<p></p>
<h1>IDE</h1>
<p><a href="http://229.cycu.org/Python_for_NX1872.7z">Python_for_NX1872.7z</a></p>
<h4>Replit</h4>
<p><a href="https://replit.com">https://replit.com</a> </p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsite: git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site: cmsimde is as directory not submodule</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<h4>Codespaces</h4>
<p><a href="https://github.com/features/codespaces">https://github.com/features/codespaces</a> </p>
<h1>CAD</h1>
<p>Engineers Edge: <a href="https://www.engineersedge.com/">https://www.engineersedge.com/</a></p>
<p>Computer Aided Design:</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Polygon_mesh">https://en.wikipedia.org/wiki/Polygon_mesh</a></p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Constructive_solid_geometry">https://en.wikipedia.org/wiki/Constructive_solid_geometry</a></p>
<p style="padding-left: 30px;"><a href="https://fr.wikipedia.org/wiki/B-Rep">https://fr.wikipedia.org/wiki/B-Rep</a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-03862-9">2015 Space Modeling with SolidWorks and NX</a></p>
<p style="padding-left: 30px;">Pymadcad (執行的電腦需要配置獨立顯卡):</p>
<p style="padding-left: 60px;"><a href="https://madcad.netlify.app/">https://madcad.netlify.app/</a></p>
<p style="padding-left: 60px;"><a href="https://pymadcad.readthedocs.io/en/latest/reference/index.html">https://pymadcad.readthedocs.io/en/latest/reference/index.html</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/jimy-byerley/pymadcad">https://github.com/jimy-byerley/pymadcad</a> (<a href="https://github.com/mdecycu/pymadcad">https://github.com/mdecycu/pymadcad</a>)</p>
<p style="padding-left: 90px;">Modification: <a href="https://pymadcad.readthedocs.io/en/latest/reference/text.html">Render Text</a> using UTF-8 encoding</p>
<p style="padding-left: 60px;"><a href="https://pymadcad.readthedocs.io/en/latest/algorithms/gearprofile.html">https://pymadcad.readthedocs.io/en/latest/algorithms/gearprofile.html</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/jimy-byerley/uimadcad">https://github.com/jimy-byerley/uimadcad</a> (<a href="https://github.com/mdecycu/uimadcad">https://github.com/mdecycu/uimadcad</a>)</p>
<p style="padding-left: 60px;">.ply io.read and io.write - <a href="https://github.com/dranjan/python-plyfile">https://github.com/dranjan/python-plyfile</a> (<a href="https://github.com/mdecycu/python-plyfile">https://github.com/mdecycu/python-plyfile</a>)</p>
<p style="padding-left: 60px;">.stl io.read and io.write - <a href="https://github.com/WoLpH/numpy-stl">https://github.com/WoLpH/numpy-stl</a> (<a href="https://github.com/mdecycu/numpy-stl">https://github.com/mdecycu/numpy-stl</a>)</p>
<p style="padding-left: 60px;">.obj io.read and io.write - <a href="https://github.com/pywavefront/PyWavefront">https://github.com/pywavefront/PyWavefront</a> (<a href="https://github.com/mdecycu/PyWavefront">https://github.com/mdecycu/PyWavefront</a>)</p>
<p style="padding-left: 60px;">系統先安裝 <a href="https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/">https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/</a></p>
<p style="padding-left: 60px;">重新開機後, 啟動可攜程式系統, 利用 pip install pymadcad numpy numpy-stl plyfile pywavefront uimadcad</p>
<p style="padding-left: 60px;">git clone <a href="https://github.com/mdecycu/pymadcad.git">https://github.com/mdecycu/pymadcad.git</a></p>
<p style="padding-left: 60px;">利用可攜系統中的 SciTE 開啟 examples 目錄中的 axis-holder.py 修改 write() 如下後, 利用 Tools - Go 執行.</p>
<p style="padding-left: 60px;">啟動 uimadcad: python -m uimadcad</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from madcad import *

# define a base of vectors: origin and directions
O = vec3(0,0,0)
X = vec3(1,0,0)
Y = vec3(0,1,0)
Z = vec3(0,0,1)

# part parameters
dint = 20
dext = 100
h = 30
rvis = dext/3
dvis = 3
hvis = 3


# create the revolution profile, called 'cone'
# --------------------------------------------

B = vec3(dint/2, 0, 0)
S = vec3(dint/2, 0, h)
E = vec3(dext/2, 0, 0)
Eh = E+2*Z
Se = S+5*X
# sketch a profile
line = [
	Segment(B,S),
	ArcCentered(((Se+S)/2, Y), S, Se),
	Segment(Se, Eh),
	Segment(Eh, E),
	Segment(E, B),
	]
# mutate the profile to fit some geometrical constraints
solve([
		Tangent(line[0], line[1], S),
		Tangent(line[1], line[2], Se),
		Radius(line[1], 5),
		Distance(E, Eh, 10),
		OnPlane((O,Y), [B,S,E,Eh,Se]),
		],
	fixed=[O,X,Y,Z,B,S,E],
	precision=1e-12
	)
# generate the cone
cone = revolution(
			radians(360), 
			(O,Z), 
			web(line))
# merge the start and end sections of the revolution (because its a 360° revolution)
cone.mergeclose()
# chamfer the lower edge: this is a chamfer over a circular edge
chamfer(cone, cone.frontiers((0,4)), ('depth', 3))



# create the slots for screws
# ---------------------------
# we remove a partially defined volume

rplace = dvis*3+2
C = vec3(rvis,0,hvis)
A = vec3(rvis, rplace,hvis)
B = vec3(rvis,-rplace,hvis)
Ae = A+vec3(dext/2, 60,0)
Be = B+vec3(dext/2,-60,0)
# sketch its line
line = [
	Segment(Ae, A),
	ArcCentered((C,Z), A, B),
	Segment(B, Be),
	]
solve([
		Tangent(line[0], line[1], A),
		Tangent(line[2], line[1], B),
		Radius(line[1], 3*dvis),
		Distance(Ae, O, dext),
		Distance(Be, O, dext),
		Angle(Segment(Ae,A), Segment(Be,B), radians(60)),
		OnPlane((C,Z), [A,B,Ae,Be]),
		],
	fixed=[O,X,Y,Z,C],
	precision=1e-12,
	)
# extrude that base line and add a bottom face
place = (	extrusion(vec3(0,0,h), line) 
		+	flatsurface(wire(line).flip())
		)
# merge outlines of both generated faces
place.mergeclose()
# round the cutting edge to have smooth transition
bevel(
	place, 	
	(   place.frontiers(0,3) 	# this is the frontier line between group 0 and group 3
	  + place.frontiers(1,3) 	# this is the frontier line between group 1 and group 3
	  + place.frontiers(2,3) ), 
	('depth', 2))

# make the screw holes:
# a cylinder (not necessarily closed on its ends as we don't care of that surfaces)
vis = extrusion(vec3(0,0,-2*h), web(Circle((C+vec3(0,0,h),-Z), dvis)))


# assemble everything
# -------------------
# get 6 shapes with the slot and the hole for the scren
big = repeat(
		union(place, vis), 	# this union cuts the slot to add the hole
		6, rotatearound(radians(60), (O,Z)))
# cut the cone to put the slots and holes
part = difference(cone, big)
# this is the final touch for parts: optimize the buffers and check mesh validity
part.finish()




# if we want we can at any moment place some fancy notes
notes = [
	note_leading(part.group(2), text="conic surface"),
	note_leading(part.group(11), vec3(-5,0,-10), text='ø'+str(dvis)),
	]

# write the part to a ply file
#write(part, 'tests/axis-holder.ply')
with open('tests/axis-holder.ply', 'w') as f:
    f.write(str(part))

# display what we want
show([part, notes])
</pre>
<p>pymatcad solid read and write to stl, obj and ply:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from madcad import *
s = screw(10, 20) # s is a `Solid`
# Write
io.write(s["part"], "screw.stl")
# Read
read_mesh = io.read("screw.stl")
read_mesh.mergeclose()
show([read_mesh])</pre>
<h4>Solvespace</h4>
<p>SolveSpace 所提供的主要功能:</p>
<p>1. 2D 草圖設計:<br/> - 繪製基本 2D 形狀(線、矩形、圓等)<br/> - 添加約束(長度、距離、角度等)<br/> - 完全參數化設計</p>
<p>2. 3D 實體建模:<br/> - 通過擠出、旋轉等方式從 2D 草圖生成 3D 實體<br/> - 支持 3D 實體的布林運算(並集、差集、交集)<br/> - 提供渲染和陰影視覺效果</p>
<p>3. 參數化和約束求解:<br/> - 可添加各種幾何和代數約束<br/> - 支持尺寸驅動設計<br/> - 自動求解過約束或過約定系統</p>
<p>4. 分析工具:<br/> - 質量屬性分析(體積、表面積、質心等)<br/> - 公差分析<br/> - 運動學模擬(僅限簡單機構)</p>
<p>5. 輔助建模工具:<br/> - 添加工程參考幾何(平面、軸線等)<br/> - 支持配置不同的草圖視圖和投影視圖</p>
<p>6. 開發者擴展性:<br/> - 開源代碼,支持定製化擴展<br/> - 可通過 C++、Python 等語言擴充功能</p>
<p>7. 操作界面:<br/> - 傳統的圖形用戶界面<br/> - 支持鍵盤快捷鍵和命令行輸入</p>
<p>8. 導入導出格式:<br/> - 支持導入/導出 STEP、STL、DXF 等 CAD 文件格式<br/> - 可嵌入網頁或其他應用程序</p>
<h4>Onshape</h4>
<p>Onshape 是一款基於雲端的3D CAD軟體,它提供了許多功能來協助設計和工程工作。Onshape 作為全功能的雲端CAD工具,提供了建模、協作、分析、數據管理等全面的功能,適合用於產品設計、工程項目等領域。</p>
<p>以下是 Onshape 提供的主要功能:</p>
<p>1. 全功能3D參數式建模工具:</p>
<p style="padding-left: 30px;">- 實體和曲面建模<br/> - 參數化和約束幾何體<br/> - 自動生成製造製圖<br/> - 直覺式草圖工具</p>
<p>2. 直接編輯功能:</p>
<p style="padding-left: 30px;">- 不需要返回設計樹狀結構<br/> - 可以直接編輯和修改現有幾何體</p>
<p>3. 版本控制和分支:</p>
<p style="padding-left: 30px;">- 類似 Git 的版本控制系統<br/> - 可以創建分支和合併分支<br/> - 方便協作和跟踪修改歷史</p>
<p>4. 數據管理和整合:</p>
<p style="padding-left: 30px;">- 整合PDM/PLM系統<br/> - 材料庫和標準件庫<br/> - Onshape App Store 提供各種插件</p>
<p>5. 實時協作和評註:</p>
<p style="padding-left: 30px;">- 多人同時編輯同一個文件<br/> - 添加評註和討論設計細節</p>
<p>6. 模擬和分析工具:</p>
<p style="padding-left: 30px;">- 有限元分析(FEA)<br/> - 運動學模擬<br/> - 碰撞檢測</p>
<p>7. 雲端計算和存儲:</p>
<p style="padding-left: 30px;">- 無需安裝軟體<br/> - 所有設計都存儲在雲端<br/> - 可隨時隨地訪問</p>
<p>8. 開放API和集成:</p>
<p style="padding-left: 30px;">- 可與其他軟體系統集成<br/> - 提供API進行自動化和定製</p>
<h2>NX</h2>
<p>cad2024 課程採用 NX23.12.4001.00003 版. 執行 NX2312 需要 Windows 操作系統帶有 Microsoft .Net Runtime 6.0.16.</p>
<p>NX2312 client 連線到認證主機設定採 29000 時, client 端需要讓防火牆可以對 29000 與 29001 port 連外, 至於 server 端則需要讓防火牆可以對 29000 與 29001 port 連入.</p>
<p>完整的 NX2312 總共有超過 11 萬個檔案, 總容量超過 33 GB.</p>
<p>開啟 NX - NX2312\NXBIN\ugraf.exe -nx</p>
<p>開啟 NX 2D Edit - NX2312\NXBIN\nx2dedit.exe</p>
<p>開啟 NX Layout - NX2312\NXBIN\ugraf.exe -layout</p>
<p>開啟 NX Viewer - NX2312\NXBIN\ugraf.exe -view</p>
<p>開啟 Simcenter 3D - NX2312\NXBIN\simcenter3d.exe</p>
<p>開啟 Sincenter 3D Results ㄒiewer - NX2312\NXBIN\simcenter3d.exe -simviewer</p>
<p>開啟 Simens Mechatronics Concept Designer - NX2312\NXBIN\ugraf.exe -mechatronics</p>
<p>開啟 NX Manufacturing - NX CAM - NX2312\NXBIN\ugraf.exe -nxcam</p>
<p><a href="http://wcm.cycu.org:88/nx3doc/">NX3 Help Library</a> (for internal IPv6 users only)</p>
<p><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.xid1851843/xid1851946">NX2312 DOC</a> (英文)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.menuscript/menuscript_xml_title_page">MenuScript</a></p>
<p><a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20230425446868577.xid1851843/xid1851946">NX2312 DOC</a> (中文)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20230425446868577.xid1849545/xid1849546">草圖</a> (Sketch)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20230425446868577.modeling/xid1852129">建模</a> (Modeling)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20230425446868577.xid851385/xid821812">創意塑型</a> (Realize Shape)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20230425446868577.assemblies/assem_intro">組立</a> (Assembly)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20230425446868577.xid2204268/xid2133740">效能預測器</a> (Performance Predictor)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/en-US/doc/289054037/PL20230419932494371.design/id636456">Design Simulation</a></p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/en-US/doc/289054037/PL20230419932494371.xid1853788/xid1853789">Simcenter 3D</a> (<a href="https://www.sciencedirect.com/book/9781569907122/simulations-with-nx-simcenter-3d">Simulation with NX / Simcenter 3D</a> or <a href="http://229.cycu.org/Simulations_with_NX_Simcenter_3D.zip">local download</a>)</p>
<p><a href="https://www.sciencedirect.com/book/9780128211021/mechanical-design">Mechanical Design</a> or <a href="http://229.cycu.org/Mechanical_Design.zip">local download</a></p>
<p><a href="/get_page/NX/Mechanical Design Engineering Handbook">Mechanical Design Engineering Handbook</a> or <a href="http://229.cycu.org/Mechanical_Design_Engineering_Handbook.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780124713703/mechanical-engineers-handbook">Mechanical Engineer's Handbook</a> or <a href="http://229.cycu.org/Mechanical_Engineers_Handbook.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780123985132/product-design-modeling-using-cad-cae">Product Design Modeling using CAD/CAE</a> or <a href="http://229.cycu.org/Product_design_modeling_using_CAD_CAE.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780340645710/advanced-engineering-dynamics">Advanced Engineering Dynamics</a> or <a href="http://229.cycu.org/Advanced_engineering_dynamics.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780750651318/advanced-vehicle-technology">Advanced Vehicle Technology</a> or <a href="http://229.cycu.org/Advanced_Vehicle_Technology.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780128127506/vehicle-collision-dynamics">Vehicle Collision Dynamics</a> or <a href="http://229.cycu.org/Vehicle_collision_dynamics.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780124058750/linear-feedback-controls">Linear Feedback Controls</a> or <a href="http://229.cycu.org/Linear_feedback_controls.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780750663793/mechatronics">Mechatronics</a> or <a href="http://229.cycu.org/Mechatronics.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780128138106/sensors-for-mechatronics">Sensors for Mechatronics</a> or <a href="http://229.cycu.org/Sensors_for_mechatronics.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780750642347/analog-circuits-cookbook">Analog Circuits Design</a> or <a href="http://229.cycu.org/Analog_Circuits_Cookbook.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780128116487/op-amps-for-everyone">Op Amps for Everyone</a> or <a href="http://229.cycu.org/Op_Amps_for_Everyone.zip">local download</a></p>
<p><a href="https://www.youtube.com/watch?v=J1I6fDGjKBA&amp;list=PLvjX0x1uNNLFLiRzEdnpgBjPmUhgo7Zas">NX CAD Tutorial</a></p>
<p><a href="https://www.youtube.com/watch?v=jYmcd9Id48o">NX Surface Tutorial</a></p>
<p>NX2312 安裝後, 透過 Local_Machine - Software - Siemens 登錄檔案儲存下列資料, 其中包括認證主機的埠號與 IP:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\Siemens]

[HKEY_LOCAL_MACHINE\SOFTWARE\Siemens\Installed Products]
"NX 2312"="[{\"ProductCode\":\"{BC25F476-AA6E-41ED-BBA3-F7CA7DE8EB92}\",\"ChannelType\":\"Main\"}]"

[HKEY_LOCAL_MACHINE\SOFTWARE\Siemens\NX 2312]
@="D:\\NX2312\\"
"NXOPEN_EXTENSIONS"=""
"NXOPEN_INSTALL"="YES"
"INSTALLDIR"="D:\\NX2312\\"
"LANGUAGE"="english"
"LICENSESERVER"="29000@your_license_server"
"UGII_BASE_DIR"="D:\\NX2312"</pre>
<hr/>
<p>西門子NX的發展歷程可以追溯至 1969 年, 當時麥道公司成立了自動化部門 McAuto, 開始發展內部 CAD/CAM系統CADD。CADD 最初運行於 IBM 360/40 電腦上,並使用 IBM 2250 圖形顯示終端機。</p>
<p class="whitespace-pre-wrap break-words">1976年, McAuto 收購了 United Computing, 獲得該公司開發的互動式 CAD 系統 Unigraphics。Unigraphics 最初運行於通用自動化 SPC-16 小型機上, 並使用 Tektronix 顯示終端機。</p>
<p class="whitespace-pre-wrap break-words">1982年, McAuto 開始開發新一代 Unigraphics II, 目標是打造更強大的三維設計、繪圖和 NC 加工系統。Unigraphics II 1.0 版於 1983 年發布,首次支援圖形著色。</p>
<p class="whitespace-pre-wrap break-words">1985年, 麥道公司將 McAuto 重組為 McDonnell Douglas Information Systems Company, Unigraphics 歸入其中。</p>
<p class="whitespace-pre-wrap break-words">1988年, 麥道公司收購 Shape Data, 獲得其開發的 Parasolid 幾何造型核心。</p>
<p class="whitespace-pre-wrap break-words">1989年, Unigraphics 7.0 版發布, 首次支援 Parasolid 造型核心。</p>
<p class="whitespace-pre-wrap break-words">1991年, 電子資料系統公司收購 MISCO, Unigraphics 成為 EDS 的一部門, 更名為 EDS Unigraphics。</p>
<p class="whitespace-pre-wrap break-words">1992年, Unigraphics 10.0 版發布, 強調參數化設計和三維造型。</p>
<p class="whitespace-pre-wrap break-words">1996年, Unigraphics 12.0 版發布, 首次支援 Windows NT 平台, 並加入 UG Scenario 分析軟體。</p>
<p class="whitespace-pre-wrap break-words">1997年, Unigraphics 13.0 版發布, 引入 WAVE 技術, 提高設計效率。</p>
<p class="whitespace-pre-wrap break-words">1998年, EDS 成立 Unigraphics Solutions, 完成對 Intergraph 機械部門的收購, 合併 Solid Edge 產品線。</p>
<p class="whitespace-pre-wrap break-words">1999年, UGS 發布 Unigraphics 16.0 版, 強調基於網路的協同設計。</p>
<p class="whitespace-pre-wrap break-words">2000年, EDS 將 UGS 拆分為獨立公司並上市。UGS 發布 Unigraphics 17.0 版, 首次支援 JT 數據交換格式。</p>
<p class="whitespace-pre-wrap break-words">2001年, EDS 收購 SDRC, UGS 成為 EDS PLM Solutions 的一部分, 更名為 EDS PLM Solutions。</p>
<p class="whitespace-pre-wrap break-words">2002年, UGS PLM Solutions 發布 NX 1.0 版, 旨在整合 Unigraphics 和 I-DEAS。</p>
<p class="whitespace-pre-wrap break-words">2003年, UGS PLM Solutions 發布 NX 2.0 版, 改進使用者介面和知識庫設計。</p>
<p class="whitespace-pre-wrap break-words">2004年, UGS 被 Bain Capital、Silver Lake Partners 和 Warburg Pincus 等三家私募股權公司收購,更名為 UGS Corporation。同年發布 NX 3.0 版, 實現 Unigraphics 和 I-DEAS 的整合。</p>
<p class="whitespace-pre-wrap break-words">2007年, 西門子公司收購 UGS Corporation, 更名為 Siemens PLM Software, NX 成為其旗艦產品。同年發布NX 5.0 版, 進一步最佳化使用者介面和模型編輯功能。</p>
<p class="whitespace-pre-wrap break-words">2007年之後的版本請參考: <a href="https://en.wikipedia.org/wiki/Siemens_NX">https://en.wikipedia.org/wiki/Siemens_NX</a> </p>
<p class="whitespace-pre-wrap break-words"><a href="https://github.com/mdecycu/nxlab">https://github.com/mdecycu/nxlab</a> </p>
<p class="whitespace-pre-wrap break-words"><a href="https://github.com/me5763">https://github.com/me5763</a> </p>
<p class="whitespace-pre-wrap break-words">透過 <a href="/downloads/get_file_size_python.txt">get_dir_size.py</a> 可以取得 Siemens NX 各子目錄與總容量.</p>
<p class="whitespace-pre-wrap break-words">各目錄的功能:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">AUTOMATION_DESIGNER: 自動化設計工具, 用於創建和管理自動化系統。
CAPITALINTEGRATION: 與 Siemens Capital 軟件集成,用於電氣系統設計。
CATIAV5: CATIA V5 文件的轉換器和介面。
CMM_INSPECTION: 座標測量機(CMM)檢測功能。
DESIGN_TOOLS: 各種輔助設計工具和功能。
DIAGRAMCORE: 圖表和示意圖的核心功能。
DIAGRAMMING: 用於創建各種工程和系統圖表。
DRAFTING: 2D製圖和文檔創建工具。
IGES: 初始圖形交換規範(IGES)文件的導入/導出。
INSTALL: 安裝相關文件和腳本。
LOCALIZATION: 多語言支持和本地化文件。
MACH: 工具機加工和 CNC 編程功能。
MANUFACTURING_PLANNING: 製造規劃和工藝設計工具。
MECH: 機械設計和工程功能。
MECHATRONICS: 機電整合設計工具。
MOLDWIZARD: 模具設計和分析工具。
MPA: 運動模擬和分析功能。
NXASSEMBLY: 零件裝配和管理工具。
NXBIN: NX 的核心檔案和執行檔。
NXCAE_EXTRAS: 額外的電腦輔助工程(CAE)工具和功能。
NXHUMAN: 人體工程學和人因工程設計工具。
NXJOIN: 零件連接和焊接功能。
NXNASTRAN: 有限元素分析(FEA)求解器。
NXPARTS: 零件設計和模擬工具。
NXPLOT: 繪圖和可視化工具。
NXPROE: Pro/ENGINEER 文件的轉換器和介面。
NXREPORTS: 報告生成和管理工具。
NXSHIP: 船舶設計專用工具。
POSTBUILD: 後處理和結果分析工具。
PSTUDIO: 產品工作室, 用於產品設計和管理。
PVTRANS: 產品視覺化轉換工具。
REL_INFO: 發布資訊和檔案。
SIMULATION: 各種模擬和分析工具。
STAMPING_TOOLS: 沖壓工具設計功能。
STEP203UG 和 STEP214UG: STEP 文件格式的導入/導出。
TDP: Technical Data Package 創建和管理工具。
Temp 和 temp_module: 臨時文件存儲目錄。
TOOLING_BASE: 工具設計的基礎功能。
TRANSLATORS: 各種文件格式轉換器。
UGALLIANCE: 與其他 CAD 系統的集成工具。
UGAUTOMOTIVE: 汽車行業專用設計工具。
UGCATIA: CATIA文件的轉換器和介面。
UGFLEXLM: FlexLM許可證管理系統。
UGFPCD: 印刷電路板(PCB)設計工具。
UGII: NX 用戶界面和基礎功能。
UGIMW: 整合材料管理工作台。
UGMANAGER: 文件和專案管理工具。
UGOPEN: 開發模組和API。
UGOPENPP: C++ 開發模組。
UGPCBXCHANGE: PCB數據交換工具。
UGPHOTO: 高級著色和視覺工具。
UGSTRUCTURES: 結構分析和設計工具。
UGSTUDIO: 產品設計工作室。
UGTIPS: 用戶提示和幫助文件。
UGTO2D: 3D到2D轉換工具。
UGWEB: Web 整合和協同工具。
UGWELD: 焊接設計和分析工具。
UNFOLD: 鈑金展開工具。</pre>
<h4>NX2312 完整版各目錄容量:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">ACOUSTICS : 1.28 GB
AM_SIMULATION : 67.7 MB
AUTOMATED_TESTING : 3.19 MB
AUTOMATIC_UPDATE : 541.0 B
AUTOMATION_DESIGNER : 336.83 MB
CAPITALINTEGRATION : 2.04 MB
CATIAV5 : 901.76 KB
CLOUDDM : 13.18 KB
CMM_INSPECTION : 319.18 MB
COMPOSITES : 54.18 KB
DESIGNSPACEEXPLORER : 8.04 KB
DESIGN_TOOLS : 135.75 MB
DIAGRAMCORE : 5.81 MB
DIAGRAMMING : 118.67 MB
DOCUMENT : 666.71 KB
DRAFTING : 115.44 MB
DXFDWG : 197.04 MB
FABRICMODELER : 5.03 KB
GCTOOLKIT : 230.19 MB
IGES : 5.47 MB
IMMERSIVEEXPERIENCE : 1016.81 MB
INSTALL : 55.39 KB
LOCALIZATION : 94.3 KB
MACH : 2.41 GB
MANUFACTURING_PLANNING : 160.74 MB
MBD : 67.83 MB
MECH : 871.99 MB
MECHATRONICS : 278.23 MB
MENDIXREPORTING : 1.05 MB
MOLDCOOLING : 12.37 KB
MOLDWIZARD : 236.79 MB
MPA : 1.48 MB
NX2DEDIT : 1.25 MB
NXAECDESIGN : 70.86 MB
NXASSEMBLY : 91.5 MB
NXBIN : 6.47 GB
NXCABLEROUTER : 29.51 KB
NXCAE_EXTRAS : 4.55 GB
NXCOATINGS : 632.24 KB
NXCREO : 5.71 MB
NXHUMAN : 247.74 MB
NXJOIN : 24.34 MB
NXNASTRAN : 3.23 GB
NXPARTS : 64.96 MB
NXPLOT : 246.92 MB
NXREPORTS : 3.66 MB
NXSHIP : 339.88 MB
NXSTRUCTUREDESIGN : 119.29 MB
NXVR : 534.04 MB
NX_VSA : 12.73 MB
PARTMFG : 32.08 MB
PLASTIC_DESIGNER : 6.49 MB
POSTBUILD : 35.08 MB
PSTUDIO : 35.5 MB
PVTRANS : 106.92 KB
REL_INFO : 36.92 KB
ROUTING : 433.54 MB
RULE : 306.25 KB
SAFETY : 24.39 KB
SIMULATION : 2.68 GB
STAGE_MODEL : 4.06 MB
STAMPING_TOOLS : 163.08 MB
STEP203UG : 1.44 MB
STEP214UG : 1.44 MB
TDP : 219.56 MB
TOOLING_BASE : 254.04 KB
TRANSLATORS : 150.1 MB
UGALLIANCE : 89.19 KB
UGAUTOMOTIVE : 147.22 MB
UGCATIA : 6.04 MB
UGFLEXLM : 30.28 MB
UGFPCD : 31.89 KB
UGII : 550.7 MB
UGIMW : 8.45 MB
UGMANAGER : 127.12 MB
UGOPEN : 530.1 MB
UGOPENPP : 692.91 KB
UGPCBX : 342.48 KB
UGPCBXCHANGE : 102.96 MB
UGPHOTO : 3.94 GB
UGSTRUCTURES : 346.62 MB
UGSTUDIO : 14.03 MB
UGTIPS : 56.22 MB
UGTO2D : 886.88 KB
UGWEB : 9.08 MB
UGWELD : 2.07 MB
UNFOLD : 71.92 KB
VDA : 26.31 KB
VDV : 5.34 MB
total: 33.32 GB</pre>
<h4>NX2312 各功能對應目錄:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Simcenter Nastran - NXNASTRAN
Simcenter 3D Acoustics - ACOUSTICS
Programming Tools - UGALIANCE UGOPEN UGOPENPP
Model Based Part Manufacturing - PARTMFG DOCUMENT DIAGRAMMING
Ship Building - NXSHIP NXCABLEROUTER
Greater China Tools - GCTOOLKIT
Automated Testing Studio - AUTOMATED_TESTING
Automotive - UGAUTOMOTIVE DESIGN_TOOLS STAMPING_TOOLS TOOLING_BASE UGWELD VDV VDA
Composites - COMPOSITES
Diagramming - DIAGRAMMING
Drafting - DRAFTING NX2DEDIT
Fabric Modeler - FABRICMODELER
Immersive - IMMERSIVEEXPERIENCE
Inductrial Electrical Design - AUTOMATION_DESIGNER
Manufacturing - MACH CMM_INSPECTION MBD NX_VSA POSTBUILD PSTUDIO STAGE_MODEL UNFOLD
Manufacturing Planning - MANUFACTURING_PLANNING
Mechatronics Concept Designer - MECHATRONICS
NX Reporting - MENDIXREPORTING
Optimization Tools - DESIGNSPACEEXPLORER
Molded Part Design - PLASTIC_DESIGNER
Routing - ROUTING CAPITALINTEGRATION
Simcenter 3D - COMPOSITES MECH MOLDCOOLING NXCAE_EXTRAS SAFETY SIMULATION UGSTRUCTURE UGPCBEXCHANGE UGPCBX UGFPCD
Studio Render - UGSTUDIO UGPHOTO
Tooling Design &amp; NX Joint - DESIGN_TOOLS MOLDWIZARD NXAECDESIGN NXCOATINGS NXJOIN NXREPORTS NXSTRUCTUREDESIGN STAMPING_TOOLS TOOLING_BASE UGAUTOMOTIVE UGWELD
Translators - CATIAV5 DXFDWG IGES NXCREO STEP203UG STEP214UG UGCATIA UGMW UGTO2D TRANSLATORS
Validation - DESIGN_TOOLS NXREPORTS MPA
NX VR - NXVR</pre>
<h4>可攜 NX1872 製作:</h4>
<p><a href="/downloads/nx1872_from_installed_to_portable_batch_setup.7z">nx1872_from_installed_to_portable_batch_setup.7z</a> 中的檔案可以說明如何將 NX1872 安裝版轉為可攜啟動的設定過程. 從安裝版啟動後的 Menu - Help - Log File 可以取得系統系統過程的所有細節, 其中包括各對應 .bat 執行過程所設定的環境變數, 以及所啟動的 .dll 檔案.</p>
<p>上列 .7z 檔案即包括從此 Log File 中的環境變數註記, 經過 Python 程式轉為 .bat 設定外, 還利用 %cd% 取代原先安裝版本的 C:\NX1872, 並且以 %USERNAME% 取代安裝時的使用者 pj2022, 之後只要再納入 NX1872 的認證伺服器與所購買的 bundles, 就可以將安裝版 NX1872 轉為可存入 USB 隨身碟的可攜版本.</p><h3>NXOpen</h3>
<p><a href="https://github.com/mdecycu/nxopen">https://github.com/mdecycu/nxopen</a> </p>
<p><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.xid1968491/xid2091711">Browse Programming Tools Help</a></p>
<p><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.nxopen_prog_guide/purpose">Overview of Programmer's Guide</a></p>
<p><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.apiprog/intro_intro_overview">Open C Programmer's Guide</a></p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.custom_api.ugopen_doc">Open C Reference Guide</a></p>
<p><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.custom_api.nxopen_python_ref">NXOpen Python Reference Guide</a></p>
<p>若使用 NX2312, 其中需要設計並繪製減速機中的正齒輪組 (Spur Gear Train), 若採 UGOPEN C 編寫延伸程式, 可以利用 MSYS2 中的 gcc 進行編譯與連結:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">mkdir build
 
mkdir dist
 
REM compile gear.c
gcc.exe -c -g -IC:\nx2312_portable\data\nx2312\UGOPEN -MMD -MP -MF build/gear.o.d -o build/gear.o gear.c
 
REM link with libufun.lib and libugopenint.lib
gcc.exe -shared -o dist/gear.dll build/gear.o C:\nx2312_portable\data\nx2312\UGOPEN\libufun.lib C:\nx2312_portable\data\nx2312\UGOPEN\libugopenint.lib</pre>
<p>取得 gear.dll 後, 可開啟 new Model file 後, 以 File -&gt; Execute -&gt; NX Open 執行 gear.dll.</p>
<p>UGOpen C 程式架構請參考 <a href="http://wcm.cycu.org:88/github/cd2022_guide/downloads/nxopen/UG_Open-API_Programming.pdf">UG_Open-API_Programming.pdf</a></p>
<p>UGOpen 技術文件請參考:</p>
<p style="padding-left: 30px;"><a href="http://wcm.cycu.org:88/nx3doc/apiprog/index.htm">Open C Programmer's Guide</a> (for internal IPv6 users only)</p>
<p style="padding-left: 30px;"><a href="http://wcm.cycu.org:88/nx3doc/ugopen_doc/main.html">Open C Reference Manual</a> (for internal IPv6 users only)</p>
<p></p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_gear_design" height="630" muted="true" width="1008">
<source src="/downloads/nxopen_gear_design.mp4" type="video/mp4"/></video></div>
<div class="winkVideoContainerClass"><a href="/downloads/gear_model2.c.txt">gear_model2.c.txt</a></div>
<div class="winkVideoContainerClass"><a href="/downloads/uarm_gear_design_for_NX.zip">uarm_gear_design_for_NX.zip</a></div>
<div class="winkVideoContainerClass">using MSYS2 compile gear.c: <a href="/downloads/spur_gear_NXOpen_C_NX2312.7z">spur_gear_NXOpen_C_NX2312.7z</a></div>
<div class="winkVideoContainerClass"><a href="http://229.cycu.org/nxopen_ref.7z">NXOpen_ref.7z</a></div><h3>Open C</h3>
<p>The following table lists the Open C functions that have been wrapped for use in NXOpen.NET. The list provides the Open C function name and the corresponding C# method.</p>
<table border="1" cellpadding="6" frame="box" width="438"><colgroup span="1"><col span="1" width="233*"/><col span="1" width="339*"/></colgroup>
<thead>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>Open C Function</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>C# Wrapper Method</p>
</td>
</tr>
</thead>
<tbody>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc4577</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFCFI::GetUniqueFilename</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc5822</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFPATT::AskData</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc5823</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFPATT::Import</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc5824</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFPATT::CycleErrors</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5940</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::CreateCsysMappingMatrix</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5941</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::MapPosition</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5942</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::MultiplyMatrices</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5943</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::CreateTranslationMatrix</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5944</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::CreateScalingMatrix</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5945</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::CreateRotationMatrix</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5946</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::CreateReflectionMatrix</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5947</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::TransformObjects</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc6409</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFView::AskViewDependentStatus</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc6434</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFView::SetViewMatrix</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1615</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::PickPoint</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1616</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::PointSubfunction</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1630</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::PickCsys</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1652</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::PickView</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1653</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::AskLastPickedView</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1600</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::AskStringInput</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1601</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::DisplayMessage</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1603</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::DisplayMenu</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1605</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::DisplayMultiSelectMenu</p>
</td>
</tr>
</tbody>
</table>
<div class="row justify-content-center topic-header scroll">
<div class="col-12 content-pad">
<div class="topic-header-content" id="xid455853">
<h4>Non-wrapped NX Open C functions</h4>
<div class="row justify-content-center">
<div class="col-12 content-pad">
<p>The Non-wrapped NX Open C functions are Open C functions that do not have .NET, Java, or Python bindings provided. This is mainly due to the following reasons:</p>
<ul>
<li>
<p>Corresponding functions have no use in .NET, Java, or Python</p>
</li>
<li>
<p>Functions in C are so complex that we cannot map them to .NET, Java, or Python</p>
</li>
</ul>
<p>The following are the non-wrapped NX Open C functions:</p>
<pre class="code-text">UF_ASSEM_free_deform_warnings_data<br/>UF_ASSEM_free_prev16_aligns<br/>UF_CLONE_free_validation_options<br/>UF_CUT_LEVELS_free<br/>UF_DRF_free_comp_data<br/>UF_FAM_free_class_data<br/>UF_FBM_GEOM_free_classified_set_list<br/>UF_GDT_free<br/>UF_KF_free_list_object_contents<br/>UF_KF_free_rule_value<br/>UF_LIB_free_rset_map<br/>UF_MODL_free_bsurf_data<br/>UF_MODL_free_compare_data<br/>UF_MODL_free_compare_data_3<br/>UF_MODL_free_law<br/>UF_MODL_free_law_extension<br/>UF_MODL_free_refit_face_feature_data<br/>UF_MODL_free_rough_offset_data<br/>UF_MODL_free_silhouette_flange<br/>UF_MODL_free_snip_surface_feature_data<br/>UF_MODL_free_string_list<br/>UF_MODL_shape_pattern_free_client_data<br/>UF_MODL_SWEEP_free_trim_data<br/>UF_MODL_udf_free_exp_data<br/>UF_NXSM_free_closed_corner_data<br/>UF_NXSM_free_flange_data<br/>UF_NXSM_free_flange_sketch_data<br/>UF_NXSM_free_rebend_data<br/>UF_NXSM_free_unbend_data<br/>UF_PART_free_load_status<br/>UF_PD_free_business_modifier_data<br/>UF_PD_free_product_attribute_data<br/>UF_PD_free_product_attribute_data_2<br/>UF_PD_free_product_attribute_value_data<br/>UF_ROUTE_free_places<br/>UF_SF_free_defeature_parms<br/>UF_SF_free_idealize_parms<br/>UF_SF_free_idealize_region<br/>UF_SF_free_midsrf_user_parms<br/>UF_SF_LEGEND_free_attr<br/>UF_SUBDIV_free<br/>UF_WAVE_free_linked_feature_info<br/>UF_WEIGHT_free_exceptions</pre>
</div>
</div>
<h3>MSYS2</h3>
<p><a href="http://229.cycu.org/python_2025/data/msys64_20240507.7z">msys64_20240507.7z</a> (183MB)</p>
<h2>CoppeliaSim</h2>
<p>下載相容於 IPv6 的 CoppeliaSim 4.7.0 rev4: <a href="http://229.cycu.org/CoppeliaSim_Edu_4.7.0_rev4_for_2024Fall.7z">CoppeliaSim_Edu_4.7.0_rev4_for_2024Fall.7z</a></p>
<p>ZMQ Remote API Python Examples: <a href="https://github.com/benzr/cdfrob2024-coppeliasim-zeromq-remote-api">https://github.com/benzr/cdfrob2024-coppeliasim-zeromq-remote-api</a> (修改為 4.7.0 相容範例: <a href="/downloads/cdfrob2024-coppeliasim-zeromq-remote-api.7z">cdfrob2024-coppeliasim-zeromq-remote-api.7z</a>)</p>
<p>官方 4.7.0 Visualization Stream 瀏覽器前端允許使用者變動場景中的物件位置與方位, 若要移除此一功能, 必須修改 threejsFrontend.html 與 threejsFrontend.js. (下載已經修改後的<a href="/downloads/CoppeliaSim_Edu_4.7.0_rev4_threejsFrontend_for_2024Fall.7z">超文件與 js 檔案</a>)</p>
<p>模擬場景範例: <a href="/downloads/tricycle_ttt.7z">tricycle_ttt.7z</a></p>
<hr/>
<p>CoppeliaSim 在 2024.06.14 推出 <a href="https://manual.coppeliarobotics.com/en/versionInfo.htm#coppeliaSim4.7.0">4.7.0 版</a>, 其中沿用至 4.6.0 版的 zmqRemoteApi 模組已經改名為 coppeliasim_zmqremoteapi_client, 部分模組的內容也進行些微更動, 導致先前所編寫的 ZMQ Rempte API Python 程式都必須因應修改, 否則無法執行.</p>
<p>KMOLab 在 4.5.1 版為了讓 CoppeliaSim 的 ZMQ Remote API Python 遠端控制程式能夠在 IPv6 網路協定中執行, 修改了 Server 與 Client 模組中的 ZMQ 程式設定, 若要讓 4.7.0 版也能相容於 IPv6, 則必須修改下列程式碼:</p>
<p>lua\pythonWrapperV2.lua</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function initPython(prog)
    local pyth = sim.getStringParam(sim.stringparam_defaultpython)
    local pyth2 = sim.getNamedStringParam("python")
    if pyth2 then pyth = pyth2 end
    if pyth == nil or #pyth == 0 then
        local p = sim.getInt32Param(sim.intparam_platform)
        if p == 0 then
            pyth = 'py'
        else
            pyth = 'python3'
        end
    end
    local errMsg
    if pythonExecutable then
        pyth = pythonExecutable
    end
    if pyth and #pyth &gt; 0 then
        subprocess, controlPort = startPythonClientSubprocess(pyth)
        if controlPort then
            pyContext = simZMQ.ctx_new()
            pySocket = simZMQ.socket(pyContext, simZMQ.REQ)
            -- enable IPv6 for ZMQ, default is false to IPv6 from KMOLab
            simZMQ.setsockopt(pySocket,simZMQ.IPV6,sim.packUInt32Table{1})
            simZMQ.setsockopt(pySocket,simZMQ.IPV4ONLY,sim.packUInt32Table{0})
            -- end for enabling IPv6 for ZMQ
            simZMQ.setsockopt(pySocket, simZMQ.LINGER, sim.packUInt32Table {0})
            simZMQ.connect(pySocket, controlPort)
            virtualPythonFilename = sim.getStringParam(sim.stringparam_scene_path_and_name)</pre>
<p>另外必須注意的是 4.7.0 在 Windows 中使用虛擬硬碟代號 z:, 若控制程式的開發是在可攜程式系統中進行, 必須避開使用 z:.</p>
<p>另外在 lua\motion.lua 中將封包傳送綁定在 localhost, 嘗試修改如下:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sim.generateTimeOptimalTrajectory(...)
    simZMQ = require 'simZMQ'
    local path, pathLengths, minMaxVel, minMaxAccel, trajPtSamples, boundaryCondition, timeout =
        checkargs({
            {type = 'table', item_type = 'float', size = '2..*'},
            {type = 'table', item_type = 'float', size = '2..*'},
            {type = 'table', item_type = 'float', size = '2..*'},
            {type = 'table', item_type = 'float', size = '2..*'},
            {type = 'int', default = 1000},
            {type = 'string', default = 'not-a-knot'},
            {type = 'float', default = 5},
    }, ...)

    local confCnt = #pathLengths
    local dof = math.floor(#path / confCnt)

    if (dof * confCnt ~= #path) or dof &lt; 1 or confCnt &lt; 2 or dof ~= #minMaxVel / 2 or
        dof ~= #minMaxAccel / 2 then error("Bad table size.") end
    local lb = sim.setStepping(true)

    local pM = Matrix(confCnt, dof, path)
    local mmvM = Matrix(2, dof, minMaxVel)
    local mmaM = Matrix(2, dof, minMaxAccel)

    sim.addLog(sim.verbosity_scriptinfos,
        "Trying to connect via ZeroMQ to the 'toppra' service... " ..
        "make sure the 'docker-image-zmq-toppra' container is running. " ..
        "Details can be found at https://github.com/CoppeliaRobotics/docker-image-zmq-toppra"
    )
    local context = simZMQ.ctx_new()
    local socket = simZMQ.socket(context, simZMQ.REQ)
    simZMQ.setsockopt(socket, simZMQ.RCVTIMEO, sim.packInt32Table {1000 * timeout})
    simZMQ.setsockopt(socket, simZMQ.LINGER, sim.packInt32Table {500})
    -- local result = simZMQ.connect(socket, 'tcp://localhost:22505')
    -- try to make it IPv6 compatable
    local result = simZMQ.connect(socket, 'tcp://*:22505')
    if result == -1 then
        local err = simZMQ.errnum()
        error('connect failed: ' .. err .. ': ' .. simZMQ.strerror(err))
    end</pre>
<p>另外, 在 coppeliasim_zmqremoteapi_client 模組,  __init__.py 中, 也必須納入 IPv6 相容設定:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class RemoteAPIClient:
    """Client to connect to CoppeliaSim's ZMQ Remote API."""

    def __init__(self, host='localhost', port=23000, cntport=None, *, verbose=None):
        """Create client and connect to the ZMQ Remote API server."""
        self.verbose = int(os.environ.get('VERBOSE', '0')) if verbose is None else verbose
        self.context = zmq.Context()
        self.socket = self.context.socket(zmq.REQ)
        # Enable IPv6 on the socket
        self.socket.setsockopt(zmq.IPV6, 1)
        self.socket.connect(f'tcp://{host}:{port}')
        self.uuid = str(uuid.uuid4())
        self.callbackFuncs = {}
        self.requiredItems = {}
        self.VERSION = 2
        self.timeout = 10 * 60
        self.sendCnt = 0
        main_globals = sys.modules['__main__'].__dict__
        main_globals['require'] = self.require</pre>
<p>最後 addOns\ZMQ remote API server.lua 中也必須改為 IPv6 相容:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">--    if zmqRemoteApi.verbose() &gt; 0 then
        sim.addLog(
            sim.verbosity_scriptinfos,
            string.format('ZeroMQ Remote API server starting (rpcPort=%d)...', rpcPort)
        )
--    end
    cbor = require 'org.conman.cbor'
    context = simZMQ.ctx_new()
    rpcSocket = simZMQ.socket(context, simZMQ.REP)
    -- enable IPv6 for ZMQ, default is false to IPv6
    simZMQ.setsockopt(rpcSocket,simZMQ.IPV6,sim.packUInt32Table{1})
    -- ZMQ IPv4ONLY default is true: http://api.zeromq.org/4-2:zmq-setsockopt
    simZMQ.setsockopt(rpcSocket,simZMQ.IPV4ONLY,sim.packUInt32Table{0})
    -- end enabling IPv6
    simZMQ.bind(rpcSocket, string.format('tcp://*:%d', rpcPort))
    if zmqRemoteApi.verbose() &gt; 0 then
        sim.addLog(sim.verbosity_scriptinfos, 'ZeroMQ Remote API server started')
    end</pre>
<p>在 4.7.0 中執行的 ZMQ Remote API Python 測試程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># zmqRemoteApi_IPv6 為將 zmq 通訊協定修改為 IPv4 與 IPv6 相容
# pip install pyzmq cbor keyboard
# for 4.5.1
#from zmqRemoteApi_IPv6 import RemoteAPIClient
# for 4.7.1
from coppeliasim_zmqremoteapi_client import RemoteAPIClient
import time
import math
import keyboard
 
# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線
client = RemoteAPIClient('[::1]', 23000)
# 以 getObject 方法取得場景物件
sim = client.getObject('sim')
box = sim.getObject('/box')
 
# 啟動模擬
sim.startSimulation()
# 建立尺寸數列, 分別定義 x, y, z 方向尺寸
x = 0.2
y = 0.2
z = 0.1
size = [x, y, z]
 
# 利用 size 數列, 建立圓柱物件, 2 代表 cylinder
# 8 表示 respondable, 1 為 質量
digit1_handle = sim.createPureShape(2, 8, size, 1, None)
# 將圓柱物件命名為 digit1, 若用於機械計分可做為個位數轉盤
# 之後可再導入帶有數字組立的外型零件
sim.setObjectAlias(digit1_handle, 'digit1')
# 轉角單位為徑度
sim.setObjectOrientation(digit1_handle, -1, [0, math.pi/2, 0])
# 起始物件中心位於 [0, 0, 0], 為了位於地板, 往 z 提升一個半徑高度
sim.setObjectPosition(digit1_handle, -1, [0, 0, x/2])
 
# 建立 revolute joint 命名為 joint, 且將 joint mode 設為 dynamic, control mode 設為 velocity
joint1_handle = sim.createJoint(sim.joint_revolute_subtype, sim.jointmode_dynamic, 0, None)
sim.setObjectInt32Param(joint1_handle, sim.jointintparam_dynctrlmode, sim.jointdynctrl_velocity)
sim.setObjectAlias(joint1_handle, 'joint1')
 
# 取得 cylinder 的位置座標
digit1_pos = sim.getObjectPosition(digit1_handle, -1)
joint1_pos = [digit1_pos[0], digit1_pos[1], digit1_pos[2]]
 
# 將 joint1 至於 cylinder 中心
sim.setObjectPosition(joint1_handle, -1, joint1_pos)
# 取得 digit1_handle 的方位
digit1_ori = sim.getObjectOrientation(digit1_handle, -1)
# 將 joint1_handle 方位與 digit1 對齊
sim.setObjectOrientation(joint1_handle, -1, digit1_ori)
 
# 將 joint1 置於 box 上
sim.setObjectParent(joint1_handle, box, True)
# 將 cylinder 置於 joint1 上
sim.setObjectParent(digit1_handle, joint1_handle, True)
 
# 鎖定 joint1
# for 4.5.1
#sim.setJointForce(joint1_handle, float('inf'))
# for 4.7.1
sim.setJointTargetForce(joint1_handle, float('inf'))
 
print("基本場景建立完成!")
 
# 設定主迴圈
while True:
    # 設定 joint1 目標速度
    sim.setJointTargetVelocity(joint1_handle, 10)
    # 讓 coppeliasim 有時間按照設定讓 joint1 旋轉
    time.sleep(0.01) 
 
    if keyboard.is_pressed('q'):
        # 可以按下 q 鍵跳出重複執行迴圈
        break
 
# 終止模擬
sim.stopSimulation()</pre>
<hr/>
<p><a href="/downloads/cad2024_foosball_with_ball_python_script.7z">cad2024_foosball_with_ball_python_script.7z</a></p>
<p>將上列採用 Python script 控制的手足球, 改為使用 ZMQ Remote API Python 執行控制:</p>
<p><a href="/downloads/cad2024_foosball.7z">cad2024_foosball.7z</a></p>
<p>Ball-Plate-Control: <a href="https://github.com/mdecycu/Ball-Plate-Control">https://github.com/mdecycu/Ball-Plate-Control</a> </p>
<h3>ZMQ</h3>
<p><a href="https://learning-0mq-with-pyzmq.readthedocs.io/en/latest/index.html">https://learning-0mq-with-pyzmq.readthedocs.io/en/latest/index.html</a></p>
<p style="padding-left: 30px;">ØMQ is a neat messaging library that allows you to build your own messaging infrastructure. ØMQ does not provide out of box messaging system experience like ActiveMQ or RabbitMQ. It is higher level concept than sockets and provides as low level conceptual framework as possible to build messaging systems. It can help build framework that scales where services could be handled by different applications that does one job well.</p>
<p style="padding-left: 30px;">Distributed applications are also easier to change compared to a monolithic applications. It’s expensive to try to define the behavior of each of many software applications that work together in a large network. It’s much cheaper, and more flexible, to define the interfaces between them: the APIs. Messaging is an API that can be stretched across a network.<br/><br/>ØMQ 是一個精簡的訊息傳遞程式庫 (messaging library)，允許使用者自行建立訊息傳遞基礎架構。ØMQ 不像 ActiveMQ 或 RabbitMQ 那樣提供開箱即用的訊息系統體驗。ØMQ 是比封包更高層級的概念，同時提供了儘可能低階的概念框架來構建訊息傳遞系統。它能夠幫助構建可擴展的框架 (framework)，使得這個框架中，不同的服務可以由專注於單一任務的獨立應用程式來處理。</p>
<p style="padding-left: 30px;">與單一應用程式相比，分散式應用程式更容易更改。嘗試定義在大型網路中協同工作的眾多軟體應用程式的行為，其成本很高; 定義它們之間的介面（API）要便宜得多，也更靈活。使得訊息傳遞是一種可以跨網路擴展的 API。</p>
<p>使用 pyzmq 建立程式範例:</p>
<p>server:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import zmq
import time

context = zmq.Context()
socket = context.socket(zmq.REP)
socket.bind("tcp://*:5555")

def process_request(request):
    # 模擬處理請求
    time.sleep(1)
    return f"已處理請求: {request}"

print("服務器已啟動，等待請求...")

while True:
    message = socket.recv_string()
    print(f"收到請求: {message}")
    
    response = process_request(message)
    
    socket.send_string(response)</pre>
<p>client:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import zmq

context = zmq.Context()
socket = context.socket(zmq.REQ)
socket.connect("tcp://localhost:5555")

for request in range(5):
    print(f"發送請求 {request}...")
    socket.send_string(f"請求 {request}")
    
    response = socket.recv_string()
    print(f"收到回覆: {response}")</pre>
<p>上列採用 pyzmq 模組的程式組合，主要展示 ZMQ 程式庫在兩個應用程式間負責傳遞訊息，其特性如下:<br/><br/>1. 通訊介面：<br/><br/>伺服器端和客戶端之間透過 ZMQ 定義了一個簡單的通訊介面。雙方不需要了解對方的內部運作，只需知道如何發送和接收訊息。<br/><br/>2. 跨網路的應用程式介面（API）：<br/><br/>使用 ZMQ 建立了一個可以跨網路運作的 API。伺服器和客戶端程式可以在不同的電腦上執行，只要能夠透過網路連線即可傳遞訊息。<br/><br/>3. 彈性：<br/><br/>使用者可以輕鬆修改伺服器的內部邏輯（例如: 變更用來處理請求的函式設計），而不需要更動客戶端的程式碼。<br/>同樣地，使用者也可以新增更多客戶端或甚至替換現有客戶端，只要客戶端程式遵循相同的訊息傳遞格式。<br/><br/>4. 成本效益：<br/><br/>定義這個簡單的訊息傳遞介面，比起詳細規劃每個應用程式的所有可能行為要簡單得多。<br/><br/>5. 可擴展性：<br/><br/>此一模型可以輕鬆擴展到更複雜的情境 (例如:新增多個伺服器、實現負載平衡等)，而基本的訊息傳遞模式可保持不變。</p>
<p>另外一組範例，以解二階微分方程為例：</p>
<p>y'' + p(x)y' + q(x)y = f(x), with boundary conditions y(a) = α and y(b) = β</p>
<p>可將問題範圍分割成多個子區間，每個工作者負責解決一個子區間。</p>
<p>首先，建立一個任務派送器：</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># task_dispatcher.py
import zmq
import numpy as np
import time

def task_dispatcher():
    try:
        context = zmq.Context()
        task_sender = context.socket(zmq.PUSH)
        task_sender.bind("tcp://127.0.0.1:5557")
        print("Task sender bound to tcp://127.0.0.1:5557")

        result_receiver = context.socket(zmq.PULL)
        result_receiver.bind("tcp://127.0.0.1:5558")
        print("Result receiver bound to tcp://127.0.0.1:5558")

        print("Task dispatcher started. Waiting for workers to connect...")
        time.sleep(1)  # 給工作者一些時間來連接
        
        # 定義問題參數
        a, b = 0, 1  # 邊界
        alpha, beta = 0, 1  # 邊界條件
        N = 1000  # 總點數
        num_workers = 4  # 工作者數量

        h = (b - a) / (N - 1)  # 步長
        x = np.linspace(a, b, N)

        # 定義方程係數
        def p(x): return 1
        def q(x): return -2
        def f(x): return np.exp(-x)

        print("Dispatching tasks...")
        # 分配任務
        points_per_worker = N // num_workers
        for i in range(num_workers):
            start = i * points_per_worker
            end = (i + 1) * points_per_worker if i &lt; num_workers - 1 else N
            task = {
                'worker_id': i,
                'start': start,
                'end': end,
                'x': x[start:end].tolist(),
                'h': h,
                'p': [p(xi) for xi in x[start:end]],
                'q': [q(xi) for xi in x[start:end]],
                'f': [f(xi) for xi in x[start:end]]
            }
            task_sender.send_pyobj(task)
            print(f"Task sent to worker {i}")

        print("All tasks dispatched. Waiting for results...")

        # 收集結果
        results = [None] * num_workers
        for _ in range(num_workers):
            result = result_receiver.recv_pyobj()
            worker_id = result['worker_id']
            results[worker_id] = result['y']
            print(f"Received result from worker {worker_id}")

        # 組合結果
        y = np.concatenate(results)

        # 應用邊界條件
        y[0] = alpha
        y[-1] = beta

        print("Solution computed. First few values:", y[:5])
        print("Last few values:", y[-5:])

    except zmq.ZMQError as e:
        print(f"ZMQ Error occurred: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    task_dispatcher()</pre>
<p>接著安排負責運算的 client 端程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># worker.py
import zmq
import numpy as np

def solve_segment(x, h, p, q, f):
    n = len(x)
    A = np.zeros((n, n))
    b = np.zeros(n)

    # 設置三對角矩陣
    for i in range(1, n-1):
        A[i, i-1] = 1 - h * p[i] / 2
        A[i, i] = -2 + h**2 * q[i]
        A[i, i+1] = 1 + h * p[i] / 2
        b[i] = h**2 * f[i]

    # 設置邊界條件（這裡使用自然邊界條件）
    A[0, 0] = A[-1, -1] = 1
    A[0, 1] = A[-1, -2] = -1

    return np.linalg.solve(A, b)

def worker(worker_id):
    context = zmq.Context()
    task_receiver = context.socket(zmq.PULL)
    task_receiver.connect("tcp://localhost:5557")

    result_sender = context.socket(zmq.PUSH)
    result_sender.connect("tcp://localhost:5558")

    print(f"Worker {worker_id} started. Waiting for task...")

    task = task_receiver.recv_pyobj()
    print(f"Worker {worker_id} received task")

    x = np.array(task['x'])
    h = task['h']
    p = np.array(task['p'])
    q = np.array(task['q'])
    f = np.array(task['f'])

    y = solve_segment(x, h, p, q, f)

    result = {
        'worker_id': worker_id,
        'y': y.tolist()
    }
    result_sender.send_pyobj(result)
    print(f"Worker {worker_id} sent result")

if __name__ == "__main__":
    import sys
    worker(int(sys.argv[1]) if len(sys.argv) &gt; 1 else 0)</pre>
<p>執行流程，先執行任務派送程式:</p>
<p>python task_dispatcher.py</p>
<p>然後在不同的終端中運行多個工作者：</p>
<p>python worker.py 0<br/>python worker.py 1<br/>python worker.py 2<br/>python worker.py 3</p>
<p>此一系統的工作原理:</p>
<ol>
<li>任務派發器將整個問題域分割成幾個子區間。</li>
<li>每個子區間的資料（包括 x 值、步長 h、方程式係數 p、q 和 f）被打包成一個任務，發送給工作者。</li>
<li>每個工作者接收一個子區間的任務，使用有限差分法解決該子區間的方程。</li>
<li>工作者將解決方案發送回任務派發器。</li>
<li>任務派發器收集所有工作者的結果，將它們組合成完整的解，並應用邊界條件。</li>
</ol>
<p>這個例子展示了如何使用 pyzmq 來實現一個分散式計算系統，用於解決複雜的數值問題。它將一個大問題分解成多個小問題，利用多台機器或多個處理器並行計算，從而提高計算效率。</p>
<p>注意：這個實現使用了自然邊界條件（Neumann邊界條件）來處理子區間的邊界。在實際應用中，可能需要根據具體問題調整邊界條件的處理方式。</p>
<p><a href="https://zx7978123.medium.com/%E8%AE%93%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0-%E7%A8%8B%E5%BC%8F-%E5%AE%B9%E5%99%A8%E5%8F%AF%E4%BB%A5%E4%BA%92%E7%9B%B8%E6%BA%9D%E9%80%9A%E6%96%B9%E6%B3%95-%E8%B6%85%E7%B0%A1%E5%96%AE%E7%9A%84zeromq-%E6%95%99%E5%AD%B8-407f7d17c23">Reference</a></p>
<h2>Webots</h2>
<p>Webots is an open-source three-dimensional mobile robot simulator.</p>
<p>It was originally developed as a research tool to investigate various control algorithms in mobile robotics. Since December 2018, Webots is released as an open source software under the Apache 2.0 license.</p>
<p>To effectively use Webots, the reader is expected to have a minimal knowledge in mobile robotics, in C, C++, Java, <span style="background-color: #ffff99;">Python</span> or MATLAB programming, and in <span style="background-color: #ffff99;">VRML97</span> (Virtual Reality Modeling Language).</p>
<p>Python language setup: <a href="https://cyberbotics.com/doc/guide/using-python">https://cyberbotics.com/doc/guide/using-python</a> </p>
<hr/>
<p>start_webots.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
%cd%\msys64\mingw64\bin\webotsw.exe</pre>
<p>可攜 Webots: <a href="http://229.cycu.org/Webots_2023b.7z">Webots_2023b.7z</a></p>
<p>Webots 自 R2019a 之後採開放源授權: <a href="https://cyberbotics.com/doc/blog/Webots-2019-a-release">https://cyberbotics.com/doc/blog/Webots-2019-a-release</a>, 採 <a href="https://apache.org/licenses/LICENSE-2.0">Apache License 2.0</a> 授權.</p>
<p><a href="https://www.youtube.com/watch?v=-xBvcOhazeY">How to un simulation on cloud</a></p>
<p><a href="https://www.youtube.com/watch?v=yi4e5FoVWbQ">Set up environment</a></p>
<p><a href="https://www.youtube.com/watch?v=wOHXOg2jLmU">Webots and ROS2</a></p>
<p><a href="https://www.cyberbotics.com/doc/guide/webots-cloud?version=master">Webots.cloud</a> (<a href="https://webots.cloud/">https://webots.cloud/</a>)</p>
<p><a href="https://github.com/cyberbotics/webots-cloud-simulation-examples">Simulation examples</a></p>
<p><a href="https://webots.cloud/proto">Webots cloud proto</a></p>
<p><a href="http://www.graphics.stanford.edu/courses/cs248-98-fall/Assignments/Assignment3/VRML2_Specification/">VRML 2.0 Specification</a></p>
<h4>Webots_doc</h4>
<p><a href="/downloads/A Systematic Comparison of Simulation Software for Robotic Arm Manipulation using ROS2.pdf">A Systematic Comparison of Simulation Software for Robotic Arm Manipulation using ROS2.pdf</a> (<a href="https://arxiv.org/pdf/2204.06433">source</a>)</p>
<p><a href="https://cyberbotics.com/doc/guide/tutorials">https://cyberbotics.com/doc/guide/tutorials</a></p>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots">https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots</a></p>
<p>Tutorial 1:</p>
<p>滑鼠左鍵拖曳可以旋轉視圖</p>
<p>滑鼠中鍵前後滑動可以拉近或拉遠視圖</p>
<p>滑鼠右鍵移動則可拖曳視圖</p>
<p>Shift + 滑鼠左鍵選擇 Object, 可以移動物件<br/><br/><span>When a Webots world is modified with the intention of being saved, it is fundamental that the simulation is first paused and reloaded to its initial state, i.e. the virtual time counter on the main toolbar should show 0:00:00:000. Otherwise at each save, the position of each 3D object can accumulate errors. Therefore, any modification of the world should be performed in that order: pause, reset, modify and save the simulation.</span></p>
<p>Programming:</p>
<p><a href="https://cyberbotics.com/doc/guide/language-setup">https://cyberbotics.com/doc/guide/language-setup</a> <span><br/></span></p>
<p><a href="https://github.com/cyberbotics/urdf2webots">https://github.com/cyberbotics/urdf2webots</a></p>
<p><a href="https://github.com/cyberbotics/wrestling">https://github.com/cyberbotics/wrestling</a></p>
<p>Controller Programming:</p>
<p><a href="https://cyberbotics.com/doc/guide/controller-programming">https://cyberbotics.com/doc/guide/controller-programming</a></p>
<p><a href="https://cyberbotics.com/doc/guide/starting-webots-remotely-ssh">https://cyberbotics.com/doc/guide/starting-webots-remotely-ssh</a></p>
<p><a href="https://cyberbotics.com/doc/guide/interfacing-webots-to-third-party-software-with-tcp-ip">https://cyberbotics.com/doc/guide/interfacing-webots-to-third-party-software-with-tcp-ip</a></p>
<p><a href="https://cyberbotics.com/doc/guide/running-extern-robot-controllers">https://cyberbotics.com/doc/guide/running-extern-robot-controllers</a></p>
<p><a href="https://cyberbotics.com/doc/guide/web-interface">https://cyberbotics.com/doc/guide/web-interface</a></p>
<p><a href="https://cyberbotics.com/animations/soccer_example/soccer.html">https://cyberbotics.com/animations/soccer_example/soccer.html</a></p>
<p><a href="https://github.com/guisalmon/webots-remote-control">https://github.com/guisalmon/webots-remote-control</a></p>
<p>Web:</p>
<p><a href="https://www.cyberbotics.com/doc/guide/web-streaming?version=R2023b">https://www.cyberbotics.com/doc/guide/web-streaming?version=R2023b</a></p>
<p><a href="https://github.com/cyberbotics/webots-server">https://github.com/cyberbotics/webots-server</a></p>
<p><a href="https://cyberbotics.com/doc/guide/web-server">https://cyberbotics.com/doc/guide/web-server</a></p>
<p>Tutorial:</p>
<p style="padding-left: 30px;">Repository: <a href="https://github.com/cyberbotics/webots">https://github.com/cyberbotics/webots</a> </p>
<p style="padding-left: 30px;">User Guide: <a href="https://cyberbotics.com/doc/guide/index">https://cyberbotics.com/doc/guide/index</a> </p>
<p style="padding-left: 30px;">Reference Manual: <a href="https://cyberbotics.com/doc/reference/index">https://cyberbotics.com/doc/reference/index</a> </p>
<p style="padding-left: 30px;">Webots for Automobile: <a href="https://cyberbotics.com/doc/automobile/index">https://cyberbotics.com/doc/automobile/index</a> </p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com/doc/guide/getting-started-with-webots">https://cyberbotics.com/doc/guide/getting-started-with-webots</a> </p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots">https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots</a> </p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com/doc/guide/tutorial-2-modification-of-the-environment">https://cyberbotics.com/doc/guide/tutorial-2-modification-of-the-environment</a> </p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance">https://cyberbotics.com/doc/guide/tutorial-3-appearance</a> </p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com/doc/guide/tutorial-4-more-about-controllers">https://cyberbotics.com/doc/guide/tutorial-4-more-about-controllers</a> </p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com/doc/guide/tutorial-5-compound-solid-and-physics-attributes">https://cyberbotics.com/doc/guide/tutorial-5-compound-solid-and-physics-attributes</a> </p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com/doc/guide/tutorial-6-4-wheels-robot">https://cyberbotics.com/doc/guide/tutorial-6-4-wheels-robot</a> </p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com/doc/guide/tutorial-7-your-first-proto">https://cyberbotics.com/doc/guide/tutorial-7-your-first-proto</a> </p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com/doc/guide/tutorial-8-the-supervisor">https://cyberbotics.com/doc/guide/tutorial-8-the-supervisor</a> </p>
<h3>Webots-tut1</h3>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots">https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots</a> </p>
<p><a href="https://www.cs.columbia.edu/~feiner/courses/csw4160/vrml97/vrml97.html">https://www.cs.columbia.edu/~feiner/courses/csw4160/vrml97/vrml97.html</a> </p>
<p><a href="http://229.cycu.org/vrml97.pdf">vrml97.pdf</a></p>
<p><a href="http://229.cycu.org/vrml97.zip">vrml97.zip</a></p>
<p>導引1：在Webots中進行第一個模擬（30分鐘）</p>
<p>這個教程的目標是讓使用者熟悉用戶界面和 Webots 的基本概念。所創建的第一個模擬，包含一個簡單的環境：一個帶有地板和牆壁的場景，幾個方塊，一個 e-puck 機器人和一個控制程式，並利用控制程式讓機器人移動。</p>
<p>啟動 Webots - 雙點擊 start_webots.bat 就可以開啟可攜環境中的 Webots.</p>
<p>建立新的世界 (World)</p>
<p>一個世界 (World) 是一個包含物體位置、外觀、彼此如何互動、天空顏色，以及重力、摩擦、物體質量等定義訊息的文件。它定義了模擬的初始狀態。不同的物體被稱為節點 (Nodes)，並以層次結構的方式組織在場景樹中。因此，一個節點可以包含子節點。世界文件以 .wbt 副檔名存儲。這個文件格式源自 VRML97 語言，可讓人直接閱讀。世界文件必須直接存儲在名為 worlds 的目錄中。</p>
<p>實作 #2：點擊 3D 視圖中的暫停按鈕，暫停當前的模擬。如果主工具欄上的虛擬時間計數器停止運作，則模擬即暫停。</p>
<p>從「文件 / 新建 / 新建項目目錄...」菜單項目創建一個新項目，並按照以下指示操作：</p>
<p>將項目目錄命名為 my_first_simulation，而不是建議的 my_project。<br/>將世界文件命名為 my_first_simulation.wbt，而不是建議的 empty.wbt。<br/>點擊所有核取方塊，包括默認未選中的「添加一個矩形場景」。</p>
<p>Webots 顯示了它剛建立的目錄和文件列表，這對應於 Webots 項目的標準文件層次結構。點擊「完成」按鈕來關閉這個窗口。</p>
<p>恭喜你，你剛創建了你的第一個 Webots 世界！3D 視圖應該顯示一個帶有方格地板的方形競技場。你可以使用鼠標在 3D 視圖中移動視點：左鍵、右鍵和滾輪。</p>
<p>存儲在世界文件中的 Webots 節點以一種稱為場景樹的樹狀結構進行組織。場景樹可以在主窗口的兩個子窗口中查看：中間的 3D 視圖是場景樹的 3D 表示，左側的場景樹視圖是場景樹的層次表示。場景樹視圖是節點和字段可以修改的地方。它目前應列出以下節點：</p>
<p>WorldInfo：包含模擬的全局參數。<br/>Viewpoint：定義主視點相機的參數。<br/>TexturedBackground：定義場景的背景（如果稍微旋轉視點，你應該可以看到遠處的山脈）。<br/>TexturedBackgroundLight：定義與上述背景相關的光源。<br/>RectangleArena：定義這個場景中目前看到的唯一對象。</p>
<p>每個節點都有一些可自定義的屬性，稱為欄位 (Fields)。讓我們修改這些欄位內容來改變矩形場景：</p>
<p>實作 #3：在場景樹中雙擊 RectangleArena 節點。這應該會打開節點並顯示其字段。</p>
<p>選擇 floorTileSize 欄位，將其值設置為 0.25 0.25，而不是 0.5 0.5。輸入後應該會立即在3D視圖中看到效果。<br/>選擇wallHeight 欄位，將其值更改為 0.05，而不是 0.1。競技場的牆壁應該會變得更矮。<br/>這些操作允許你即時修改矩形競技場的屬性，並在 3D 視圖中看到相應的變化。</p>
<p></p>
<p></p><h1>Python</h1>
<p><a href="https://github.com/mdecycu/python_2025">https://github.com/mdecycu/python_2025</a></p>
<p>2024 Fall 開始採用的 python_2025.7z (5.2GB), 包含下列模組:</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/python_2025_batch_files.7z">python_2025_batch_files.7z</a> (2.64KB)</p>
<p style="padding-left: 30px;">nx2312_portable_cad_cae.7z (4.3GB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/data/CoppeliaSim_Edu_4.7.0_rev4_for_2024Fall.7z">CoppeliaSim_Edu_4.7.0_rev4_for_2024Fall.7z</a> (190MB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/data/homes_and_tmp.7z">homes_and_tmp.7z</a> (84MB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/data/msys64_20240507.7z">msys64_20240507.7z</a> (183MB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/data/git_putty_python.7z">git_putty_python.7z</a> (559MB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/data/sharex_wscite_wink3.7z">sharex_wscite_wink3.7z</a> (44.2MB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/data/solvespace_and_utilities.7z">solvespace_and_utilities.7z</a> (7.28MB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/kmolab_ex.7z">kmolab_ex.7z</a> (314MB)</p>
<hr/>
<p>Python 3.12 版已經移除 distutils, 表示先前利用 MSYS2 編譯模組的<a href="https://raw.githubusercontent.com/KmolYuan/Pyslvs-UI/a838ec7bde9ebf0857ae8d4f00a272fcb2f57bb7/platform/set_pycompiler.bat">設定</a>, 已經不再適用:</p>
<p style="padding-left: 30px;">The entire <code class="docutils literal notranslate"><span class="pre">distutils</span></code> package is deprecated, to be removed in Python 3.12. Its functionality for specifying package builds has already been completely replaced by third-party packages <code class="docutils literal notranslate"><span class="pre">setuptools</span></code> and <code class="docutils literal notranslate"><span class="pre">packaging</span></code>, and most other commonly used APIs are available elsewhere in the standard library (such as <a class="reference internal" href="https://docs.python.org/3.10/library/platform.html#module-platform" title="platform: Retrieves as much platform identifying data as possible."><code class="xref py py-mod docutils literal notranslate"><span class="pre">platform</span></code></a>, <a class="reference internal" href="https://docs.python.org/3.10/library/shutil.html#module-shutil" title="shutil: High-level file operations, including copying."><code class="xref py py-mod docutils literal notranslate"><span class="pre">shutil</span></code></a>, <a class="reference internal" href="https://docs.python.org/3.10/library/subprocess.html#module-subprocess" title="subprocess: Subprocess management."><code class="xref py py-mod docutils literal notranslate"><span class="pre">subprocess</span></code></a> or <a class="reference internal" href="https://docs.python.org/3.10/library/sysconfig.html#module-sysconfig" title="sysconfig: Python's configuration information"><code class="xref py py-mod docutils literal notranslate"><span class="pre">sysconfig</span></code></a>). There are no plans to migrate any other functionality from <code class="docutils literal notranslate"><span class="pre">distutils</span></code>, and applications that are using other functions should plan to make private copies of the code. Refer to <span class="target" id="index-28"></span><a class="pep reference external" href="https://www.python.org/dev/peps/pep-0632"><strong>PEP 632</strong></a> for discussion.</p>
<p style="padding-left: 30px;">The <code class="docutils literal notranslate"><span class="pre">bdist_wininst</span></code> command deprecated in Python 3.8 has been removed. The <code class="docutils literal notranslate"><span class="pre">bdist_wheel</span></code> command is now recommended to distribute binary packages on Windows. (Contributed by Victor Stinner in <a class="reference external" href="https://bugs.python.org/issue?@action=redirect&amp;bpo=42802">bpo-42802</a>.)</p>
<p>若希望在 Windows 環境中利用 Visual Studio C++ 編譯 Python 模組, 可以下載  <a href="https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/">https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/</a> 安裝後, 重新開機即可.</p>
<p>若要將 visual-cpp-build-tools 配置為可攜套件模組, 則可透過 <a href="https://github.com/Data-Oriented-House/PortableBuildTools">https://github.com/Data-Oriented-House/PortableBuildTools</a> 完成.</p>
<p><a href="/downloads/nxopen_base_and_center_pole_python.txt">nxopen_base_and_center_pole_python.txt</a></p>
<p>split_pdf.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_split.py
# pip install pypdf2 pycryptodome
import os
from PyPDF2 import PdfWriter, PdfReader
 
pdfReader = PdfReader(open("parm.pdf", "rb"))
information = [("151.pdf",1,300)]
  
for page in range(len(information)):
    pdf_writer = PdfWriter()
    start = information[page][1]
    end = information[page][2]
    while start&lt;=end:
        pdf_writer.add_page(pdfReader.pages[start-1])
        start+=1
    if not os.path.exists("./"):
        os.makedirs(savepath)
    output_filename = '{}_{}_page_{}.pdf'.format(information[page][0],information[page][1], information[page][2])
    with open(output_filename,'wb') as out:
        pdf_writer.write(out)
print("已經完成 pdf 切割與存檔")</pre>
<p>combine_pdf.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pip install pypdf2 pycryptodome
import os
from PyPDF2 import PdfWriter, PdfReader
 
pdf_write_object = PdfWriter()
 
pdfFileNames = ["1.pdf", "2.pdf", "3.pdf"]
newFileName = "Programming_Process_in_NX_CAM_en"
filenameString = ""
 
for filename in pdfFileNames:
    pdf_read_object = PdfReader(open(filename, "rb"))
    filenameString += filename + ", "
    for page in range(len(pdf_read_object.pages)):
        pdf_write_object.add_page(pdf_read_object.pages[page])
  
final_file_object = open(newFileName + ".pdf", 'wb')
pdf_write_object.write(final_file_object)
final_file_object.close()
 
print("已經將 " + filenameString+ " 合併為: "+ newFileName + ".pdf")</pre>
<p></p><h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
</div>
</div>
</div>