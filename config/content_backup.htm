<h1>About</h1>
<p><a href="https://github.com/mdecycu/cad2024">https://github.com/mdecycu/cad2024</a></p>
<p><a href="https://mde.tw/cad2024">https://mde.tw/cad2024</a></p>
<p>課程目標:</p>
<p style="padding-left: 30px;"><span>利用 CAD 套件 與 Python 程式協助執行機電整合系統設計</span></p>
<p>課程教材: <a href="https://link.springer.com/book/10.1007/978-3-031-49780-3">2023_course_in_python.pdf</a></p>
<p>CAD 套件: <a href="https://solvespace.com/">Solvespace</a>、<a href="https://plm.sw.siemens.com/en-US/nx/">Siemens NX</a>、<a href="https://www.onshape.com/">Onshape</a> and <a href="https://github.com/jimy-byerley/pymadcad">Pymadcad</a></p>
<p>CAE 套件: <a href="https://plm.sw.siemens.com/en-US/nx/">Siemens NX</a></p>
<p>機電模擬: <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> and <a href="https://cyberbotics.com/">Webots</a></p>
<p>課程評分:</p>
<p style="padding-left: 30px;">全勤出席 (20%)</p>
<p style="padding-left: 30px;">隔週採網頁與網誌紀錄學習心得 (30%)</p>
<p style="padding-left: 30px;">期中口頭專題簡報 (25%)</p>
<p style="padding-left: 30px;">期末口頭專題簡報 (25%)</p>
<p></p>
<hr/>
<p>行事曆</p>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei"> 全頁檢視 </a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p><h1>Topics</h1>
<p></p>
<p>CAD:</p>
<p style="padding-left: 30px;"><a href="https://www.tmt.unze.ba/zbornik/TMT2010/Keynote-Tornincasa.pdf">2010 THE FUTURE AND THE EVOLUTION OF CAD</a></p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/cadbook.pdf">cadbook.pdf</a> (from cadp2018 course)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/cad_history.pdf">cad_history.pdf</a> <span>(from cadp2018 course)</span></p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/NX-12-for-Engineering-Design.pdf">NX-12-for-Engineering-Design.pdf</a> (from <a href="https://me5763.github.io/lab/assets/books/NX-12-for-Engineering-Design.pdf">https://me5763.github.io/lab/assets/books/NX-12-for-Engineering-Design.pdf</a>)</p>
<p>Git:</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/Git_for_Electronic_Circuit_Design.pdf">Git for Electronic Circuit Design - CAD and Version Control for Electrical Engineers.pdf</a> (from <a href="https://link.springer.com/book/10.1007/978-1-4842-8124-6">Springer</a>)</p>
<p>ODOO:</p>
<p style="padding-left: 30px;"><a href="https://github.com/odoo/odoo">https://github.com/odoo/odoo</a> </p>
<p style="padding-left: 30px;"><a href="https://mde.tw/pj4101">https://mde.tw/pj4101</a> </p>
<h1>IDE</h1>
<p><a href="http://229.cycu.org/Python_for_NX1872.7z">Python_for_NX1872.7z</a></p>
<h4>Replit</h4>
<p><a href="https://replit.com">https://replit.com</a> </p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsite: git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site: cmsimde is as directory not submodule</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<h4>Codespaces</h4>
<p><a href="https://github.com/features/codespaces">https://github.com/features/codespaces</a> </p>
<h1>CAD</h1>
<p>Engineers Edge: <a href="https://www.engineersedge.com/">https://www.engineersedge.com/</a></p>
<p>Computer Aided Design:</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Polygon_mesh">https://en.wikipedia.org/wiki/Polygon_mesh</a></p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Constructive_solid_geometry">https://en.wikipedia.org/wiki/Constructive_solid_geometry</a></p>
<p style="padding-left: 30px;"><a href="https://fr.wikipedia.org/wiki/B-Rep">https://fr.wikipedia.org/wiki/B-Rep</a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-03862-9">2015 Space Modeling with SolidWorks and NX</a></p>
<p style="padding-left: 30px;">Pymadcad:</p>
<p style="padding-left: 60px;"><a href="https://madcad.netlify.app/">https://madcad.netlify.app/</a></p>
<p style="padding-left: 60px;"><a href="https://pymadcad.readthedocs.io/en/latest/reference/index.html">https://pymadcad.readthedocs.io/en/latest/reference/index.html</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/jimy-byerley/pymadcad">https://github.com/jimy-byerley/pymadcad</a> (<a href="https://github.com/mdecycu/pymadcad">https://github.com/mdecycu/pymadcad</a>)</p>
<p style="padding-left: 90px;">Modification: <a href="https://pymadcad.readthedocs.io/en/latest/reference/text.html">Render Text</a> using UTF-8 encoding</p>
<p style="padding-left: 60px;"><a href="https://pymadcad.readthedocs.io/en/latest/algorithms/gearprofile.html">https://pymadcad.readthedocs.io/en/latest/algorithms/gearprofile.html</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/jimy-byerley/uimadcad">https://github.com/jimy-byerley/uimadcad</a> (<a href="https://github.com/mdecycu/uimadcad">https://github.com/mdecycu/uimadcad</a>)</p>
<p style="padding-left: 60px;">.ply io.read and io.write - <a href="https://github.com/dranjan/python-plyfile">https://github.com/dranjan/python-plyfile</a> (<a href="https://github.com/mdecycu/python-plyfile">https://github.com/mdecycu/python-plyfile</a>)</p>
<p style="padding-left: 60px;">.stl io.read and io.write - <a href="https://github.com/WoLpH/numpy-stl">https://github.com/WoLpH/numpy-stl</a> (<a href="https://github.com/mdecycu/numpy-stl">https://github.com/mdecycu/numpy-stl</a>)</p>
<p style="padding-left: 60px;">.obj io.read and io.write - <a href="https://github.com/pywavefront/PyWavefront">https://github.com/pywavefront/PyWavefront</a> (<a href="https://github.com/mdecycu/PyWavefront">https://github.com/mdecycu/PyWavefront</a>)</p>
<p style="padding-left: 60px;">系統先安裝 <a href="https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/">https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/</a></p>
<p style="padding-left: 60px;">重新開機後, 啟動可攜程式系統, 利用 pip install pymadcad numpy numpy-stl plyfile pywavefront uimadcad</p>
<p style="padding-left: 60px;">git clone <a href="https://github.com/mdecycu/pymadcad.git">https://github.com/mdecycu/pymadcad.git</a></p>
<p style="padding-left: 60px;">利用可攜系統中的 SciTE 開啟 examples 目錄中的 axis-holder.py 修改 write() 如下後, 利用 Tools - Go 執行.</p>
<p style="padding-left: 60px;">啟動 uimadcad: python -m uimadcad</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from madcad import *

# define a base of vectors: origin and directions
O = vec3(0,0,0)
X = vec3(1,0,0)
Y = vec3(0,1,0)
Z = vec3(0,0,1)

# part parameters
dint = 20
dext = 100
h = 30
rvis = dext/3
dvis = 3
hvis = 3


# create the revolution profile, called 'cone'
# --------------------------------------------

B = vec3(dint/2, 0, 0)
S = vec3(dint/2, 0, h)
E = vec3(dext/2, 0, 0)
Eh = E+2*Z
Se = S+5*X
# sketch a profile
line = [
	Segment(B,S),
	ArcCentered(((Se+S)/2, Y), S, Se),
	Segment(Se, Eh),
	Segment(Eh, E),
	Segment(E, B),
	]
# mutate the profile to fit some geometrical constraints
solve([
		Tangent(line[0], line[1], S),
		Tangent(line[1], line[2], Se),
		Radius(line[1], 5),
		Distance(E, Eh, 10),
		OnPlane((O,Y), [B,S,E,Eh,Se]),
		],
	fixed=[O,X,Y,Z,B,S,E],
	precision=1e-12
	)
# generate the cone
cone = revolution(
			radians(360), 
			(O,Z), 
			web(line))
# merge the start and end sections of the revolution (because its a 360° revolution)
cone.mergeclose()
# chamfer the lower edge: this is a chamfer over a circular edge
chamfer(cone, cone.frontiers((0,4)), ('depth', 3))



# create the slots for screws
# ---------------------------
# we remove a partially defined volume

rplace = dvis*3+2
C = vec3(rvis,0,hvis)
A = vec3(rvis, rplace,hvis)
B = vec3(rvis,-rplace,hvis)
Ae = A+vec3(dext/2, 60,0)
Be = B+vec3(dext/2,-60,0)
# sketch its line
line = [
	Segment(Ae, A),
	ArcCentered((C,Z), A, B),
	Segment(B, Be),
	]
solve([
		Tangent(line[0], line[1], A),
		Tangent(line[2], line[1], B),
		Radius(line[1], 3*dvis),
		Distance(Ae, O, dext),
		Distance(Be, O, dext),
		Angle(Segment(Ae,A), Segment(Be,B), radians(60)),
		OnPlane((C,Z), [A,B,Ae,Be]),
		],
	fixed=[O,X,Y,Z,C],
	precision=1e-12,
	)
# extrude that base line and add a bottom face
place = (	extrusion(vec3(0,0,h), line) 
		+	flatsurface(wire(line).flip())
		)
# merge outlines of both generated faces
place.mergeclose()
# round the cutting edge to have smooth transition
bevel(
	place, 	
	(   place.frontiers(0,3) 	# this is the frontier line between group 0 and group 3
	  + place.frontiers(1,3) 	# this is the frontier line between group 1 and group 3
	  + place.frontiers(2,3) ), 
	('depth', 2))

# make the screw holes:
# a cylinder (not necessarily closed on its ends as we don't care of that surfaces)
vis = extrusion(vec3(0,0,-2*h), web(Circle((C+vec3(0,0,h),-Z), dvis)))


# assemble everything
# -------------------
# get 6 shapes with the slot and the hole for the scren
big = repeat(
		union(place, vis), 	# this union cuts the slot to add the hole
		6, rotatearound(radians(60), (O,Z)))
# cut the cone to put the slots and holes
part = difference(cone, big)
# this is the final touch for parts: optimize the buffers and check mesh validity
part.finish()




# if we want we can at any moment place some fancy notes
notes = [
	note_leading(part.group(2), text="conic surface"),
	note_leading(part.group(11), vec3(-5,0,-10), text='ø'+str(dvis)),
	]

# write the part to a ply file
#write(part, 'tests/axis-holder.ply')
with open('tests/axis-holder.ply', 'w') as f:
    f.write(str(part))

# display what we want
show([part, notes])
</pre>
<p>pymatcad solid read and write to stl, obj and ply:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from madcad import *
s = screw(10, 20) # s is a `Solid`
# Write
io.write(s["part"], "screw.stl")
# Read
read_mesh = io.read("screw.stl")
read_mesh.mergeclose()
show([read_mesh])</pre>
<h4>Solvespace</h4>
<p>SolveSpace 所提供的主要功能:</p>
<p>1. 2D 草圖設計:<br/> - 繪製基本 2D 形狀(線、矩形、圓等)<br/> - 添加約束(長度、距離、角度等)<br/> - 完全參數化設計</p>
<p>2. 3D 實體建模:<br/> - 通過擠出、旋轉等方式從 2D 草圖生成 3D 實體<br/> - 支持 3D 實體的布林運算(並集、差集、交集)<br/> - 提供渲染和陰影視覺效果</p>
<p>3. 參數化和約束求解:<br/> - 可添加各種幾何和代數約束<br/> - 支持尺寸驅動設計<br/> - 自動求解過約束或過約定系統</p>
<p>4. 分析工具:<br/> - 質量屬性分析(體積、表面積、質心等)<br/> - 公差分析<br/> - 運動學模擬(僅限簡單機構)</p>
<p>5. 輔助建模工具:<br/> - 添加工程參考幾何(平面、軸線等)<br/> - 支持配置不同的草圖視圖和投影視圖</p>
<p>6. 開發者擴展性:<br/> - 開源代碼,支持定製化擴展<br/> - 可通過 C++、Python 等語言擴充功能</p>
<p>7. 操作界面:<br/> - 傳統的圖形用戶界面<br/> - 支持鍵盤快捷鍵和命令行輸入</p>
<p>8. 導入導出格式:<br/> - 支持導入/導出 STEP、STL、DXF 等 CAD 文件格式<br/> - 可嵌入網頁或其他應用程序</p>
<h4>Onshape</h4>
<p>Onshape 是一款基於雲端的3D CAD軟體,它提供了許多功能來協助設計和工程工作。Onshape 作為全功能的雲端CAD工具,提供了建模、協作、分析、數據管理等全面的功能,適合用於產品設計、工程項目等領域。</p>
<p>以下是 Onshape 提供的主要功能:</p>
<p>1. 全功能3D參數式建模工具:</p>
<p style="padding-left: 30px;">- 實體和曲面建模<br/> - 參數化和約束幾何體<br/> - 自動生成製造製圖<br/> - 直覺式草圖工具</p>
<p>2. 直接編輯功能:</p>
<p style="padding-left: 30px;">- 不需要返回設計樹狀結構<br/> - 可以直接編輯和修改現有幾何體</p>
<p>3. 版本控制和分支:</p>
<p style="padding-left: 30px;">- 類似 Git 的版本控制系統<br/> - 可以創建分支和合併分支<br/> - 方便協作和跟踪修改歷史</p>
<p>4. 數據管理和整合:</p>
<p style="padding-left: 30px;">- 整合PDM/PLM系統<br/> - 材料庫和標準件庫<br/> - Onshape App Store 提供各種插件</p>
<p>5. 實時協作和評註:</p>
<p style="padding-left: 30px;">- 多人同時編輯同一個文件<br/> - 添加評註和討論設計細節</p>
<p>6. 模擬和分析工具:</p>
<p style="padding-left: 30px;">- 有限元分析(FEA)<br/> - 運動學模擬<br/> - 碰撞檢測</p>
<p>7. 雲端計算和存儲:</p>
<p style="padding-left: 30px;">- 無需安裝軟體<br/> - 所有設計都存儲在雲端<br/> - 可隨時隨地訪問</p>
<p>8. 開放API和集成:</p>
<p style="padding-left: 30px;">- 可與其他軟體系統集成<br/> - 提供API進行自動化和定製</p>
<h2>NX</h2>
<p>cad2024 使用 NX1872, 也就是安裝在電腦輔助設計室電腦 C:\ SSD 中的 Siemens NX1872 版本, 若您需要在校外使用 NX1872, 請諮詢如何在自己的電腦安裝 NX1872 套件, 或自行配置可攜式 NX1872, 並透過網路連線認證後啟動.</p>
<p><a href="https://www.youtube.com/watch?v=J1I6fDGjKBA&amp;list=PLvjX0x1uNNLFLiRzEdnpgBjPmUhgo7Zas">NX CAD Tutorial</a></p>
<p><a href="https://www.youtube.com/watch?v=jYmcd9Id48o">NX Surface Tutorial</a></p>
<p class="whitespace-pre-wrap break-words">西門子NX的發展歷程可以追溯至1969年,當時麥道公司成立了自動化部門 McAuto, 開始發展內部CAD/CAM系統CADD。CADD 最初運行於 IBM 360/40 電腦上,並使用 IBM 2250 圖形顯示終端機。</p>
<p class="whitespace-pre-wrap break-words">1976年,McAuto 收購了 United Computing, 獲得該公司開發的互動式 CAD 系統 Unigraphics。Unigraphics 最初運行於通用自動化 SPC-16 小型機上,並使用 Tektronix 顯示終端機。</p>
<p class="whitespace-pre-wrap break-words">1982年, McAuto 開始開發新一代 Unigraphics II, 目標是打造更強大的三維設計、繪圖和 NC 加工系統。Unigraphics II 1.0 版於1983年發布,首次支援圖形著色。</p>
<p class="whitespace-pre-wrap break-words">1985年, 麥道公司將 McAuto 重組為 McDonnell Douglas Information Systems Company, Unigraphics 歸入其中。</p>
<p class="whitespace-pre-wrap break-words">1988年, 麥道公司收購 Shape Data, 獲得其開發的 Parasolid 幾何造型核心。</p>
<p class="whitespace-pre-wrap break-words">1989年, Unigraphics 7.0 版發布, 首次支援 Parasolid 造型核心。</p>
<p class="whitespace-pre-wrap break-words">1991年, 電子資料系統公司收購 MISCO, Unigraphics 成為 EDS 的一部門,更名為 EDS Unigraphics。</p>
<p class="whitespace-pre-wrap break-words">1992年, Unigraphics 10.0 版發布, 強調參數化設計和三維造型。</p>
<p class="whitespace-pre-wrap break-words">1996年, Unigraphics 12.0 版發布, 首次支援 Windows NT 平台,並加入 UG Scenario 分析軟體。</p>
<p class="whitespace-pre-wrap break-words">1997年, Unigraphics 13.0 版發布,引入 WAVE 技術, 提高設計效率。</p>
<p class="whitespace-pre-wrap break-words">1998年, EDS 成立 Unigraphics Solutions, 完成對 Intergraph 機械部門的收購, 合併 Solid Edge 產品線。</p>
<p class="whitespace-pre-wrap break-words">1999年, UGS 發布 Unigraphics 16.0 版, 強調基於網路的協同設計。</p>
<p class="whitespace-pre-wrap break-words">2000年, EDS 將 UGS 拆分為獨立公司並上市。UGS 發布 Unigraphics 17.0 版, 首次支援 JT 數據交換格式。</p>
<p class="whitespace-pre-wrap break-words">2001年, EDS 收購 SDRC, UGS 成為 EDS PLM Solutions 的一部分, 更名為 EDS PLM Solutions。</p>
<p class="whitespace-pre-wrap break-words">2002年, UGS PLM Solutions 發布 NX 1.0 版, 旨在整合 Unigraphics 和 I-DEAS。</p>
<p class="whitespace-pre-wrap break-words">2003年, UGS PLM Solutions 發布 NX 2.0 版, 改進使用者介面和知識庫設計。</p>
<p class="whitespace-pre-wrap break-words">2004年, UGS 被 Bain Capital、Silver Lake Partners 和 Warburg Pincus 等三家私募股權公司收購,更名為UGS Corporation。同年發布 NX 3.0 版, 實現 Unigraphics 和 I-DEAS 的整合。</p>
<p class="whitespace-pre-wrap break-words">2007年, 西門子公司收購 UGS Corporation, 更名為 Siemens PLM Software, NX 成為其旗艦產品。同年發布NX 5.0 版, 進一步最佳化使用者介面和模型編輯功能。</p>
<p class="whitespace-pre-wrap break-words">2007年之後的版本請參考: <a href="https://en.wikipedia.org/wiki/Siemens_NX">https://en.wikipedia.org/wiki/Siemens_NX</a> </p>
<p class="whitespace-pre-wrap break-words"><a href="https://github.com/mdecycu/nxlab">https://github.com/mdecycu/nxlab</a> </p>
<p class="whitespace-pre-wrap break-words"><a href="https://github.com/me5763">https://github.com/me5763</a> </p>
<p class="whitespace-pre-wrap break-words">透過 <a href="/downloads/get_file_size_python.txt">get_dir_size.py</a> 可以取得 Siemens NX 1872 版本各子目錄與總容量 (17.89GB):</p>
<p class="whitespace-pre-wrap break-words">各目錄的功能:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">AUTOMATION_DESIGNER: 自動化設計工具, 用於創建和管理自動化系統。
CAPITALINTEGRATION: 與 Siemens Capital 軟件集成,用於電氣系統設計。
CATIAV5: CATIA V5 文件的轉換器和介面。
CMM_INSPECTION: 座標測量機(CMM)檢測功能。
DESIGN_TOOLS: 各種輔助設計工具和功能。
DIAGRAMCORE: 圖表和示意圖的核心功能。
DIAGRAMMING: 用於創建各種工程和系統圖表。
DRAFTING: 2D製圖和文檔創建工具。
IGES: 初始圖形交換規範(IGES)文件的導入/導出。
INSTALL: 安裝相關文件和腳本。
LOCALIZATION: 多語言支持和本地化文件。
MACH: 工具機加工和 CNC 編程功能。
MANUFACTURING_PLANNING: 製造規劃和工藝設計工具。
MECH: 機械設計和工程功能。
MECHATRONICS: 機電整合設計工具。
MOLDWIZARD: 模具設計和分析工具。
MPA: 運動模擬和分析功能。
NXASSEMBLY: 零件裝配和管理工具。
NXBIN: NX 的核心檔案和執行檔。
NXCAE_EXTRAS: 額外的電腦輔助工程(CAE)工具和功能。
NXHUMAN: 人體工程學和人因工程設計工具。
NXJOIN: 零件連接和焊接功能。
NXNASTRAN: 有限元素分析(FEA)求解器。
NXPARTS: 零件設計和模擬工具。
NXPLOT: 繪圖和可視化工具。
NXPROE: Pro/ENGINEER 文件的轉換器和介面。
NXREPORTS: 報告生成和管理工具。
NXSHIP: 船舶設計專用工具。
POSTBUILD: 後處理和結果分析工具。
PSTUDIO: 產品工作室, 用於產品設計和管理。
PVTRANS: 產品視覺化轉換工具。
REL_INFO: 發布資訊和檔案。
SIMULATION: 各種模擬和分析工具。
STAMPING_TOOLS: 沖壓工具設計功能。
STEP203UG 和 STEP214UG: STEP 文件格式的導入/導出。
TDP: Technical Data Package 創建和管理工具。
Temp 和 temp_module: 臨時文件存儲目錄。
TOOLING_BASE: 工具設計的基礎功能。
TRANSLATORS: 各種文件格式轉換器。
UGALLIANCE: 與其他 CAD 系統的集成工具。
UGAUTOMOTIVE: 汽車行業專用設計工具。
UGCATIA: CATIA文件的轉換器和介面。
UGFLEXLM: FlexLM許可證管理系統。
UGFPCD: 印刷電路板(PCB)設計工具。
UGII: NX 用戶界面和基礎功能。
UGIMW: 整合材料管理工作台。
UGMANAGER: 文件和專案管理工具。
UGOPEN: 開發模組和API。
UGOPENPP: C++ 開發模組。
UGPCBXCHANGE: PCB數據交換工具。
UGPHOTO: 高級著色和視覺工具。
UGSTRUCTURES: 結構分析和設計工具。
UGSTUDIO: 產品設計工作室。
UGTIPS: 用戶提示和幫助文件。
UGTO2D: 3D到2D轉換工具。
UGWEB: Web 整合和協同工具。
UGWELD: 焊接設計和分析工具。
UNFOLD: 鈑金展開工具。</pre>
<p class="whitespace-pre-wrap break-words">其中若只需要基本的零組件繪圖, 則只需要下列目錄, 容量約 7GB:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">AUTOMATION_DESIGNER : 33.09 MB
DESIGN_TOOLS : 102.52 MB
DIAGRAMCORE : 5.7 MB
DIAGRAMMING : 131.4 MB
DRAFTING : 70.16 MB
DXFDWG : 57.4 MB
IGES : 5.8 MB
INSTALL : 48.9 KB
LOCALIZATION : 1020.06 MB
NX1872_AppData : 8.52 MB
NXASSEMBLY : 71.65 MB
NXBIN : 3.95 GB
NXPARTS : 150.33 MB
NXPLOT : 155.86 MB
PSTUDIO : 33.64 MB
PVTRANS : 79.39 KB
REL_INFO : 36.92 KB
STEP203UG : 1.27 MB
STEP214UG : 1.26 MB
temp : 960.16 KB
TRANSLATORS : 512.79 KB
UGFLEXLM : 38.82 MB
UGII : 537.42 MB
UGMANAGER : 73.5 MB
UGOPEN : 179.85 MB
UGOPENPP : 567.28 KB
UGSTUDIO : 14.03 MB
UGTIPS : 6.76 MB
UGTO2D : 1.02 MB
UGWEB : 9.08 MB
total: 6.59 GB</pre>
<p>除了零組件繪圖外, 若還需要 FEM 有限元素分析, 則額外需要 NXCAE_EXTRAS (706.06 MB)、NXNASTRAN (1.88GB)、NXREPORTS (8.25 MB)、POSTBUILD (37.53 MB) 以及 SIMULATION (2.24 GB) 等目錄. 總容量將達 12 GB.</p>
<p><a href="/downloads/nx1872_from_installed_to_portable_batch_setup.7z">nx1872_from_installed_to_portable_batch_setup.7z</a> 中的檔案可以說明如何將 NX1872 安裝版轉為可攜啟動的設定過程. 從安裝版啟動後的 Menu - Help - Log File 可以取得系統系統過程的所有細節, 其中包括各對應 .bat 執行過程所設定的環境變數, 以及所啟動的 .dll 檔案.</p>
<p>上列 .7z 檔案即包括從此 Log File 中的環境變數註記, 經過 Python 程式轉為 .bat 設定外, 還利用 %cd% 取代原先安裝版本的 C:\NX1872, 並且以 %USERNAME% 取代安裝時的使用者 pj2022, 之後只要再納入 NX1872 的認證伺服器與所購買的 bundles, 就可以將安裝版 NX1872 轉為可存入 USB 隨身碟的可攜版本.</p>
<p></p><h2>CoppeliaSim</h2>
<p><a href="/downloads/cad2024_foosball_with_ball_python_script.7z">cad2024_foosball_with_ball_python_script.7z</a></p>
<p>將上列採用 Python script 控制的手足球, 改為使用 ZMQ Remote API Python 執行控制:</p>
<p><a href="/downloads/cad2024_foosball.7z">cad2024_foosball.7z</a></p>
<p>Ball-Plate-Control: <a href="https://github.com/mdecycu/Ball-Plate-Control">https://github.com/mdecycu/Ball-Plate-Control</a> </p>
<h2>Webots</h2>
<p>Webots 自 R2019a 之後採開放源授權: <a href="https://cyberbotics.com/doc/blog/Webots-2019-a-release">https://cyberbotics.com/doc/blog/Webots-2019-a-release</a>, 採 <a href="https://apache.org/licenses/LICENSE-2.0">Apache License 2.0</a> 授權.</p>
<p><a href="https://www.youtube.com/watch?v=-xBvcOhazeY">How to un simulation on cloud</a></p>
<p><a href="https://www.youtube.com/watch?v=yi4e5FoVWbQ">Set up environment</a></p>
<p><a href="https://www.youtube.com/watch?v=wOHXOg2jLmU">Webots and ROS2</a></p>
<p><a href="https://www.cyberbotics.com/doc/guide/webots-cloud?version=master">Webots.cloud</a> (<a href="https://webots.cloud/">https://webots.cloud/</a>)</p>
<p><a href="https://github.com/cyberbotics/webots-cloud-simulation-examples">Simulation examples</a></p>
<p><a href="https://webots.cloud/proto">Webots cloud proto</a></p>
<p><a href="http://www.graphics.stanford.edu/courses/cs248-98-fall/Assignments/Assignment3/VRML2_Specification/">VRML 2.0 Specification</a></p>
<h4>Webots_doc</h4>
<p><a href="/downloads/A Systematic Comparison of Simulation Software for Robotic Arm Manipulation using ROS2.pdf">A Systematic Comparison of Simulation Software for Robotic Arm Manipulation using ROS2.pdf</a> (<a href="https://arxiv.org/pdf/2204.06433">source</a>)</p>
<p><a href="https://cyberbotics.com/doc/guide/tutorials">https://cyberbotics.com/doc/guide/tutorials</a></p>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots">https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots</a></p>
<p>Tutorial 1:</p>
<p>滑鼠左鍵拖曳可以旋轉視圖</p>
<p>滑鼠中鍵前後滑動可以拉近或拉遠視圖</p>
<p>滑鼠右鍵移動則可拖曳視圖</p>
<p>Shift + 滑鼠左鍵選擇 Object, 可以移動物件<br/><br/><span>When a Webots world is modified with the intention of being saved, it is fundamental that the simulation is first paused and reloaded to its initial state, i.e. the virtual time counter on the main toolbar should show 0:00:00:000. Otherwise at each save, the position of each 3D object can accumulate errors. Therefore, any modification of the world should be performed in that order: pause, reset, modify and save the simulation.</span></p>
<p>Programming:</p>
<p><a href="https://cyberbotics.com/doc/guide/language-setup">https://cyberbotics.com/doc/guide/language-setup</a> <span><br/></span></p>
<p><a href="https://github.com/cyberbotics/urdf2webots">https://github.com/cyberbotics/urdf2webots</a></p>
<p><a href="https://github.com/cyberbotics/wrestling">https://github.com/cyberbotics/wrestling</a></p>
<p>Controller Programming:</p>
<p><a href="https://cyberbotics.com/doc/guide/controller-programming">https://cyberbotics.com/doc/guide/controller-programming</a></p>
<p><a href="https://cyberbotics.com/doc/guide/starting-webots-remotely-ssh">https://cyberbotics.com/doc/guide/starting-webots-remotely-ssh</a></p>
<p><a href="https://cyberbotics.com/doc/guide/interfacing-webots-to-third-party-software-with-tcp-ip">https://cyberbotics.com/doc/guide/interfacing-webots-to-third-party-software-with-tcp-ip</a></p>
<p><a href="https://cyberbotics.com/doc/guide/running-extern-robot-controllers">https://cyberbotics.com/doc/guide/running-extern-robot-controllers</a></p>
<p><a href="https://cyberbotics.com/doc/guide/web-interface">https://cyberbotics.com/doc/guide/web-interface</a></p>
<p><a href="https://cyberbotics.com/animations/soccer_example/soccer.html">https://cyberbotics.com/animations/soccer_example/soccer.html</a></p>
<p><a href="https://github.com/guisalmon/webots-remote-control">https://github.com/guisalmon/webots-remote-control</a></p>
<p>Web:</p>
<p><a href="https://www.cyberbotics.com/doc/guide/web-streaming?version=R2023b">https://www.cyberbotics.com/doc/guide/web-streaming?version=R2023b</a></p>
<p><a href="https://github.com/cyberbotics/webots-server">https://github.com/cyberbotics/webots-server</a></p>
<p><a href="https://cyberbotics.com/doc/guide/web-server">https://cyberbotics.com/doc/guide/web-server</a></p><h1>Python</h1>
<p>Python 3.12 版已經移除 distutils, 表示先前利用 MSYS2 編譯模組的<a href="https://raw.githubusercontent.com/KmolYuan/Pyslvs-UI/a838ec7bde9ebf0857ae8d4f00a272fcb2f57bb7/platform/set_pycompiler.bat">設定</a>, 已經不再適用:</p>
<p style="padding-left: 30px;">The entire <code class="docutils literal notranslate"><span class="pre">distutils</span></code> package is deprecated, to be removed in Python 3.12. Its functionality for specifying package builds has already been completely replaced by third-party packages <code class="docutils literal notranslate"><span class="pre">setuptools</span></code> and <code class="docutils literal notranslate"><span class="pre">packaging</span></code>, and most other commonly used APIs are available elsewhere in the standard library (such as <a class="reference internal" href="https://docs.python.org/3.10/library/platform.html#module-platform" title="platform: Retrieves as much platform identifying data as possible."><code class="xref py py-mod docutils literal notranslate"><span class="pre">platform</span></code></a>, <a class="reference internal" href="https://docs.python.org/3.10/library/shutil.html#module-shutil" title="shutil: High-level file operations, including copying."><code class="xref py py-mod docutils literal notranslate"><span class="pre">shutil</span></code></a>, <a class="reference internal" href="https://docs.python.org/3.10/library/subprocess.html#module-subprocess" title="subprocess: Subprocess management."><code class="xref py py-mod docutils literal notranslate"><span class="pre">subprocess</span></code></a> or <a class="reference internal" href="https://docs.python.org/3.10/library/sysconfig.html#module-sysconfig" title="sysconfig: Python's configuration information"><code class="xref py py-mod docutils literal notranslate"><span class="pre">sysconfig</span></code></a>). There are no plans to migrate any other functionality from <code class="docutils literal notranslate"><span class="pre">distutils</span></code>, and applications that are using other functions should plan to make private copies of the code. Refer to <span class="target" id="index-28"></span><a class="pep reference external" href="https://www.python.org/dev/peps/pep-0632"><strong>PEP 632</strong></a> for discussion.</p>
<p style="padding-left: 30px;">The <code class="docutils literal notranslate"><span class="pre">bdist_wininst</span></code> command deprecated in Python 3.8 has been removed. The <code class="docutils literal notranslate"><span class="pre">bdist_wheel</span></code> command is now recommended to distribute binary packages on Windows. (Contributed by Victor Stinner in <a class="reference external" href="https://bugs.python.org/issue?@action=redirect&amp;bpo=42802">bpo-42802</a>.)</p>
<p>若希望在 Windows 環境中利用 Visual Studio C++ 編譯 Python 模組, 可以下載  <a href="https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/">https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/</a> 安裝後, 重新開機即可.</p>
<p>若要將 visual-cpp-build-tools 配置為可攜套件模組, 則可透過 <a href="https://github.com/Data-Oriented-House/PortableBuildTools">https://github.com/Data-Oriented-House/PortableBuildTools</a> 完成.</p>
<p><a href="/downloads/nxopen_base_and_center_pole_python.txt">nxopen_base_and_center_pole_python.txt</a></p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>