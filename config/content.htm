<h1>About</h1>
<p><a href="https://github.com/mdecycu/cad2024">https://github.com/mdecycu/cad2024</a></p>
<p><a href="https://mde.tw/cad2024">https://mde.tw/cad2024</a></p>
<p>課程目標:</p>
<p style="padding-left: 30px;">利用電腦軟硬體協助建立機電資整合系統設計</p>
<p>課程評分:</p>
<p>期中成績:</p>
<p style="padding-left: 30px;">(50%) - w9 之前完成 5 個與課程教學進度有關的操作示範影片, 每一個影片至少 5 分鐘, 且以"虎尾科技大學機械設計工程系電腦輔助設計與實習" 作為主標題, 影片自選主題作為副標題, 且作者明確標示學號. 每一個影片完成上傳後, 根據各影片內容進行自評, 每一影片最高可佔期中成績 10 分.</p>
<p style="padding-left: 30px;">(50%) - w9 之前完成 5 個與課程教學進度有關的網誌, 完成後根據各網誌內容進行自評, 每一篇網誌最高可佔期中成績 10 分.</p>
<p>期末成績:</p>
<p style="padding-left: 30px;">(50%) - 期中自評成績 X 內容完整度審核比例 (由選課學員整體對所有學員所提供的內容進行審核後評定)</p>
<p style="padding-left: 30px;">(50%) - 期末報告</p><h1>Topics</h1>
<p><a href="https://link.springer.com/book/10.1007/978-3-031-49780-3">2023_course_in_python.pdf</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-9660-8">2023_python_graphics.pdf</a></p><h2>操作系統</h2>
<h2>CMS</h2>
<h2>Github</h2>
<h2>虛擬主機</h2><h2>計算機程式</h2>
<h2>網際程式</h2><h1>IDE</h1>
<p><a href="http://229.cycu.org/Python_for_NX1872.7z">Python_for_NX1872.7z</a></p><h2>Replit</h2>
<p><a href="https://replit.com">https://replit.com</a> </p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsite: git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site: cmsimde is as directory not submodule</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<h2>Codespaces</h2>
<h2>Gitpod</h2>
<p></p>
<p></p><h1>CAD</h1>
<h2>Solvespace</h2>
<p>SolveSpace 所提供的主要功能:</p>
<p>1. 2D 草圖設計:<br/> - 繪製基本 2D 形狀(線、矩形、圓等)<br/> - 添加約束(長度、距離、角度等)<br/> - 完全參數化設計</p>
<p>2. 3D 實體建模:<br/> - 通過擠出、旋轉等方式從 2D 草圖生成 3D 實體<br/> - 支持 3D 實體的布林運算(並集、差集、交集)<br/> - 提供渲染和陰影視覺效果</p>
<p>3. 參數化和約束求解:<br/> - 可添加各種幾何和代數約束<br/> - 支持尺寸驅動設計<br/> - 自動求解過約束或過約定系統</p>
<p>4. 分析工具:<br/> - 質量屬性分析(體積、表面積、質心等)<br/> - 公差分析<br/> - 運動學模擬(僅限簡單機構)</p>
<p>5. 輔助建模工具:<br/> - 添加工程參考幾何(平面、軸線等)<br/> - 支持配置不同的草圖視圖和投影視圖</p>
<p>6. 開發者擴展性:<br/> - 開源代碼,支持定製化擴展<br/> - 可通過 C++、Python 等語言擴充功能</p>
<p>7. 操作界面:<br/> - 傳統的圖形用戶界面<br/> - 支持鍵盤快捷鍵和命令行輸入</p>
<p>8. 導入導出格式:<br/> - 支持導入/導出 STEP、STL、DXF 等 CAD 文件格式<br/> - 可嵌入網頁或其他應用程序</p>
<p></p><h2>Solidworks</h2>
<p class="whitespace-pre-wrap break-words">SolidWorks Collaborative Server提供了以下主要功能:</p>
<ol class="-mt-1 list-decimal space-y-2 pl-8" depth="0">
<li class="whitespace-normal break-words" index="0">數據管理與版本控制</li>
</ol>
<ul class="-mt-1 list-disc space-y-2 pl-8" depth="0">
<li class="whitespace-normal break-words" index="0">集中式數據庫存儲SolidWorks文件及相關數據</li>
<li class="whitespace-normal break-words" index="1">自動版本控制和修訂管理</li>
<li class="whitespace-normal break-words" index="2">訪問權限控制,確保數據安全</li>
</ul>
<ol class="-mt-1 list-decimal space-y-2 pl-8" depth="0" start="2">
<li class="whitespace-normal break-words" index="0">協同設計與工作流程</li>
</ol>
<ul class="-mt-1 list-disc space-y-2 pl-8" depth="0">
<li class="whitespace-normal break-words" index="0">多人同時編輯同一文件,實現設計協作</li>
<li class="whitespace-normal break-words" index="1">設計評審和批准流程管理</li>
<li class="whitespace-normal break-words" index="2">任務分配和跟踪</li>
<li class="whitespace-normal break-words" index="3">通知和訂閱功能</li>
</ul>
<ol class="-mt-1 list-decimal space-y-2 pl-8" depth="0" start="3">
<li class="whitespace-normal break-words" index="0">數據重用與參考管理</li>
</ol>
<ul class="-mt-1 list-disc space-y-2 pl-8" depth="0">
<li class="whitespace-normal break-words" index="0">支持設計數據重用,避免重複工作</li>
<li class="whitespace-normal break-words" index="1">自動更新參考文件的最新版本</li>
</ul>
<ol class="-mt-1 list-decimal space-y-2 pl-8" depth="0" start="4">
<li class="whitespace-normal break-words" index="0">檢視和查找</li>
</ol>
<ul class="-mt-1 list-disc space-y-2 pl-8" depth="0">
<li class="whitespace-normal break-words" index="0">提供各種檢視模式和工具查找所需數據</li>
<li class="whitespace-normal break-words" index="1">文檔預覽功能</li>
<li class="whitespace-normal break-words" index="2">全文檢索</li>
</ul>
<ol class="-mt-1 list-decimal space-y-2 pl-8" depth="0" start="5">
<li class="whitespace-normal break-words" index="0">集成與報告</li>
</ol>
<ul class="-mt-1 list-disc space-y-2 pl-8" depth="0">
<li class="whitespace-normal break-words" index="0">與PLM、ERP等系統集成數據傳輸</li>
<li class="whitespace-normal break-words" index="1">提供報表工具生成各類統計報告</li>
</ul>
<p class="whitespace-pre-wrap break-words">SolidWorks Collaborative Server通過上述功能大大提高了設計團隊的協作效率,實現了設計數據的有效管理。簡而言之就是支持多人協同設計、版本控制和集中數據管理。</p><h2>Onshape</h2>
<p>Onshape 是一款基於雲端的3D CAD軟體,它提供了許多功能來協助設計和工程工作。Onshape 作為全功能的雲端CAD工具,提供了建模、協作、分析、數據管理等全面的功能,適合用於產品設計、工程項目等領域。</p>
<p>以下是 Onshape 提供的主要功能:</p>
<p>1. 全功能3D參數式建模工具:</p>
<p style="padding-left: 30px;">- 實體和曲面建模<br/> - 參數化和約束幾何體<br/> - 自動生成製造製圖<br/> - 直覺式草圖工具</p>
<p>2. 直接編輯功能:</p>
<p style="padding-left: 30px;">- 不需要返回設計樹狀結構<br/> - 可以直接編輯和修改現有幾何體</p>
<p>3. 版本控制和分支:</p>
<p style="padding-left: 30px;">- 類似 Git 的版本控制系統<br/> - 可以創建分支和合併分支<br/> - 方便協作和跟踪修改歷史</p>
<p>4. 數據管理和整合:</p>
<p style="padding-left: 30px;">- 整合PDM/PLM系統<br/> - 材料庫和標準件庫<br/> - Onshape App Store 提供各種插件</p>
<p>5. 實時協作和評註:</p>
<p style="padding-left: 30px;">- 多人同時編輯同一個文件<br/> - 添加評註和討論設計細節</p>
<p>6. 模擬和分析工具:</p>
<p style="padding-left: 30px;">- 有限元分析(FEA)<br/> - 運動學模擬<br/> - 碰撞檢測</p>
<p>7. 雲端計算和存儲:</p>
<p style="padding-left: 30px;">- 無需安裝軟體<br/> - 所有設計都存儲在雲端<br/> - 可隨時隨地訪問</p>
<p>8. 開放API和集成:</p>
<p style="padding-left: 30px;">- 可與其他軟體系統集成<br/> - 提供API進行自動化和定製</p><h2>NX</h2><h2>CoppeliaSim</h2>
<p><a href="/downloads/cad2024_foosball_with_ball_python_script.7z">cad2024_foosball_with_ball_python_script.7z</a></p>
<p>將上列採用 Python script 控制的手足球, 改為使用 ZMQ Remote API Python 執行控制:</p>
<p><a href="/downloads/cad2024_foosball.7z">cad2024_foosball.7z</a></p>
<p>Ball-Plate-Control: <a href="https://github.com/mdecycu/Ball-Plate-Control">https://github.com/mdecycu/Ball-Plate-Control</a> </p><h2>Webots</h2>
<p><a href="https://www.youtube.com/watch?v=-xBvcOhazeY">How to un simulation on cloud</a></p>
<p><a href="https://www.youtube.com/watch?v=yi4e5FoVWbQ">Set up environment</a></p>
<p><a href="https://www.youtube.com/watch?v=wOHXOg2jLmU">Webots and ROS2</a></p>
<p><a href="https://www.cyberbotics.com/doc/guide/webots-cloud?version=master">Webots.cloud</a> (<a href="https://webots.cloud/">https://webots.cloud/</a>)</p>
<p><a href="https://github.com/cyberbotics/webots-cloud-simulation-examples">Simulation examples</a></p>
<p><a href="https://webots.cloud/proto">Webots cloud proto</a></p><h1>Python</h1>
<p><a href="/downloads/nxopen_base_and_center_pole_python.txt">nxopen_base_and_center_pole_python.txt</a></p><h1>Projects</h1>
<h2>Robots</h2>
<h3>Non-mobile</h3>
<h3>Mobile</h3><h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>