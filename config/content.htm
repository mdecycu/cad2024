<h1>About</h1>
<p>Repo: <a href="https://github.com/mdecycu/cad2024">https://github.com/mdecycu/cad2024</a></p>
<p>Site: <a href="https://mde.tw/cad2024">https://mde.tw/cad2024</a></p>
<p>課程目標:</p>
<p style="padding-left: 30px;"><span>學習如何利用 CAD 套件與 Python 程式協助執行機電整合系統設計</span></p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/Intro_to_Mechatronics.pdf">Intro_to_Mechatronics.pdf</a> (<a href="http://engineering.nyu.edu/mechatronics/Control_Lab/bck/VKapila/Intro2EngLect/">Source</a>, <a href="https://ieeexplore.ieee.org/document/299539">ref1</a>, <a href="https://ieeexplore.ieee.org/author/37088243210">ref2</a>, <a href="https://www.rs-online.com/designspark/mechatronics-engineering-the-future">ref3</a>, <a href="https://fcc-na.com/what-is-mechatronics/">ref4</a>)</p>
<p style="padding-left: 30px;"><a href="https://pythontutor.com/"></a><a href="https://link.springer.com/book/10.1007/978-3-031-57148-0">Programming with Python for Engineers</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: 7pg9z7u</p>
<p>USB 隨身碟:</p>
<p style="padding-left: 30px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p>CAD 套件: <a href="https://solvespace.com/">Solvespace</a> and <a href="https://plm.sw.siemens.com/en-US/nx/">Siemens NX</a></p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/NX2312_CAD.7z">下載</a> NX2312 可攜 CAD 壓縮檔案 (1.85 GB, 解開後約 9 GB)</p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/nx2312_Drafting.7z">nx2312_Drafting.7z</a></p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/nx2312_nxplot.7z">nx2312_nxplot.7z</a></p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p>機電模擬: <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a></p>
<p>課程評分:</p>
<p style="padding-left: 30px;">出席 (10%) - 自行舉證評分</p>
<p style="padding-left: 30px;">Github Classroom 作業與隨堂考試 (60%) - 以 Github 帳號領取作業倉儲後, 建立包含操作流程影片與檔案下載的網頁</p>
<p style="padding-left: 30px;">期末口頭與書面專題報告 (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告</p>
<hr/>
<p>行事曆</p>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei"> 全頁檢視 </a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p><h2>links</h2>
<p>以下為修課學員的作業倉儲與網站連結:</p>
<p><a href="https://mde.tw/cad2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/11e8e4bb5182f6e5d59fa09797dc574684d9510a/2a_w3_site_repo_brython.py">2a site and repo</a></p>
<p><a href="https://mde.tw/cad2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/ea83ce68baba381d7ee002103c5c8b3945fe9333/2b_w3_site_repo_brython.py">2b site and repo</a></p>
<hr/>
<p><a href="https://mde.tw/cad2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/8788b278213b31606ab9f779f9ed1f12896c5d04/2a_list_w7_page_brython.py">列出 2a 已經建立標題為 w7 頁面的學員</a></p>
<p><a href="https://mde.tw/cad2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/fbf6cb7bf6c4db653592ca766e1e9bd2a9ebcba6/2b_list_w7_page.py">列出 2b 已經建立標題為 w7 頁面的學員</a></p>
<p>w8 上課前的 2a 學員 w7 頁面連結:</p>
<p><a href="https://mdecad2024.github.io/hw-zhe41223118/content/w7.html">41223118_w7</a> <a href="https://mdecad2024.github.io/hw-41223133/content/w7.html">41223133_w7</a> <a href="https://mdecad2024.github.io/hw-41223134/content/w7.html">41223134_w7</a> <a href="https://mdecad2024.github.io/hw-41223136/content/w7.html">41223136_w7</a></p>
<p>w8 上課前的 2b 學員 w7 頁面連結:</p>
<p><a href="https://mdecad2024.github.io/hw-41023137/content/w7.html">41023137_w7</a> <a href="https://mdecad2024.github.io/hw-41023155/content/w7.html">41023155_w7</a> <a href="https://mdecad2024.github.io/hw-41223201/content/w7.html">41223201_w7</a> <a href="https://mdecad2024.github.io/hw-41223202/content/w7.html">41223202_w7</a> <a href="https://mdecad2024.github.io/hw-41223205/content/w7.html">41223205_w7</a> <a href="https://mdecad2024.github.io/hw-41223206/content/w7.html">41223206_w7</a> <a href="https://mdecad2024.github.io/hw-41223208-hw/content/w7.html">41223208_w7</a> <a href="https://mdecad2024.github.io/hw-41223209/content/w7.html">41223209_w7</a> <a href="https://mdecad2024.github.io/hw-41223211/content/w7.html">41223211_w7</a> <a href="https://mdecad2024.github.io/hw-41223216/content/w7.html">41223216_w7</a> <a href="https://mdecad2024.github.io/hw-41223217/content/w7.html">41223217_w7</a> <a href="https://mdecad2024.github.io/hw-41223218/content/w7.html">41223218_w7</a> <a href="https://mdecad2024.github.io/hw-leeshaowei0716/content/w7.html">41223221_w7</a> <a href="https://mdecad2024.github.io/hw-41223222/content/w7.html">41223222_w7</a> <a href="https://mdecad2024.github.io/hw-linryan23/content/w7.html">41223223_w7</a> <a href="https://mdecad2024.github.io/hw-41223224/content/w7.html">41223224_w7</a> <a href="https://mdecad2024.github.io/hw-41223225/content/w7.html">41223225_w7</a> <a href="https://mdecad2024.github.io/hw-41223226-0/content/w7.html">41223226_w7</a> <a href="https://mdecad2024.github.io/hw-41223227/content/w7.html">41223227_w7</a> <a href="https://mdecad2024.github.io/hw-41223230/content/w7.html">41223230_w7</a> <a href="https://mdecad2024.github.io/hw-41223234/content/w7.html">41223234_w7</a> <a href="https://mdecad2024.github.io/hw-41223235/content/w7.html">41223235_w7</a> <a href="https://mdecad2024.github.io/hw-41223236/content/w7.html">41223236_w7</a> <a href="https://mdecad2024.github.io/hw-Cloud41223237/content/w7.html">41223237_w7</a> <a href="https://mdecad2024.github.io/hw-ych0227/content/w7.html">41223240_w7</a> <a href="https://mdecad2024.github.io/hw-41223242/content/w7.html">41223242_w7</a> <a href="https://mdecad2024.github.io/hw-41223243/content/w7.html">41223243_w7</a> <a href="https://mdecad2024.github.io/hw-Liu41223244/content/w7.html">41223244_w7</a> <a href="https://mdecad2024.github.io/hw-41223245/content/w7.html">41223245_w7</a> <a href="https://mdecad2024.github.io/hw-41223246/content/w7.html">41223246_w7</a> <a href="https://mdecad2024.github.io/hw-CYC41223247/content/w7.html">41223247_w7</a> <a href="https://mdecad2024.github.io/hw-41223249/content/w7.html">41223249_w7</a> <a href="https://mdecad2024.github.io/hw-timluo123/content/w7.html">41223250_w7</a> <a href="https://mdecad2024.github.io/hw-41223251/content/w7.html">41223251_w7</a></p>
<hr/>
<p>上列學員的作業網站與倉儲連結資料, 取自 <a href="https://github.com/mdecycu/list">https://github.com/mdecycu/list</a> 倉儲中各班名單的 Github Pages, 若學員的 Github 帳號有異動, 必須重新領取作業倉儲並透過 Pull Requests 加入或修改與本身學號對應的 Github 帳號.</p>
<p>學號與 Github 帳號間的分隔符號為 Tab, 也就是 \t, Pull Requests 是一種允許任何 Github 使用者透過軟性且間接的方式, 提出修改任何公開倉儲中的任何資料.</p>
<p>所謂軟性, 意即針對任何公開倉儲, 雖然任何 Github 使用者, 都可以透過 Pull Requests 提議修改內容, 但是否將修改的內容合併入目標倉儲的決定權, 並不在提出 Pull Requests 的用戶, 而是掌握在對目標倉儲有直接修改權的 Github 用戶.</p>
<p>所謂間接, 指的是 Pull Requests 並非直接對目標倉儲的內容進行修改, 而是必須先登入 Github 帳號後, 連線到目標倉儲的網址, 然後透過 Fork 功能, 將目標倉儲"插"一份到自己的帳號下, 由於"插"回來的倉儲是位於自己的帳號下, 因此可以對 Forked 倉儲內容進行修改.</p>
<p>但是修改 Forked 倉儲內容之後, 必須透過建立 Pull Requests, 將此 PR 通報到目標倉儲, 然後再由目標倉儲的管理者決定是否接受此"拉回"合併的"請求".</p>
<p>上面所說明的所謂 Pull Requests 是希望從 Forked 倉儲的版本資料, 合併至目標倉儲, 其決定權在目標倉儲的管理者. 但另外一種使用情境則是, 當目標倉儲被某一使用者 Fork 之後, 目標倉儲的內容因為改版而變更後, 若先前 Forked 倉儲希望取得目標倉儲所進行的修改內容, 需要在建立所謂 Pull Requests 流程時的 URL, 將目標倉儲的管理者帳號與 Forked 倉儲用戶帳號對調, 要求執行所謂的"逆向" Pull Requests.</p>
<p>由於"逆向" Pull Requests 的合併, 是希望將目標倉儲的修改內容, 合併至 Forked 倉儲, 其決定權自然屬於 Forked 倉儲的用戶, 因此該用戶可以自行同意該"逆向" Pull Requests 的合併請求, 讓 Forked 倉儲的內容與目標倉儲保持同步.</p>
<h2>Site</h2>
<p>所謂"<span>基於瀏覽器的分散式版次管理與整合程式開發環境":</span></p>
<ol>
<li><span>基於瀏覽器 (<a href="https://en.wikipedia.org/wiki/Web_browser">Web Browser</a>)</span></li>
<li><span>分散式版次管理 (<a href="https://en.wikipedia.org/wiki/Distributed_version_control">Distributed Version Control</a>)</span></li>
<li><span>整合程式開發環境 (<a href="https://en.wikipedia.org/wiki/Integrated_development_environment">Integrated Development Environment</a>)</span></li>
</ol>
<p><span>分散式版次管理:</span></p>
<ol>
<li><span>使用者可以在<span style="background-color: #ffff00;">多個不同地方</span> (不同電腦、不同平台或同一電腦的不同目錄) 維護同一個倉儲內容</span></li>
<li><span>多名具維護權限的使用者, 可以有條不紊<span style="background-color: #ffff99;">協同維護</span>同一個倉儲內容</span></li>
<li><span>每次維護均紀錄細節內容, 使用者可以切換或回復至先前的任一版本, 各版本的<span style="background-color: #ffff00;">資料比較不容易丟失</span></span></li>
</ol>
<p>本課程維護作業網站的方法:</p>
<ol>
<li>利用作業倉儲中的 Codespaces (登入 Github 後, 記得查驗 Codespaces <a href="https://github.com/settings/billing/summary">Usage hours</a>) 進行維護</li>
<li>利用 USB 或電腦中的可攜程式系統進行維護</li>
</ol>
<p>與 Codespaces 類似的服務:</p>
<ol>
<li><a href="https://www.gitpod.io/pricing">https://www.gitpod.io/pricing</a> </li>
<li><a href="https://codesandbox.io/pricing">https://codesandbox.io/pricing</a> </li>
</ol>
<p>Codespaces 使用方法請參考<a href="https://mde.tw/cad2024/content/Codespaces.html">這裡</a></p>
<p>利用 USB 或電腦中的<span>可攜程式系統進行維護:</span></p>
<ol>
<li><span>直接執行 USB 中的程式檔案</span></li>
<li><span>USB 僅存倉儲、相關設定與必要的認證檔案</span></li>
</ol>
<hr/>
<p><span></span>Flask 啟動 https 連線可以採 adhoc 與使用 key.pem, cert.pem 等兩種方式, 其中採 key.pem, cert.pem 的執行無需每次連線都生成數位簽章, 因此速度較快.</p>
<p>cert.pem 與 key.pem 可以利用可攜程式中的 openssl.exe 建立:</p>
<p>openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem</p>
<p>放入倉儲根目錄, 並修改 cmsimde 目錄中的 wsgi.py:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/python

"""Flask startup script
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__)))
# import flaskapp at the same directory
import flaskapp

# get uwsgi, ip and port variable values of flaskapp.py
uwsgi = flaskapp.uwsgi
ip = flaskapp.ip
port = flaskapp.dynamic_port

if uwsgi:
    # run on remote site
    application = flaskapp.app
else:
    # on localhost, on Linux or Mac need to use python3 wsgi.py to execute
    #flaskapp.app.run(host=ip, port=port, debug=True, ssl_context="adhoc")
    flaskapp.app.run(host=ip, port=port, debug=True, ssl_context=('cert.pem', 'key.pem'))</pre>
<p>此外, 為了加快 USB 中編輯動態網站與生成靜態網站的速度, 可以每次啟動電腦後下載 python_2025_lite.7z 後解開至 C:\, 使用 batch file 執行如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off

REM 下載 python_2025_lite.7z

curl --user kmolab:kmolab --output C:\Users\%USERNAME%\Downloads\python_2025_lite.7z "http://229.cycu.org/python_2025_lite.7z"

REM 解開壓縮檔案至 C:\

"C:\Program Files\7-Zip\7z" x C:\Users\%USERNAME%\Downloads\python_2025_lite.7z -oC:\ -y</pre>
<p>並僅將 SSH 認證檔案、額外安裝的 Python 模組與 Github 倉儲放在 USB 隨身碟, 其餘執行檔案則使用 C:\ 固態硬碟中下載或既有的檔案, 以加快執行速度, 其對應的啟動批次檔案 start_ipv6_hybrid.bat 如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"

%Disk%:

REM 請先將 python_2025_lite 下載到 C:\
REM 除了個人作業倉儲與  ssh key 之外, 其他執行都使用 C:\ 中的檔案
set Local=C:\python_2025_lite\data
REM for cadlab
REM set NX_location="C:\Program Files\Siemens\NX2312"
set NX_location=E:\NX2312_CAD

REM python 執行將使用 C:\, 但是額外的 Python 模組將存至隨身碟
REM pip install &lt;package&gt; --target  Y:\extra_python_modules, 但必須將此額外模組路徑納入 PYTHONPATH

set HomePath=%Disk%:\home_ipv6
set HomeDrive=%Disk%:\home_ipv6
set Home=%Disk%:\home_ipv6
set USERPROFILE=%Disk%:\home_ipv6

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Local%\Python310\DLLs;%Local%\Python310\Lib;%Local%\Python310\Lib\site-packages;%NX_location%\NXBIN\python;%Disk%:\extra_python_modules;
set PYTHONHOME=%Local%\Python310

REM for putty
set GIT_SSH=%Local%\PuTTY\plink.exe

REM for Java and Android SDK
set java_home=%Local%\java\jdk8u222-b10
set ANDROID_SDK_home=%Local%\home_ipv6
set GRADLE_USER_home=%Local%\home_ipv6
set ANDROID_SDK_ROOT=%Local%\android\sdk
set ANDROID_Home=%Local%\android\sdk
set REPO_OS_OVERRIDE=windows

REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%Local%\Python310;%Local%\Python310\Scripts;
REM 設定跟Git 有關的命令搜尋路徑
set path_git=%Local%\portablegit\bin;
REM 設定 msys2 64 位元的執行路徑
set path_msys2=%Local%\msys64\ucrt64\bin;
REM set for LaTeX
set path_miketex=%Local%\miktex-portable\texmfs\install\miktex\bin\x64;
REM Flutter path
set path_flutter=%Local%\flutter\bin;%java_home%\bin;%Local%\Android\sdk;%Local%\Android\sdk\tools;%Local%\Android\sdk\tools\bin;%Local%\Android\sdk\emulator;%Local%\Android\sdk\platform-tools;%Local%\flutter\bin\cache\dart-sdk\bin;%Local%\vscode;
set path_node=%Local%\node-v14.15.4-win-x64;

set path_postgresql=%Local%\postgresql13\bin;
set path_range=%Local%\Range3_official\bin;
rem set path_range=%Local%\range-3.2.5_kmol\bin;
set path_lua=%Local%\lua-5.3.5\;
set path_core=%Local%\coreutils-5.3.0\bin;
REM for gogs
set path_putty=%Local%\PuTTY;
set path_vscode=%Local%\vscode;

REM for Rust
set MINGW_PATH=%path_msys2%;
set GIT_PATH=%path_git%;
set VSCODE_PATH=%path_vscode%
set RUSTUP_HOME=%Local%\Rust\rust
set CARGO_HOME=%Local%\Rust\cargo
set RUST_PATH=%CARGO_HOME%\bin

REM for Erlang and Elixir
set path_erlang=%Local%\elixir\erl10.7\bin\;%Local%\elixir\erl10.7\erts-10.7\bin;%Local%\elixir\elixir\bin;
set ERTSPATH=%Local%\elixir\erl10.7\erts-10.7\bin
set ERLINI=%Local%\elixir\erl10.7\erts-10.7\bin\erl.ini

REM for Haskell
set path_haskell=%Local%\ghc-9.0.1-x86_64-unknown-mingw32\bin;
REM for node.js
set path_nodejs=%Local%\node-v14.17.2-x64\nodejs;%Local%\node-v14.17.2-x64\nodejs\node_modules\npm;

REM 加入 PostgreSQL 所需的環境變數設定

@SET PGDATA=%Local%\postgresql13\data
@SET PGDATABASE=postgres
@SET PGUSER=postgres
@SET PGPORT=5432
@SET PGLOCALEDIR=%Local%\postgresql13\share\locale

REM for Range3
REM REG IMPORT %Local%\range3.reg

REM proxy needed for heroku login
REM proxy can not use with fossil scm
REM proxy can not use with Rust installation
REM needed for node.js
REM set HTTP_PROXY=http://[2001:288:6004:xx::42]:3128
REM set HTTPS_PROXY=http://[2001:288:6004:xx::42]:3128

REM for PyRep
set VREP_PATH=%Local%\CoppeliaSim

REM BOOST_ROOT for compiling coppeliasim but maybe not for linking
REM set BOOST_ROOT=%Local%\boost_1_76_0\;
set path_copsim=%Local%\boost_1_76_0\;%Local%\Strawberry\perl\bin;%Local%\cmake-3.21.0-windows-x86_64\bin;%Local%\diffutils-2.8.7-1\bin;%Local%\patch-2.5.9-7\bin;%D%:\jom_1_1_2;%Local%\LLVM\bin;%Local%\QtCreator\bin;%Local%\CoppeliaSimEdu;%Local%\Python310\tcl\tcl8.6;

REM for CMake
set CMAKE_C_COMPILER=%Local%\msys64\ucrt64\bin\gcc;
set CMAKE_CXX_COMPILER=%Local%\msys64\ucrt64\bin\g++;

REM set QT_QPA_PLATFORM_PLUGIN_PATH=Y:\msys64_20240507\mingw64\share\qt5\plugins\platforms
REM set QT_PLUGIN_PATH=Y:\msys64_20240507\mingw64\share\qt5\plugins

REM for execute scite directly
set path_scite=%Local%\wscite\;

REM for simExtZMQ
set path_xsltproc=%Local%\xsltproc;

REM for OpenSSL
Set OPENSSL_CONF=%Local%\OpenSSL-Win64\SSL\openssl.cnf
set path_openssl=%Local%\OpenSSL-Win64\bin;

path=%Local%;%path_python%;%path_git%;%path_copsim%;%path_msys2%;%path_miketex%;%path_flutter%;%path_node%;%path_tcc%;%path_postgresql%;%path_range%;%path_lua%;%path_core%;%path_putty%;%path_vscode%;%RUST_PATH%;%path_erlang%;%path_nodejs%;%path_haskell%;%path_scite%;%path_xsltproc%;%path_gnuplot%;%path_openssl%;%path%;

REM for NX2312, must after path setup 
set SPLM_LICENSE_SERVER=29000@192.168.56.3
set UGII_LANG=english
set UGS_LICENSE_BUNDLE=ACD11,ACD10
set UGII_BASE_DIR=%NX_location%
set UGII_TMP_DIR=%Local%\tmp
set UGII_LIB_PATH=%NX_location%\NXBIN\python
set ugii=%NX_location%\ugii;%NX_location%\nxbin;
path = %ugii%;%path%
REM Xcopy %Local%\home_ipv6\AppData\Local\Siemens\NX2312 C:\users\%USERNAME%\AppData\Local\Siemens\NX2312 /E /H /C /I /Y

REM start ugraf -nx

REM python %Local%\tmp\nx_ex\new_part.py

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Local%\wscite\SciTE.exe
start /MIN %Local%\wscite\SciTE.exe


Exit
</pre>
<p></p>
<h3>Pages</h3>
<p>以下說明課程網頁各頁面的相關內容:</p>
<p><a href="https://mde.tw/cad2024/content/About.html">About</a></p>
<p style="padding-left: 30px;">課程網站的倉儲與連結, 課程目標與教材, Team code, 評分標準, 可攜下載 (Python and NX2312), Schedule 等.</p>
<p style="padding-left: 30px;">機電整合教材, 主要介紹機電整合流程相關英文術語.</p>
<p><a href="https://mde.tw/cad2024/content/links.html">links</a>:</p>
<p style="padding-left: 30px;">所有學員的作業倉儲與網頁連結 (利用 <a href="https://mde.tw/cad2024/content/Brython.html">Brython</a> 與 <a href="https://github.com/mdecycu/list">list</a> 產生), Pull Requests 用法說明.</p>
<p><a href="https://mde.tw/cad2024/content/Site.html">Site</a>:</p>
<p style="padding-left: 30px;">說明如何啟動可攜程式環境, 如何在雲端與近端維護作業網站.</p>
<h2>Evaluate</h2>
<p>網頁內容評分: 用來評量受評者的作業網頁內容, 是否完整且充實</p>
<p>操作影片評分: 用來評量受評者所提供的操作影片內容, 是否說明清楚, 提供字幕且完整呈現標的內容</p>
<p>倉儲提交說明: 用來評量受評者所提供的倉儲提交說明是否清楚, 以及提交次數及頻率, 是否足以證明其用功程度</p>
<p>下載檔案評分: 用來評量受評者在作業網頁上所提供的檔案下載內容, 是否完整且內容充實</p>
<p>作業心得評分: 用來評量受評者的作業心得是否內容豐富, 且值得令人讚賞與學習</p>
<hr/>
<p>以上各分項評分各佔 20%, 評分基準如下:</p>
<p>非常棒 - 得 20 分 (即一百分, 表現非常棒且完美的評分)</p>
<p>很棒 - 得 18 分 (即九十分, 表現很棒的的評分)</p>
<p>很好 - 得 16 分 (即八十分, 表現很好的評分)</p>
<p>還可以 - 得 14 分 (即七十分, 表現還可以的評分)</p>
<p>及格 - 得 12 分 (即六十分, 表現算是及格的評分)</p>
<p>需加強 - 得 10 分 (即五十分, 需要再加強的評分)</p>
<h2>Jupyter</h2>
<p>USB 隨身碟:</p>
<p style="padding-left: 30px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p>利用 Jupyter 建立 .ipynb 格式的 notebook 檔案:</p>
<ol>
<li>以 start_ipv6.bat 開啟隨身碟中的可攜程式環境</li>
<li>在命令列視窗中, 輸入 jupyter lab --collaborative 後可在瀏覽器中開啟 Jupyter lab</li>
<li>系統內定以執行 jupyter lab --collaborative 指令所在目錄作為根目錄</li>
<li>Jupyter lab 的伺服器 ip 設定位於 home_ipv6\.jupyter\jupyter_server_config.py 檔案中的 c.ServerApp.ip 變數, 內定為 localhost, 使用者可以自行修改為電腦連外 IPv4 或 IPv6 位址</li>
<li>home_ipv6\.jupyter\jupyter_server_config.py 檔案中的 c.ServerApp.port = 8888 為內定連線埠號</li>
<li>系統內定使用 http 連線, 使用者可利用 openssl 建立 cert.pem 與 key.pem, 並與 c.ServerApp.certfile 及c.ServerApp.keyfile 等系統變數綁定後, 使用 https 連線</li>
<li>若希望讓其他用戶透過網路進行協同編輯, 可從命令列視窗中, 輸入 jupyter server list 取得登入所需的 token, 或將設定修改為使用者自訂的密碼登入</li>
<li>各 Jupyter lab 用戶可從左方的 Collaboration 頁面中檢視參與協同者的名單</li>
<li>使用結束後, 以 File - Shutdown 關閉 Jupyterlab</li>
</ol>
<p>利用 openssl 指令建立 cert.pem 與 key.pem:</p>
<p style="padding-left: 30px;">openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem</p>
<p>使用 https 連線時, cert.pem 與 key.pem 設定:</p>
<p style="padding-left: 30px;">c.ServerApp.certfile = u'y:\home_ipv6\.jupyter\cert.pem'</p>
<p style="padding-left: 30px;">c.ServerApp.keyfile = u'y:\home_ipv6\.jupyter\key.pem'</p>
<h2>Mechatronics</h2>
<p>機電整合 (Mechatronics) 一詞將機械 (mecha) 和電子 (tronics) 結合在一起。意即在產品的設計與製造流程中，將機械工程、電子技術和智能計算機控制的相關技術加以結合。機電整合產品經常利用電子元件取代傳統的機械功能，從而<span style="background-color: #ffff99;">實現更大的靈活性、更簡單的重新設計與重新編程，並提升自動化數據收集與報告生成的能力</span>。</p>
<p>Mechatronics was created by Ko Kikuchi, the former president of the Yasakawa Electric Company (<a href="https://zh.wikipedia.org/zh-tw/%E5%AE%89%E5%B7%9D%E9%9B%BB%E6%A9%9F">安川電機</a>), who introduced the term in 1969 as a trademark for devices that combined mechanics and electronics. The term "mechatronics" was coined by Tetsuro Mori and was trademarked by Yasakawa Electric Corporation from 1971 to 1982. The discipline of mechatronics emerged as a new engineering discipline in the late twentieth century, combining mechanical engineering and electronics. The evolution of mechatronics can be traced back to the gradual addition of electronics, computer controls, and software to electromechanical products. Mechatronics is an interdisciplinary field that integrates mechanics, electronics, computing, control techniques, and artificial intelligence to create new value in equipment and systems. (<a href="https://typeset.io/questions/who-created-mechatronics-4nsc62xdwd">source</a>)</p>
<p><a href="https://github.com/s40723210/cd2020/tree/master/downloads">https://github.com/s40723210/cd2020/tree/master/downloads</a> </p>
<p><a href="http://229.cycu.org/40723210_2020.7z">40723210_2020.7z</a></p>
<p><a href="https://github.com/s40723221/cd2020/tree/master/downloads">https://github.com/s40723221/cd2020/tree/master/downloads</a> </p>
<p><a href="https://s40723221.github.io/cd2020/downloads/MechaFutureAndChallenges.pdf">機電整合未來發展與挑戰</a> (<a href="https://s40723210.github.io/cd2020/downloads/MechaFutureAndChallenges%E7%BF%BB%E8%AD%AF.pdf">version 2</a>)</p>
<p><a href="http://229.cycu.org/40723221_2020.7z">40723221_2020.7z</a></p>
<p><a href="https://www.20sim.com/downloads/files/20sim.exe">https://www.20sim.com/downloads/files/20sim.exe</a></p>
<p><a href="https://openmodelica.org/download/download-windows/">https://openmodelica.org/download/download-windows/</a></p>
<h2>Servers</h2>
<p>s104.cycu.org 是一台可讓使用者存放零組件 STL 檔案的伺服器:</p>
<p>每一位學員都將透過"學號@nfu.edu.tw"收到 sftp 檔案至此一主機的帳號與密碼.</p>
<p>帳號為各學員的學號</p>
<p>密碼則可從通知信中查詢</p>
<p>sftp 指令:</p>
<p>請在近端先將目錄切換至要上傳 STL 檔案的所在目錄, 例如: STL 零件檔案位於 C:\tmp 目錄:</p>
<p>假設使用者的學號為 1234, 此學號代碼即為帳號</p>
<p>C:</p>
<p>cd \tmp</p>
<p>C:\tmp&gt;sftp <a href="mailto:1234@s104.cycu.org">1234@s104.cycu.org</a></p>
<p>1234@s104.cycu.org's password:</p>
<p>輸入對應密碼後:</p>
<p>Connected to s104.cycu.org.<br/>sftp&gt; pwd<br/>Remote working directory: /C:/Users/1234.DESKTOP-BAEUNSD<br/>sftp&gt; cd ..<br/>sftp&gt; cd 1234<br/>sftp&gt; pwd<br/>Remote working directory: /C:/Users/1234<br/>sftp&gt; cd public_html<br/>sftp&gt; put 1234_lesson2_solvespace.stl<br/>Uploading 1234_lesson2_solvespace.stl to /C:/Users/1234/public_html/1234_lesson2_solvespace.stl<br/>1234_lesson2_solvespace.stl                                                                           100%  32KB  45.1MB/s   00:00<br/>sftp&gt;</p>
<p>上傳結束後, 便可從 https://s104.cycu.org/~1234/1234_lesson2_solvespace.stl 擷取此一檔案. 假設學員學號為 1234 的 Github 帳號也是 1234, 則能夠直接在其作業網站上瀏覽此一 STL 零件檔案的連結將會是:</p>
<p>https://mdecad2024.github.io/hw-1234/cmsimde/static/viewstl.html?src=https://s104.cycu.org/~1234/1234_lesson2_solvespace.stl</p>
<p></p>
<h2>Codespaces</h2>
<p>利用 Codespaces 維護課程網站的步驟:</p>
<ol>
<li>chmod u+x init_replit</li>
<li>./init_replit</li>
<li>python main.py </li>
<li>開啟轉址後的瀏覽器, 以內建密碼 admin 登入進行網站內容編輯</li>
<li>動態網頁內容編輯告一段落後, 利用 Convert 功能將動態內容轉為靜態網站資料</li>
<li>檢查轉靜態之後的網頁內容, python main2.py 執行後, 開啟瀏覽器觀看靜態網站內容</li>
<li>利用 chmod u+x acp 讓 user 可以執行 acp script </li>
<li>最後利用 Shell, 以 <span style="background-color: #ffff99;">./acp "輸入提交註記說明字串"</span> 完成 git add, git commit -m 與 git push, 將動態與靜態網站內容送到對應的倉儲中</li>
<li>由於目前 Codespaces 只允許免費帳號每月使用 120 core hours, 若採 2 cores 機器, 每月僅能使用 60 小時.</li>
<li>登入 Github 後, 可至 <a href="https://github.com/settings/billing/summary">https://github.com/settings/billing/summary</a> 頁面中的 Codespaces 查核已經使用的 Usage hours.</li>
</ol>
<p>main.py:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from cmsimde import flaskapp
from gevent.pywsgi import WSGIServer

#flaskapp.app.run(host="0.0.0.0", debug=True)
http_server = WSGIServer(('0.0.0.0', 8080), flaskapp.app)
http_server.serve_forever()</pre>
<p>main2.py:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Run static server
import static
from gevent.pywsgi import WSGIServer

http_server = WSGIServer(('0.0.0.0', 8081), static.app)
http_server.serve_forever()</pre>
<p>以及與 main2.py 結合使用的 static.py:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, send_from_directory

app = Flask(__name__)

# Route to serve the index.html file
@app.route('/')
def index():
    return send_from_directory('.', 'index.html')

# Route to serve static files from the ./cmsimde/static directory
@app.route('/cmsimde/static/&lt;path:filename&gt;')
def serve_static(filename):
    return send_from_directory('cmsimde/static', filename)

# Route to serve other HTML files from the root directory
@app.route('/&lt;path:filename&gt;')
def serve_html(filename):
    return send_from_directory('.', filename)

if __name__ == '__main__':
    app.run(debug=True)
</pre>
<p></p>
<h1>Topics</h1>
<p>HW Template:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecad2024/hw-mdecycu">https://github.com/mdecad2024/hw-mdecycu</a></p>
<p style="padding-left: 30px;"><a href="https://mdecad2024.github.io/hw-mdecycu">https://mdecad2024.github.io/hw-mdecycu</a></p>
<hr/>
<p>Topic 1:<span> </span><span>基於瀏覽器的分散式版次管理與整合程式開發環境 (複習)</span></p>
<p style="padding-left: 30px;"><span><img alt="" height="467" src="/images/github_multi_site_version_control.png" width="400"/></span></p>
<p style="padding-left: 30px;"><span><a href="/downloads/github_multi_site_version_control_dia.7z">github_multi_site_version_control_dia.7z</a></span></p>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/NX2312_CAD.7z">下載</a> NX2312 可攜 CAD 壓縮檔案 (1.85 GB, 解開後約 9 GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/nx2312_Drafting.7z">nx2312_Drafting.7z</a></p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/nx2312_nxplot.7z">nx2312_nxplot.7z</a></p>
<p style="padding-left: 30px;">What are Github and Codespace?</p>
<p style="padding-left: 30px;">以下兩個影片說明如何利用 Codespaces 維護個人的作業倉儲:</p>
<p style="padding-left: 30px;">Codespaces 維護作業倉儲教學片一:</p>
<p style="padding-left: 30px;"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/zRcEB9ac5hk?si=y6uTZhoL1T48_R4e" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;">Codespaces 維護作業倉儲教學影片二:</p>
<p style="padding-left: 30px;"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/a0u8eD3GWAc?si=5CUlpQoTu8TGLW8b" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;">以下兩個影片說明如何利用可攜程式環境在近端電腦維護作業倉儲內容:</p>
<p style="padding-left: 30px;">Localhost 維護作業倉儲教學影片一:</p>
<p style="padding-left: 30px;"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/P6EQkLQ5nhw?si=qJqCrjDAbHNrC2SA" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;">Localhost 維護作業倉儲教學影片二:</p>
<p style="padding-left: 30px;"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/gZMqQMMXEfc?si=EZSYz-lAQ8pCeGbF" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p>Topic 2:<span> </span><span>計算機程式課程作業與學員網頁 (複習)</span></p>
<p style="padding-left: 30px;">What is Github Classroom?</p>
<p style="padding-left: 30px;"><a href="https://classroom.github.com/">GitHub Classroom</a></p>
<p style="padding-left: 30px;">2020.04 轉為封閉源之前的 <a href="https://github.com/github-education-resources/classroom">Github Classroom 原始碼</a></p>
<p style="padding-left: 30px;">Your repository and Web site</p>
<p>Topic 3: 利用 CAD 套件建立零組件 (<a href="https://mde.tw/cad2024/content/Parts.html">零件</a>, <a href="https://mde.tw/cad2024/content/Quadruped.html">組立件</a>)</p>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">Solvespace</a> 建立機械系統的零組件</p>
<p style="padding-left: 60px;"><a href="https://www.bing.com/videos/search?q=solvespace+tutorial">Solvespace Tutorial</a></p>
<p style="padding-left: 60px;"><a href="https://readthedocs.org/projects/solvespace/downloads/pdf/latest/">Document</a> (<a href="https://solvespace.readthedocs.io/en/latest/">link</a>)</p>
<p style="padding-left: 60px;"><a href="https://solvespace.com/2d.pl">2D Sketch</a>, <a href="https://solvespace.github.io/solvespace-web/constraints.html">constraints</a>, <a href="https://solvespace.github.io/solvespace-web/box.html">assembly</a></p>
<p style="padding-left: 60px;"><a href="https://thenybble.de/posts/solvespace-mini-tutorial/">mini Tutorial</a></p>
<p style="padding-left: 60px;"><a href="https://www.farwire.net/SolveSpace-LearningGuide.htm">Learning Guide</a></p>
<p style="padding-left: 60px;"><a href="https://www.youtube.com/watch?v=88Fo7jMrLyg">Drawing Tutorial</a></p>
<p style="padding-left: 30px;">如何從 Solvespace 繪製零件轉入 CoppeliaSim:</p>
<p style="padding-left: 30px;"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/QGs0UrIWUJA?si=by9z5Lfs6ebBADpQ" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">Solvespace</a><span> 進行單一輸入的平面機構模擬</span></p>
<p style="padding-left: 30px;">利用 <a href="https://plm.sw.siemens.com/en-US/nx/">Siemens NX</a> 建立機械系統的零組件 (<a href="https://assets.ctfassets.net/17si5cpawjzf/6QaZiAOkbt2rEFuUCuTyzb/a2b9445f9c6de6436a54cec5010925c3/Siemens-SW-NX-CAD-buyers-guide-EB-85683-D9.pdf">NX CAD Buyer's Guide</a>, <span>2024 </span><a href="https://www.engineering.com/siemens-announces-nx-x/">Siemens 推出 NX X</a>, <a href="https://static.sw.cdn.siemens.com/siemens-disw-assets/public/1NWyBXoxq3P6qAbN8zk9nU/en-US/Siemens_SW_NX_X_design_solutions_Fact_Sheet.pdf">Fact Sheet</a>, Why?)</p>
<p style="padding-left: 60px;">“NX X enables our customers to move to a cloud-based, collaborative engineering environment. Our solution allows them to retain their intellectual property and continue their innovative work, without disruption; no need to reinvent their working practices,” said <a href="https://www.sw.siemens.com/en-US/leadership/technology-leadership/bob-haubrock/">Bob Haubrock</a>, senior vice president, Product Engineering Software, Siemens Digital Industries Software.</p>
<p><a href="https://www.swooshtech.com/2023/01/05/nx-x-a-cloud-based-3d-cad-saas-solution/">https://www.swooshtech.com/2023/01/05/nx-x-a-cloud-based-3d-cad-saas-solution/</a></p>
<p><a href="http://229.cycu.org/nx2306_tutorial_video.7z">NX Tutorial</a></p>
<p><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p><a href="/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/UDuh-ehRHOY?si=5_qVCyBh-vokXcTf" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/aC_WDD2_E3o?si=KT6GlN0l2EFs-GsJ" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;">Homework 1 (10%):</p>
<p style="padding-left: 60px;">利用 Solvespace 與 NX2312 建立 <a href="https://mde.tw/cad2024/content/Parts.html">Parts</a> 頁面中的零件</p>
<p style="padding-left: 60px;">其他<a href="http://229.cycu.org/part_modeling_projects.pdf">零件模擬練習</a></p>
<p style="padding-left: 30px;">Homework 2 (10%):</p>
<p style="padding-left: 60px;">利用 Solvespace 與 NX2312 建立 <a href="https://mde.tw/cad2024/content/BonW.html">Balance on Wheels</a> 組立件</p>
<p>Topic 4: 機電整合系統模擬與控制</p>
<p style="padding-left: 30px;">利用<span> </span><a href="https://www.coppeliarobotics.com/">CoppeliaSim</a><span> </span>建立機電模擬系統</p>
<p style="padding-left: 30px;">利用<span> </span><a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a><span> </span>跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">Homework 3 (20%):</p>
<p style="padding-left: 60px;">建立 <a href="https://mde.tw/cad2024/content/BonW.html">Balance on Wheels</a> 控制系統設計模擬場景</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecycu/Balance_On_Wheels">https://github.com/mdecycu/Balance_On_Wheels</a></p>
<p style="padding-left: 60px;"><img alt="" height="217" src="https://mde.tw/cad2024/images/balance_on_wheels.png" width="400"/></p>
<p style="padding-left: 60px;"><img alt="" height="217" src="/images/Balance_on_wheels_scene.png" width="400"/></p>
<p style="padding-left: 60px;"><a href="/downloads/Balance_on_wheels_nx2312.7z">Balance_on_wheels_nx2312.7z</a></p>
<p style="padding-left: 60px;"><a href="/downloads/Balance_on_Wheel_scene.7z">Balance_on_Wheel_scene.7z</a></p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/2019_Control_and_balancing_of_a_small_vehicle_with_two_wheels_for_autonomous_driving.pdf">2019_Control_and_balancing_of_a_small_vehicle_with_two_wheels_for_autonomous_driving.pdf</a> (<a href="https://www.diva-portal.org/smash/get/diva2:1380196/FULLTEXT01.pdf">source</a>)</p>
<p style="padding-left: 60px;"><a href="https://www.google.com/search?q=balance+on+wheels+thesis|2019..2024">其他參考資料</a></p>
<p style="padding-left: 30px;">Homework 4 (20%):</p>
<p style="padding-left: 60px;">建立 <a href="https://mde.tw/cad2024/content/Quadruped.html">Dingo 機器狗</a>控制系統設計模擬場景</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecycu/DingoQuadruped">https://github.com/mdecycu/DingoQuadruped</a></p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/DINGO_QUADRUPED_CAD.7z">DINGO_QUADRUPED_CAD.7z</a></p>
<p style="padding-left: 60px;"><img alt="" height="217" src="https://mde.tw/cad2024/images/dingo.png" width="400"/></p>
<h2>Topic 1</h2>
<p><span>主題: </span><span>基於瀏覽器的分散式版次管理與整合程式開發環境 (複習)</span></p>
<p><span>主題摘要:</span></p>
<p style="padding-left: 30px;">USB 隨身碟 (可配置在自己的電腦):</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/NX2312_CAD.7z">下載</a> NX2312 可攜 CAD 壓縮檔案 (1.85 GB, 解開後約 9 GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/nx2312_Drafting.7z">nx2312_Drafting.7z</a></p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/nx2312_nxplot.7z">nx2312_nxplot.7z</a></p>
<p style="padding-left: 30px;">使用電腦教室中的電腦:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 60px;">使用電腦所安裝的 NX2312</p>
<hr/>
<p><a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> 與<a href="http://229.cycu.org/NX2312_CAD.7z">可攜 NX2312 CAD</a> 可以直接放在 USB 3.0 格式以上的 USB 隨身碟中, 並在任何 Windows 64 位元以上電腦中使用.</p>
<p>解開 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> 壓縮檔案後, 可將<a href="http://229.cycu.org/NX2312_CAD.7z">可攜 NX2312 CAD</a> 檔案放入 data 目錄中的 nx 子目錄中, 以 start_ipv6.bat 啟動可攜程式系統後, 若在 IPv4 環境, 可在命令提示字元視窗中執行:</p>
<p>set SPLM_LICENSE_SERVER=29000@認證主機_IPv4_位址, 然後執行 ugraf -nx 開啟 NX2312</p>
<p>若在 IPv6 環境, 可在命令提示字元視窗中執行:</p>
<p>set SPLM_LICENSE_SERVER=29000@[認證主機_IPv6_位址], 然後執行 ugraf -nx 開啟 NX2312</p>
<p>若要使用 Jupyterlab 協同執行環境, 可在命令提示字元視窗中執行:</p>
<p>jupyter lab --collaborative</p>
<p>之後便可在瀏覽器中開啟 localhost 中的 jupyterlab 執行環境.</p>
<p>若要讓其他用戶透過瀏覽器連接至 jupyterlab 協同環境, 可修改 home_ipv6\.jupyter\jupyter_server_config.py 檔案中的 c.ServerApp.ip 變數, 改為電腦網路 IPv4 或 IPv6 位址後, 重新執行:</p>
<p>jupyter lab --collaborative</p>
<hr/>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 30px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p>Demo:</p>
<p style="padding-left: 30px;">在 stud.cycu (Linux) 伺服器安裝 Jupyter Notebook:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pip3 install jupyter
sudo apt install jupyter-notebook
# 建立 ./jupyter/jupyter_notebook_config.py
jupyter notebook --generate-config
# 設法修改 .jupyter/jupyter_notebook_config.py 中的 c.ServerApp.ip 與 c.ServerApp.port
# 若使用 IPv6, 設定 c.ServerApp.ip = '2001:288:6004:XX::1'
# 以 jupyter notebook list 取得登入 token, 並據以改變登入密碼
# 啟動 jupyter notebook
jupyter-notebook
</pre>
<p style="padding-left: 30px;">在 Windows 安裝 Jupyter Notebook:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pip install jupyter
# 建立 home_ipv4/.jupyter/jupyter_notebook_config.py
jupyter notebook --generate-config
# 設法修改 .jupyter/jupyter_notebook_config.py 中的 c.ServerApp.ip 與 c.ServerApp.port
# 若使用 IPv6, 設定 c.ServerApp.ip = '2001:288:6004:XX::1'
# 以 jupyter server list 取得登入 token, 並據以改變登入密碼
# 啟動 jupyter notebook
jupyter notebook</pre>
<p style="padding-left: 30px;">完成設定後, 多名系統設計者可以利用瀏覽器連接 Jupyter Notebook, 編寫 ZMQ Remote API Python 程式, 控制位於 CoppeliaSim server 上的機電系統, 並透過瀏覽器觀測控制結果.</p>
<p>Jupyter server:</p>
<p style="padding-left: 30px;">pip install jupyter-server</p>
<p style="padding-left: 30px;">jupyter server --generate-config</p>
<p style="padding-left: 30px;">pip install jupyter-collaboration</p>
<p style="padding-left: 30px;">jupyter lab --collaborative</p>
<p style="padding-left: 30px;">針對 cp2024.ipynb 進行 <a href="https://datasciencenotebook.org/jupyter-realtime-collaboration">realtime 協同編輯</a></p>
<p style="padding-left: 30px;">http://[2001:288:6004:xx::1]:8888/lab/workspaces/auto-v/tree/RTC%3Acp2024.ipynb</p>
<p style="padding-left: 30px;"><a href="https://colab.research.google.com/">https://colab.research.google.com/</a> </p>
<p style="padding-left: 30px;"><a href="https://deepnote.com/pricing">https://deepnote.com/pricing</a> </p>
<p><a href="https://jupyterhub.readthedocs.io">https://jupyterhub.readthedocs.io</a> </p>
<p>Use <a href="https://www.stunnel.org/">Stunnel</a> to serve jupyter notebook or jupyter lab under https or just setup under <a href="https://mde.tw/cad2024/content/Jupyter.html">Jupyter</a>:</p>
<p>Use openssl.exe to generate self-signed key.pem and cert.pem:</p>
<p>openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem</p>
<p>stunnel.conf:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[https]
accept = [2001:288:6004:XX::1]:443
connect = [2001:288:6004:XX::1]:8888
cert = cert.pem
key = key.pem
TIMEOUTclose = 0</pre>
<p>利用系統管理員身分執行批次檔案指令, 設定防火牆允許 TCP 封包對 CoppeliaSim zmq server 連線 (in 權限開啟 23000-23050):</p>
<p><a href="/downloads/allow_23000-23050_tcp_in_firewall_setting.7z">allow_23000-23050_tcp_in_firewall_setting.7z</a></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">echo off
REM netsh advfirewall firewall add rule name="RULENAME" dir=[in/out] action=[allow/block/bypass] protocol=[tcp/udp] localip=[any] remoteip=[any]
REM allow tcp in for port 23000-23050
netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050
netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050</pre>
<h2>上課內容</h2>
<p><span>利用靜態認證檔案, 加快作業網站編輯流程:</span></p>
<p><span>第一步: 使用可攜程式環境在cmd 中執行下列指令:</span></p>
<p style="padding-left: 30px;"><span>openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem</span></p>
<p><span>第二步: 將 key.pem 與 cert.pem 放入作業倉儲根目錄</span></p>
<p><span>第三步: 修改作業倉儲中的 cmsimde/wsgi.py</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">if uwsgi:
    # run on remote site
    application = flaskapp.app
else:
    # on localhost, on Linux or Mac need to use python3 wsgi.py to execute
    #flaskapp.app.run(host=ip, port=port, debug=True, ssl_context="adhoc")
    flaskapp.app.run(host=ip, port=port, debug=True, ssl_context=('cert.pem', 'key.pem'))</pre>
<p><span>結果: 當啟動作業網站編輯時, 可以直接取用 key.pem 與 cert.pem, 而不需要每次連至各頁面時動態產生 https 所需的認證檔案.</span></p>
<hr/>
<p>2a w1 有關 Codespaces 應用:</p>
<p>demo 倉儲: <a href="https://github.com/mdecad2024/hw-mdecycu">https://github.com/mdecad2024/hw-mdecycu</a></p>
<p>維護作業倉儲的兩種方法:</p>
<p>1. 使用 Codespaces, 開啟、關閉或刪除虛擬程式環境: <a href="https://github.com/codespaces">https://github.com/codespaces</a> </p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/zRcEB9ac5hk?si=TCRHJZ01IOZl0wAg" title="YouTube video player" width="560"></iframe></p>
<p>2. 使用可攜程式環境: <span>下載 </span><a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a><span> (428 MB, 解開壓縮後約 1.5 GB)</span></p>
<p><span>w2 採 hybrid (複合式, 只將必要的倉儲與設定檔案放在 USB, 執行時使用 C:\ 中的檔案) 自動下載可攜並解開到固態硬碟的兩個批次檔案: <a href="/downloads/cad2024_w2_hybrid_download_and_start_batch.7z">cad2024_w2_hybrid_download_and_start_batch.7z</a></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/P6EQkLQ5nhw?si=CGEA7uvdCQOiCp4B" title="YouTube video player" width="560"></iframe></p>
<p>請下週記得帶來:</p>
<p style="padding-left: 30px;">耳機</p>
<p style="padding-left: 30px;">隨身碟 (USB 3.0, 32 GB 以上)</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/NX2312_CAD.7z">下載</a> NX2312 可攜 CAD 壓縮檔案 (1.85 GB, 解開後約 9 GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/nx2312_Drafting.7z">nx2312_Drafting.7z</a></p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/nx2312_nxplot.7z">nx2312_nxplot.7z</a></p>
<p style="padding-left: 60px;">NX2312 解開壓縮後, 將 NX2312_CAD 目錄名稱改為 nx 後, 放入可攜程式系統的 data 目錄中</p>
<hr/>
<p>利用 Codespaces 維護作業網站:</p>
<p>2b w1 1-1 影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/a0u8eD3GWAc?si=cGspxZCEco5oJ6FM" title="YouTube video player" width="560"></iframe></p>
<p>利用可攜程式環境維護作業網站:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/gZMqQMMXEfc?si=JxAGIYFLrnzpjbRD" title="YouTube video player" width="560"></iframe></p>
<p>2B W2</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ch-8SmYxuAY?si=1DWzcjQ7_Niw1N-y" title="YouTube video player" width="560"></iframe></p>
<p>NX2312 啟動設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">REM for NX2312, must after path setup 
set SPLM_LICENSE_SERVER=29000@認證主機
set UGII_LANG=english
set UGS_LICENSE_BUNDLE=ACD11,ACD10
set UGII_BASE_DIR=%Disk%:\NX\
set UGII_TMP_DIR=%Disk%:\NX\temp
set UGII_LIB_PATH=%Disk%:\NX\NXBIN\python
set ugii=%Disk%:\NX\ugii;%Disk%:\NX\nxbin;
path = %ugii%;%path%
Xcopy %Disk%:\home_ipv6\AppData\Local\Siemens\NX2312 C:\users\%USERNAME%\AppData\Local\Siemens\NX2312 /E /H /C /I /Y

REM 決定是否開啟 nx GUI 介面
REM start ugraf -nx

REM 以下指令可以直接呼叫 NXOpen Python 程式進行繪圖組立與其他相關流程
python %Disk%:\tmp\nx_ex\new_part.py</pre>
<h3>Seat</h3>
<p>2a <a href="https://mde.tw/cad2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/4ed15bcc8ec61a971558f00ee95b6d686739b4ba/cad2024_2a_group1_brython.py">座位表1</a>, <a href="https://mde.tw/cad2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/4ed15bcc8ec61a971558f00ee95b6d686739b4ba/cad2024_2a_group2_brython.py">分組座位表</a></p>
<p>電腦輔助設計與實習 2a 座位表:</p>
<p><img alt="" height="289" src="/images/cad2024_2a_seat_table.png" width="800"/></p>
<p>2b <a href="https://mde.tw/cad2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/4ed15bcc8ec61a971558f00ee95b6d686739b4ba/cad2024_2b_group1_brython.py">座位表1</a>, <a href="https://mde.tw/cad2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/4ed15bcc8ec61a971558f00ee95b6d686739b4ba/cad2024_2b_group2_brython.py">分組座位表</a></p>
<p>電腦輔助設計與實習 2b 座位表:</p>
<p><img alt="" height="294" src="/images/cad2024_2b_seat_table.png" width="800"/></p>
<hr/>
<p>上述程式透過與 claude.ai 進行以下對話後產生：</p>
<p>問題: <br/><br/>https://mde.tw/2024/1a.txt 為一行學員的學號資料, 請用 Brython open().read() 讀取後, 利用 Canvas 在 id 為 brython_div 的超文件位置上, 採由上而下, 由右而左的次序, 用每一個學員除畫出學號外, 還加上外方框線, 且每一列共列出 9 位學員, 畫完後,以print() 印出 "done"<br/><br/>問: 怎麼只列出一位學員? (因為 AI 沒有用跳行隔開學員學號, 而是用 "," 隔開資料)<br/><br/>說明: 因為 AI 沒能正確解讀資料, 因此提供資料格式供其參考:<br/><br/>問: <br/><br/>40831154<br/>40932134<br/>41023249<br/>41031136<br/>41036112 這是前面五行資料, 請修改程式<br/><br/>說明: 接下來 AI 已經能夠正確解讀資料, 但因為提供錯誤的 html id 字串因此產生下列錯誤,<br/><br/>File "&lt;string&gt;", line 8, in draw_students<br/>KeyError: brython_div<br/><br/>問: id 為 brython_div1, x 方向的框寬可以小一點, 否則最左邊顯示不出來<br/><br/>說明: 這時 AI 已經正確完成任務 (也就是修正各學員外框寬度後, 存為 group1), 但因所選的外框太寬, 因此最左邊的學號沒有完全顯示出來, 要求針對這個問題進行處理<br/><br/>問: 可不可以從最右邊開始, 第一列前三個與第二列前三個學員為同一組, 其框內背景請塗上同一個淡顏色辨識, 若至最後一列, 並沒有前三與後三作為同一組, 請就剩下的組員若少於 6 名則設為同一組, 若大於 6 則儘量平均方為兩組.<br/><br/>問: 是原則上同一列三位與下一列對齊的三位為同一組<br/><br/>問: 每一列不是有 9 位學員, 第二列也是有 9 位學員, 第一列的前三個學員與第二列的前三位為同一組, 接下來則是第一列的第 4, 5,6 位學員與第二列的第 4,5,6 位學員則也是同一組, 然後剩下的學員依照這個次序分組, 同一組的塗上相同的背景顏色. 最後因為可能剩下一個列的組員, 因此沒有辦法與下一列的組員進行分組, 因此只能就同一列每六位學員一組, 但若只剩下假設 9 位, 則一組 5 位同學,另一組 4 位, 表示一組至少要有 4 位學員的意思.<br/><br/>問: 原先的學員位置弄亂了, 目前第一列至第六列,只有從右邊算來前 6 位學員進行分組塗色, 各列 7,8,9 並沒有進行分組塗色<br/><br/>說明: 結果 AI 完成 group2 Brython 程式的編寫</p>
<h3>Vocabulary</h3>
<p>這裡將要利用 Python 程式, 從電子書: <a href="http://229.cycu.org/Intro_to_Mechatronics.pdf">Intro_to_Mechatronics.pdf</a> 與 <a href="https://link.springer.com/book/10.1007/978-3-031-57148-0">Programming with Python for Engineers</a>, 擷取出英文單字, 並建立查詢中英文字典的網頁.</p>
<p>所使用的 Python 模組為 <a href="https://github.com/deanmalmgren/textract">textract</a> 結合 <a href="https://github.com/oschwartz10612/poppler-windows/releases">poppler</a> 中的 pdftotext.exe 工具, 先利用 <a href="/downloads/extract_text_from_pdf.txt">extract_text_from_pdf.txt</a> 將電子書的內容取出後, 再利用 <a href="/downloads/check_vocabulary_from_cdit_net.txt">check_vocabulary_from_cdit_net.txt</a> 建立單字查詢超文件:</p>
<p><a href="http://229.cycu.org/Intro_to_Mechatronics.pdf">Intro_to_Mechatronics.pdf</a>: 英文單字查詢 <a href="/downloads/words_Intro_to_Mechatronics.html">words_Intro_to_Mechatronics.html</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-3-031-57148-0">Programming with Python for Engineers</a>: 英文單字查詢 <a href="/downloads/words_programming_with_python_for_engineers.html">words_programming_with_python_for_engineers.html</a></p>
<p><a href="https://ieeexplore.ieee.org/document/299539">ref1</a>: 英文單字查詢 <a href="/downloads/words_mech_what.html">words_mech_what.html</a></p>
<p>由於可攜程式套件 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> 中的 pip 版本高於 24.1, 導致無法正常安裝 <a href="https://github.com/deanmalmgren/textract">textract</a> 模組, 因此利用:  </p>
<p>python get-pip.py pip==21.1.2</p>
<p>將 pip 版本退至 21.1.2 後, 利用 pip install textract, 然後下載 <a href="https://github.com/oschwartz10612/poppler-windows/releases">poppler</a> 工具, 讓 pdftotext.exe 可以在可攜程式c環境的 path 中執行.</p>
<p></p>
<h2>Topic 2</h2>
<p>主題:<span> </span><span>計算機程式課程作業與學員網頁 (複習)</span></p>
<p style="padding-left: 30px;">What is Github Classroom?</p>
<p style="padding-left: 30px;"><a href="https://classroom.github.com/">GitHub Classroom</a></p>
<p style="padding-left: 30px;">Your repository and Web site</p>
<p>Demo: 指定 Github Classroom cad2024 上的個人專案作業倉儲</p>
<p>作業倉儲與作業網站連結:</p>
<p><a href="https://mde.tw/cad2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/9e4dbdee95789dae01dd553c786d69b50012bfa7/2a_w3_site_repo_brython.py">2a site and repo</a></p>
<h2>Topic 3</h2>
<p>主題: 利用 CAD 套件建立零組件 (<a href="https://mde.tw/cad2024/content/Parts.html">零件</a>, <a href="https://mde.tw/cad2024/content/Quadruped.html">組立件</a>)</p>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">Solvespace</a> 建立機械系統的零組件</p>
<p style="padding-left: 30px;"><a href="https://support.industrysoftware.automation.siemens.com/training/se/en/ST3/pdf/spse01550.pdf">https://support.industrysoftware.automation.siemens.com/training/se/en/ST3/pdf/spse01550.pdf</a>  (零件繪圖練習只要畫到 page 32)</p>
<p style="padding-left: 30px;"><a href="/downloads/cad2024_practice_9_page_32.pdf">cad2024_practice_9_page_32.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://www.bing.com/videos/search?q=solvespace+tutorial">Solvespace Tutorial</a></p>
<p style="padding-left: 60px;"><a href="https://readthedocs.org/projects/solvespace/downloads/pdf/latest/">Document</a> (<a href="https://solvespace.readthedocs.io/en/latest/">link</a>)</p>
<p style="padding-left: 60px;"><a href="https://solvespace.com/2d.pl">2D Sketch</a>, <a href="https://solvespace.github.io/solvespace-web/constraints.html">constraints</a>, <a href="https://solvespace.github.io/solvespace-web/box.html">assembly</a></p>
<p style="padding-left: 60px;"><a href="https://thenybble.de/posts/solvespace-mini-tutorial/">mini Tutorial</a></p>
<p style="padding-left: 60px;"><a href="https://www.farwire.net/SolveSpace-LearningGuide.htm">Learning Guide</a></p>
<p style="padding-left: 60px;"><a href="https://www.youtube.com/watch?v=88Fo7jMrLyg">Drawing Tutorial</a></p>
<p style="padding-left: 30px;">說明如何利用 Solvespace 建立零件後 import 進入 CoppeliaSim 場景:</p>
<p style="padding-left: 30px;"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/QGs0UrIWUJA?si=by9z5Lfs6ebBADpQ" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;">Demo 如何利用 ShareX 與 Zoomit 進行操作畫面錄影:</p>
<p style="padding-left: 30px;"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/liTQmDQGkvg?si=0SKgR_g8xUzGaSMS" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">Solvespace</a><span> 進行單一輸入的平面機構模擬</span></p>
<hr/>
<p dir="auto" style="padding-left: 30px;">利用 Siemens NX2312 繪製零組件:</p>
<p dir="auto" style="padding-left: 30px;"><a href="https://community.sw.siemens.com/s/question/0D54O00006VLlp9SAD/where-can-i-find-i-find-more-details-on-the-nx-student-license-and-its-restrictions" rel="nofollow">https://community.sw.siemens.com/s/question/0D54O00006VLlp9SAD/where-can-i-find-i-find-more-details-on-the-nx-student-license-and-its-restrictions</a> (<a href="https://trials.sw.siemens.com/en-US/trials/nx-cad-cam-student-edition">NX CAD/CAM Student Edition</a>)</p>
<p dir="auto" style="padding-left: 30px;"><a href="https://learnnx.com/" rel="nofollow">https://learnnx.com/</a></p>
<p dir="auto" style="padding-left: 30px;"><a href="https://support.industrysoftware.automation.siemens.com/training/se/en/ST3/pdf/spse01550.pdf">https://support.industrysoftware.automation.siemens.com/training/se/en/ST3/pdf/spse01550.pdf</a>  (零件繪圖練習只要畫到 page 32)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/NX2312_CAD.7z">下載</a> NX2312 可攜 CAD 壓縮檔案 (1.85 GB, 解開後約 9 GB)</p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/nx2312_Drafting.7z">nx2312_Drafting.7z</a></p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/nx2312_nxplot.7z">nx2312_nxplot.7z</a></p>
<p style="padding-left: 60px;"><a href="/downloads/NX_user_dpv.txt">NX_user.dpv</a> 位於可攜程式系統中的 home_ipv6\AppData\Local\Siemens\NX2312 目錄.</p>
<p style="padding-left: 60px;">dpv - default preferences values (預設偏好設定)</p>
<p style="padding-left: 60px;">啟動 NX2312 環境變數設置:</p>
<p style="padding-left: 90px;">UGII_LOCAL_USER_DEFAULTS="Y:\home_ipv6\AppData\Local\Siemens\NX2312\NX_user.dpv"</p>
<hr/>
<p style="padding-left: 30px;">利用 <a href="https://plm.sw.siemens.com/en-US/nx/">Siemens NX</a> 建立機械系統的零組件 (<a href="https://assets.ctfassets.net/17si5cpawjzf/6QaZiAOkbt2rEFuUCuTyzb/a2b9445f9c6de6436a54cec5010925c3/Siemens-SW-NX-CAD-buyers-guide-EB-85683-D9.pdf">NX CAD Buyer's Guide</a>, <span>2024 </span><a href="https://www.engineering.com/siemens-announces-nx-x/">Siemens 推出 NX X</a>, <a href="https://static.sw.cdn.siemens.com/siemens-disw-assets/public/1NWyBXoxq3P6qAbN8zk9nU/en-US/Siemens_SW_NX_X_design_solutions_Fact_Sheet.pdf">Fact Sheet</a>, Why?)</p>
<p style="padding-left: 60px;">“NX X enables our customers to move to a cloud-based, collaborative engineering environment. Our solution allows them to retain their intellectual property and continue their innovative work, without disruption; no need to reinvent their working practices,” said <a href="https://www.sw.siemens.com/en-US/leadership/technology-leadership/bob-haubrock/">Bob Haubrock</a>, senior vice president, Product Engineering Software, Siemens Digital Industries Software.</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/nx2306_tutorial_video.7z">NX Tutorial</a></p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p style="padding-left: 30px;">Homework 1:</p>
<p style="padding-left: 60px;">利用 Solvespace 與 NX2312 建立 <a href="https://mde.tw/cad2024/content/Parts.html">Parts</a> 頁面中的零件</p>
<p style="padding-left: 60px;">其他<a href="http://229.cycu.org/part_modeling_projects.pdf">零件模擬練習</a></p>
<p style="padding-left: 30px;">Homework 2:</p>
<p style="padding-left: 60px;">利用 Solvespace 與 NX2312 建立 <a href="https://mde.tw/cad2024/content/BonW.html">Balance on Wheels</a> 組立件</p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/2019_Control_and_balancing_of_a_small_vehicle_with_two_wheels_for_autonomous_driving.pdf">2019_Control_and_balancing_of_a_small_vehicle_with_two_wheels_for_autonomous_driving.pdf</a> (<a href="https://www.diva-portal.org/smash/get/diva2:1380196/FULLTEXT01.pdf">source</a>)</p>
<p style="padding-left: 60px;"><a href="https://www.google.com/search?q=balance+on+wheels+thesis|2019..2024">其他參考資料</a></p>
<h3>lessons</h3>
<p><a href="https://support.industrysoftware.automation.siemens.com/training/se/en/ST3/pdf/spse01550.pdf">https://support.industrysoftware.automation.siemens.com/training/se/en/ST3/pdf/spse01550.pdf</a>  (零件繪圖練習只要畫到 page 32)</p>
<p>lesson 2: </p>
<p>直接將 STL 零件嵌入頁面:</p>
<p><a href="/downloads/embed_stl_into_page_html.txt">embed_stl_into_page_html.txt</a></p>
<p><a href="/downloads/embed_multiple_stl_into_page_html.txt">embed_multiple_stl_into_page_html.txt</a></p>
<p>solvespace: <a href="https://s104.cycu.org/~scrum1/cad2024_part_ex1_solvespace.slvs">cad2024_part_ex1_solvespace.slvs</a></p>
<p>
<script src="/static/jsc3d.js" type="text/javascript"></script>
</p>
<p><canvas height="300" id="cv1" style="border: 1px solid;" width="400"></canvas></p>
<p>solvespace: <a href="https://s104.cycu.org/~scrum1/lesson2.slvs">lesson2.slvs</a></p>
<p><canvas height="300" id="cv2" style="border: 1px solid;" width="400"></canvas></p>
<p><a href="/downloads/page_27_solvespace.7z">page_27_solvespace.7z</a></p>
<p><canvas height="300" id="cv3" style="border: 1px solid;" width="400"></canvas></p>
<p><a href="/downloads/page16.7z">page16.7z</a></p>
<p><canvas height="300" id="cv4" style="border: 1px solid;" width="400"></canvas></p>
<div style="width: 400px; height: 70px; border: 1px solid;">Model Color:<input id="mdlClr" onchange="changeOption('ModelColor',this.value)" style="margin-right: 50px;" type="color" value="#00ff40"/> Back Color1:<input id="bckClr1" onchange="changeOption('BackgroundColor1',this.value)" style="margin-right: 50px;" type="color"/> Back Color2:<input id="bckClr2" onchange="changeOption('BackgroundColor2',this.value)" type="color"/><br/> Render Mode:<select id="render" onchange="changeOption('RenderMode',this.value)">
<option>Flat</option>
<option>Point</option>
<option>Wireframe</option>
<option>Smooth</option>
</select>Definition:<select id="defini" onchange="changeOption('Definition',this.value)">
<option>Standard</option>
<option>low</option>
<option>high</option>
</select></div>
<p>
<script type="text/javascript">
var viewers = [];

function getOptions(){
    var mc = document.getElementById("mdlClr").value;
    var bc1 = document.getElementById("bckClr1").value;
    var bc2 = document.getElementById("bckClr2").value;
    var ren = document.getElementById("render").value;
    var def = document.getElementById("defini").value;
    return {ModelColor: mc, BackgroundColor1: bc1, BackgroundColor2: bc2, RenderMode: ren, Definition: def};
}

function readSTLfile(opt, canvasId){
    var canvas = document.getElementById(canvasId);
    var viewer = new JSC3D.Viewer(canvas);
    viewer.setParameter('SceneUrl', opt.SceneUrl);
    viewer.setParameter('InitRotationX', 0);
    viewer.setParameter('InitRotationY', 0);
    viewer.setParameter('InitRotationZ', 0);
    viewer.setParameter('ModelColor', opt.ModelColor);
    viewer.setParameter('BackgroundColor1', opt.BackgroundColor1);
    viewer.setParameter('BackgroundColor2', opt.BackgroundColor2);
    viewer.setParameter('RenderMode', opt.RenderMode);
    viewer.setParameter('Definition', opt.Definition);
    viewer.init();
    viewer.update();
    viewers.push(viewer); // 保存 viewer 實例
}

function changeOption(strOpt,strValue){
    console.log("change " + strOpt + " to " + strValue);
    viewers.forEach(viewer => {
        viewer.setParameter(strOpt, strValue);
        viewer.init();
        viewer.update();
    });
}

function openByUrl(){
    var url = document.getElementById("url").value;
    var opt = getOptions();
    opt.SceneUrl = url;
    // 可以添加更多的 STL URL
    readSTLfile(opt, 'cv1'); // 為每個 canvas 調用
    readSTLfile(opt, 'cv2'); // 第二個 canvas
    readSTLfile(opt, 'cv3'); // 第二個 canvas
    readSTLfile(opt, 'cv4'); // 第二個 canvas
}

function openByGet(){
    var urls = [
        "https://s104.cycu.org/~pj2023/cad2024_part_ex1_solvespace.stl",
        "https://s104.cycu.org/~scrum1/lesson2.stl",
        "https://s104.cycu.org/~scrum1/page_27.stl",
        "https://s104.cycu.org/~scrum1/page16_final.stl"
    ];
    var opt = getOptions();
    urls.forEach((url, index) => {
        opt.SceneUrl = url;
        readSTLfile(opt, 'cv' + (index + 1)); // 動態生成 canvas ID
    });
}

openByGet();
</script>
</p>
<h3>STL</h3>
<p>multiple stl files shown on one page:</p>
<p><a href="/downloads/embed_multiple_stl_into_page_html.txt">embed_multiple_stl_into_page_html.txt</a></p>
<p>
<script src="/static/jsc3d.js" type="text/javascript"></script>
</p>
<p><canvas height="300" id="cv1" style="border: 1px solid;" width="400"></canvas></p>
<p><canvas height="300" id="cv2" style="border: 1px solid;" width="400"></canvas> <!-- 可以添加更多的 canvas --></p>
<div style="width: 400px; height: 70px; border: 1px solid;">Model Color:<input id="mdlClr" onchange="changeOption('ModelColor',this.value)" style="margin-right: 50px;" type="color" value="#00ff40"/> Back Color1:<input id="bckClr1" onchange="changeOption('BackgroundColor1',this.value)" style="margin-right: 50px;" type="color"/> Back Color2:<input id="bckClr2" onchange="changeOption('BackgroundColor2',this.value)" type="color"/><br/> Render Mode:<select id="render" onchange="changeOption('RenderMode',this.value)">
<option>Flat</option>
<option>Point</option>
<option>Wireframe</option>
<option>Smooth</option>
</select>Definition:<select id="defini" onchange="changeOption('Definition',this.value)">
<option>Standard</option>
<option>low</option>
<option>high</option>
</select></div>
<p>
<script type="text/javascript">
var viewers = [];

function getOptions(){
    var mc = document.getElementById("mdlClr").value;
    var bc1 = document.getElementById("bckClr1").value;
    var bc2 = document.getElementById("bckClr2").value;
    var ren = document.getElementById("render").value;
    var def = document.getElementById("defini").value;
    return {ModelColor: mc, BackgroundColor1: bc1, BackgroundColor2: bc2, RenderMode: ren, Definition: def};
}

function readSTLfile(opt, canvasId){
    var canvas = document.getElementById(canvasId);
    var viewer = new JSC3D.Viewer(canvas);
    viewer.setParameter('SceneUrl', opt.SceneUrl);
    viewer.setParameter('InitRotationX', 0);
    viewer.setParameter('InitRotationY', 0);
    viewer.setParameter('InitRotationZ', 0);
    viewer.setParameter('ModelColor', opt.ModelColor);
    viewer.setParameter('BackgroundColor1', opt.BackgroundColor1);
    viewer.setParameter('BackgroundColor2', opt.BackgroundColor2);
    viewer.setParameter('RenderMode', opt.RenderMode);
    viewer.setParameter('Definition', opt.Definition);
    viewer.init();
    viewer.update();
    viewers.push(viewer); // 保存 viewer 實例
}

function changeOption(strOpt,strValue){
    console.log("change " + strOpt + " to " + strValue);
    viewers.forEach(viewer => {
        viewer.setParameter(strOpt, strValue);
        viewer.init();
        viewer.update();
    });
}

function openByUrl(){
    var url = document.getElementById("url").value;
    var opt = getOptions();
    opt.SceneUrl = url;
    // 可以添加更多的 STL URL
    readSTLfile(opt, 'cv1'); // 為每個 canvas 調用
    readSTLfile(opt, 'cv2'); // 第二個 canvas
}

function openByGet(){
    var urls = [
        "https://s104.cycu.org/~pj2023/cad2024_part_ex1_solvespace.stl",
        "https://s104.cycu.org/~scrum1/41223199_part99.stl"
    ];
    var opt = getOptions();
    urls.forEach((url, index) => {
        opt.SceneUrl = url;
        readSTLfile(opt, 'cv' + (index + 1)); // 動態生成 canvas ID
    });
}

openByGet();
</script>
</p>
<h3>NX_python</h3>
<p><a href="/downloads/nxopen_python_block_ex.7z">nxopen_python_block_ex.7z</a></p>
<h2>Topic 4</h2>
<p>以下影片說明如何配置 NX2312:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/0KzHbQ_YxGA?si=-gPIzsZYSHtnnhPn" title="YouTube video player" width="560"></iframe></p>
<p><img alt="" height="283" src="/images/one_link_drawing.png" width="400"/></p>
<p>Solvespace 零件組立功能:</p>
<p><a href="/downloads/solvespace_one_link_assembly_ttt.7z">solvespace_one_link_assembly_ttt.7z</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/XEWTE1t_Gb0?si=-jmhJBi2k1ym_Xl2" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/one_link_nx_copsim.7z">one_link_nx_copsim.7z</a></p>
<p><img alt="" height="299" src="/images/MS_pinball.png" width="400"/></p>
<p><a href="http://wcm.cycu.org:88/github/cad2023/content/Virtual%20pinball.html">http://wcm.cycu.org:88/github/cad2023/content/Virtual%20pinball.html</a> (使用代理主機連結)</p>
<p><a href="https://alula.github.io/SpaceCadetPinball/">https://alula.github.io/SpaceCadetPinball/</a></p>
<p><a href="http://mjrnet.org/pinscape/BuildGuideV2/BuildGuide.php">http://mjrnet.org/pinscape/BuildGuideV2/BuildGuide.php</a></p>
<p><a href="http://229.cycu.org/nx2312_Drafting.7z">nx2312_Drafting.7z</a> (NX2312 工程圖模組)</p>
<p><a href="http://229.cycu.org/nx2312_nxplot.7z">nx2312_nxplot.7z</a> (NX2312 Export PDF)</p>
<hr/>
<p>主題: 機電整合系統模擬與控制</p>
<p style="padding-left: 30px;">利用<span> </span><a href="https://www.coppeliarobotics.com/">CoppeliaSim</a><span> </span>建立機電模擬系統</p>
<p style="padding-left: 60px;">CoppeliaSim 使用者設定檔案位於 C:\Users\%USERNAME%\AppData\Roaming\CoppeliaSim\usrset.txt, 因此若要使用可攜模式, 必須在啟動系統時將先前設定複製至內件位置.</p>
<p style="padding-left: 90px;">Xcopy %Disk%:\home_ipv6\AppData\Roaming\CoppeliaSim C:\users\%USERNAME%\AppData\Roaming\CoppeliaSim /E /H /C /I /Y</p>
<p style="padding-left: 90px;">其中包括 defaultPython 與 preferredSandboxLang 變數設定</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecycu/Copsim_scenes_4.7">CoppeliaSim 4.7 Scenes</a> 巡禮 (所有場景位於 CoppeliaSim/scenes 目錄中)</p>
<p style="padding-left: 90px;"><a href="https://raw.githubusercontent.com/orbitalquark/lua-quick-reference/default/docs/LuaQuickReference2.pdf">Lua 簡介</a></p>
<p style="padding-left: 90px;">Kinematics:</p>
<p style="padding-left: 120px;">scenes\controlTypeExamples\controlledViaZmq.ttt</p>
<p style="padding-left: 120px;">scenes\kinematics\simpleExamples\1-singleIkGroupWithSingleIkElement-undamped.ttt</p>
<p style="padding-left: 120px;">scenes\kinematics\simpleExamples\8-computingJointAnglesForRandomPoses.ttt</p>
<p style="padding-left: 120px;">scenes\kinematics\abbFantaCanChallenge.ttt</p>
<p style="padding-left: 120px;">scenes\kinematics\smoothMovementsInFkAndIk.ttt</p>
<p style="padding-left: 120px;">scenes\kinematics\twoRobotsIK.ttt</p>
<p style="padding-left: 120px;">scenes\trajectoryAndMotion\trajectoryGenerationDemo.ttt</p>
<p style="padding-left: 120px;">scenes\pickAndPlaceDemo.ttt</p>
<p style="padding-left: 90px;">Dynamics:</p>
<p style="padding-left: 120px;">scenes\otherScenes\dynamic4BarLinkage.ttt</p>
<p style="padding-left: 120px;">scenes\otherScenes\simpleMagnetDemo.ttt</p>
<p style="padding-left: 120px;">scenes\otherScenes\visionSensorOverTerrain.ttt</p>
<p style="padding-left: 120px;">scenes\gears.ttt</p>
<p style="padding-left: 120px;">scenes\proximitySensorDemo.ttt</p>
<p style="padding-left: 90px;">UI:</p>
<p style="padding-left: 120px;">scenes\customUI-python.ttt</p>
<p style="padding-left: 60px;"><a href="https://mde.tw/Copsim_manual_4.7/en/tutorials.htm">CoppeliaSim 4.7 Tutorial</a> </p>
<p style="padding-left: 60px;">原始碼: <a href="https://github.com/CoppeliaRobotics">https://github.com/CoppeliaRobotics</a></p>
<p style="padding-left: 30px;">利用<span> </span><a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a><span> </span>跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;">Homework 3:</p>
<p style="padding-left: 60px;">建立 <a href="https://mde.tw/cad2024/content/BonW.html">Balance on Wheels</a> 控制系統設計模擬場景</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecycu/Balance_On_Wheels">https://github.com/mdecycu/Balance_On_Wheels</a></p>
<p style="padding-left: 60px;"><img alt="" height="217" src="https://mde.tw/cad2024/images/balance_on_wheels.png" width="400"/></p>
<p style="padding-left: 60px;"><img alt="" height="217" src="/images/Balance_on_wheels_scene.png" width="400"/></p>
<p style="padding-left: 60px;"><a href="/downloads/Balance_on_wheels_nx2312.7z">Balance_on_wheels_nx2312.7z</a></p>
<p style="padding-left: 60px;"><a href="/downloads/Balance_on_Wheel_scene.7z">Balance_on_Wheel_scene.7z</a></p>
<p style="padding-left: 60px;"><a href="/downloads/Balance_on_Wheel_w_GPS_sensor_ttt_lua.7z">Balance_on_Wheel_w_GPS_sensor_ttt_lua.7z</a> (使用 GPS 感測器取出輪車移動時, 平台的特定點座標)</p>
<p style="padding-left: 30px;">Homework 4:</p>
<p style="padding-left: 60px;">建立 <a href="https://mde.tw/cad2024/content/Quadruped.html">Dingo 機器狗</a>控制系統設計模擬場景</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecycu/DingoQuadruped">https://github.com/mdecycu/DingoQuadruped</a></p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/DINGO_QUADRUPED_CAD.7z">DINGO_QUADRUPED_CAD.7z</a></p>
<p style="padding-left: 60px;"><img alt="" height="217" src="https://mde.tw/cad2024/images/dingo.png" width="400"/></p><h3>Pinball</h3>
<p><img alt="" height="537" src="/images/pinball_flipper_design.png" width="400"/></p>
<p>(<a href="https://www.pinrepair.com/em/index1.htm">source</a>)</p>
<p>Pinball 遊戲台上各種裝置的正式英文名稱:</p>
<p>Playfield (遊戲場)</p>
<p style="padding-left: 30px;">整個遊戲台的主要活動區域.</p>
<p>Spinner (旋轉器)</p>
<p style="padding-left: 30px;">可以旋轉的特殊目標, 球經過時會旋轉並加分.</p>
<p>Ball drain (球洞)</p>
<p style="padding-left: 30px;">球掉落遊戲台底部的區域, 通常意味著失去一顆球.</p>
<p>Score display (得分顯示)</p>
<p style="padding-left: 30px;">顯示當前分數的電子螢幕.</p>
<p>Multiball (多球模式)</p>
<p style="padding-left: 30px;">同時在遊戲台上有多顆球的遊戲狀態.</p>
<p>Kickback (反彈)</p>
<p>可以將即將掉落的球彈回遊戲台的機制.</p>
<p>Flippers (控制撥桿)</p>
<p style="padding-left: 30px;">位於遊戲台底部的兩個可以控制的撥桿, 用於擊球和控制球的方向.</p>
<p>Bumpers (跳珠器)</p>
<p style="padding-left: 30px;">分佈在遊戲台上的圓形突起裝置, 當球碰到時會彈開球並加分.</p>
<p>Slingshots (彈射器)</p>
<p style="padding-left: 30px;">位於flipper兩側的斜面彈射裝置, 當球觸碰時會快速彈開球.</p>
<p>Targets (目標)</p>
<p style="padding-left: 30px;">遊戲台上的固定打擊目標, 可分為: Drop targets (下降目標), Pop-up targets (彈出目標), Standing targets (靜態目標) 等.</p>
<p>Lanes (軌道)</p>
<p style="padding-left: 30px;">遊戲台上的特定路徑, 如：Roll-over lanes, Return lanes 等.</p>
<p>Ramps (斜坡)</p>
<p style="padding-left: 30px;">遊戲台上的傾斜軌道, 球可以滾過並加分.</p>
<p>Outlanes (外側軌道)</p>
<p style="padding-left: 30px;">位於flipper兩側的軌道, 通常會導致球掉落.</p>
<p>Plunger (發射器)</p>
<p style="padding-left: 30px;">用於初始發射球的裝置.</p>
<hr/>
<p>References:</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Pinball">https://en.wikipedia.org/wiki/Pinball</a></p>
<p style="padding-left: 30px;"><a href="https://cdn.aaai.org/ocs/1191/1191-5911-1-PB.pdf">https://cdn.aaai.org/ocs/1191/1191-5911-1-PB.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.researchgate.net/publication/360722315_Toward_a_Study_of_Pinball">https://www.researchgate.net/publication/360722315_Toward_a_Study_of_Pinball</a></p>
<p style="padding-left: 30px;"><a href="https://www.clevelandsoftwaredesign.com/pinball-parts">https://www.clevelandsoftwaredesign.com/pinball-parts</a></p>
<p style="padding-left: 30px;"><a href="https://www.kineticist.com/post/a-beginners-guide-to-pinball-designers">https://www.kineticist.com/post/a-beginners-guide-to-pinball-designers</a></p>
<p style="padding-left: 30px;"><a href="https://technologystudent.com/pdf22/pinball-full1B.pdf">https://technologystudent.com/pdf22/pinball-full1B.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.sciencedirect.com/science/article/pii/S1474667017307358">https://www.sciencedirect.com/science/article/pii/S1474667017307358</a></p>
<h3>HW 3</h3>
<p>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 62cc07a0d1334189f056cf0e26e19badc1ab055f</p>
<p>建立 <a href="https://mde.tw/cad2024/content/BonW.html">Balance on Wheels</a> 控制系統設計模擬場景</p>
<p><a href="https://github.com/mdecycu/Balance_On_Wheels">https://github.com/mdecycu/Balance_On_Wheels</a></p>
<p>上列倉儲中有兩個採 Solidworks 繪製的系統模型, 可以直接以 NX2312 開啟後存為 .prt 檔案. 只是各零組件並沒有詳細的零組件繪製流程. 學員可以自行利用 Solvespace 與 NX2312 建立相同尺寸的零組件.</p>
<p><img alt="" height="217" src="https://mde.tw/cad2024/images/balance_on_wheels.png" width="400"/></p>
<p>以下為取自簡化過的 <a href="/downloads/Balance_on_wheels_nx2312.7z">Balance_on_wheels_nx2312.7z</a> 系統組立件, 從 NX2312 以 Export 功能轉為 .stl 後, 再轉入 CoppeliaSim, 過程中自行利用 Cuboid 建立上平台, 並增大厚度以便讓連桿可以直接接在兩側.</p>
<p>由於原始系統模型在部分軸接孔並沒有圓柱件可以讓 Revolute Joint 定位, 必須透過圓孔的 Shape Editor 設法建立. 且原始 Wheel 形狀較為複雜, 在 CoppeliaSim 建立運動模擬場景時, 必須設法簡化, 以下直接採用單一圓柱體作為輪子的動態模擬物件.</p>
<p>另外由於連接平台與輪軸的機構為封閉式, 在 CoppeliaSim 場景中進行組裝時, 必須透過兩個 Dummy 物件, 以 Dynamic, overlap constraint 的 Dummy Type 進行連接. 而且各連桿在 CoppeliaSim Shape Editor 後, 可能因碰撞檢測設定而產生的干涉, 可以利用 <a href="https://manual.coppeliarobotics.com/en/shapeDynamicsProperties.htm">Respondable Mask</a> 的設定避開.</p>
<p>最後, 因為此雙輪車的機構設計目的, 是希望透過輪軸上方致動器的運動控制, 讓輪車透過平台瞬間運動所產生的慣性上下跳躍運動. 但初步階段在雙輪車能夠穩定平衡控制之前, 除輪軸馬達外, 其餘連接軸上的馬達 Control Mode 設為 Position, 均施以 250 N.m 的扭力, 並令其 Target angle 為 0 度.</p>
<p>根據以上流程建立的 CoppeliaSim 系統場景畫面與檔案如下:</p>
<p><img alt="" height="217" src="/images/Balance_on_wheels_scene.png" width="400"/></p>
<p><a href="/downloads/Balance_on_Wheel_scene.7z">Balance_on_Wheel_scene.7z</a></p>
<p><a href="/downloads/Balance_on_Wheel_w_GPS_sensor_zero_vel_ttt.7z">Balance_on_Wheel_w_GPS_sensor_zero_vel_ttt.7z</a></p>
<p>有關雙輪車平衡控制方法可以參考:</p>
<p style="padding-left: 30px;"><a href="/downloads/invertedPendulum_ttt_for_4.7.0_rev4.7z">invertedPendulum_ttt_for_4.7.0_rev4.7z</a></p>
<p style="padding-left: 30px;"><a href="https://ctms.engin.umich.edu/CTMS/?example=InvertedPendulum&amp;section=SystemModeling">Inverted Pendulum: System Modeling</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/VREP-Coppeliasim-Linear-first-order-inverted-pendulum">https://github.com/mdecycu/VREP-Coppeliasim-Linear-first-order-inverted-pendulum</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/vrep_inverted_pendulum">https://github.com/mdecycu/vrep_inverted_pendulum</a></p>
<p style="padding-left: 30px;"><a href="https://ojs.bbwpublisher.com/index.php/JCER/article/view/4840">Project-Based Teaching in Control Theory Education Based on V-REP: A Cart Inverted Pendulum Case</a></p>
<p style="padding-left: 30px;"><a href="https://iopscience.iop.org/article/10.1088/1742-6596/2187/1/012024/pdf">Balance Control of an Inverted Pendulum on a Quadruped Robot by Reinforcement Learning</a></p>
<p style="padding-left: 30px;"><a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10919658/">Control strategies for inverted pendulum: A comparative analysis of linear, nonlinear, and artificial intelligence approaches</a></p>
<p style="padding-left: 30px;"><a href="https://ir.lib.nycu.edu.tw/bitstream/11536/10654/1/000249410400016.pdf">Design of nonlinear controller for bi-axial inverted pendulum system</a></p>
<p></p>
<h1>References</h1>
<p><a href="https://youtu.be/pX03H1oeyN0?feature=shared">What do I do as a mechanical design engineer?</a></p>
<p><a href="https://youtu.be/u8THwmaU35U?feature=shared">Overview of mechanical design engineering</a></p>
<p><a href="https://youtu.be/yLMdxdV1bfU?feature=shared">What does a mechanical design engineer do?</a></p>
<p><a href="https://youtube.com/watch?v=q20HwaMxjBQ&amp;feature=shared">Guide to mechanical design engineering course</a></p>
<p><a href="https://drive.google.com/file/d/1uW7alBAk2zMYIHYDyGxtNZ2jmcBKrhZj/view">References</a> </p>
<p>CAD:</p>
<p style="padding-left: 30px;"><a href="https://www.tmt.unze.ba/zbornik/TMT2010/Keynote-Tornincasa.pdf">2010 THE FUTURE AND THE EVOLUTION OF CAD</a></p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/cadbook.pdf">cadbook.pdf</a> (from cadp2018 course)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/cad_history.pdf">cad_history.pdf</a> <span>(from cadp2018 course)</span></p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/NX-12-for-Engineering-Design.pdf">NX-12-for-Engineering-Design.pdf</a> (from <a href="https://me5763.github.io/lab/assets/books/NX-12-for-Engineering-Design.pdf">https://me5763.github.io/lab/assets/books/NX-12-for-Engineering-Design.pdf</a>)</p>
<p>Git:</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/Git_for_Electronic_Circuit_Design.pdf">Git for Electronic Circuit Design - CAD and Version Control for Electrical Engineers.pdf</a> (from <a href="https://link.springer.com/book/10.1007/978-1-4842-8124-6">Springer</a>)</p>
<p>ODOO:</p>
<p style="padding-left: 30px;"><a href="https://github.com/odoo/odoo">https://github.com/odoo/odoo</a> </p>
<p style="padding-left: 30px;"><a href="https://mde.tw/pj4101">https://mde.tw/pj4101</a> </p>
<p>Video:</p>
<p dir="auto" style="padding-left: 30px;"><a href="https://vimeo.com/user24079973" rel="nofollow">https://vimeo.com/user24079973</a></p>
<p dir="auto" style="padding-left: 30px;"><a href="https://www.youtube.com/@-kmolab9376" rel="nofollow">https://www.youtube.com/@-kmolab9376</a></p>
<h2>Parts</h2>
<p><a href="https://support.industrysoftware.automation.siemens.com/training/se/en/ST3/pdf/spse01550.pdf">https://support.industrysoftware.automation.siemens.com/training/se/en/ST3/pdf/spse01550.pdf</a>  (零件繪圖練習只要畫到 page 32)</p>
<p><a href="/downloads/cad2024_practice_9_page_32.pdf">cad2024_practice_9_page_32.pdf</a></p>
<p><img alt="" height="363" src="/images/cad2024_part_ex1.png" width="400"/></p>
<p><img alt="" height="374" src="/images/cad2024_part_ex1_solvespace.png" width="400"/></p>
<p><a href="/downloads/cad2024_part_ex1_solvespace.7z">cad2024_part_ex1_solvespace.7z</a></p>
<p>
<script src="/static/jsc3d.js" type="text/javascript"></script>
</p>
<div id="models"><canvas height="300" id="cv1" style="border: 1px solid;" width="400"></canvas> <!-- 可以添加更多的 canvas --></div>
<div style="width: 400px; height: 70px; border: 1px solid;">Model Color:<input id="mdlClr" onchange="changeOption('ModelColor',this.value)" style="margin-right: 50px;" type="color" value="#00ff40"/> Back Color1:<input id="bckClr1" onchange="changeOption('BackgroundColor1',this.value)" style="margin-right: 50px;" type="color"/> Back Color2:<input id="bckClr2" onchange="changeOption('BackgroundColor2',this.value)" type="color"/><br/> Render Mode:<select id="render" onchange="changeOption('RenderMode',this.value)">
<option>Flat</option>
<option>Point</option>
<option>Wireframe</option>
<option>Smooth</option>
</select>Definition:<select id="defini" onchange="changeOption('Definition',this.value)">
<option>Standard</option>
<option>low</option>
<option>high</option>
</select></div>
<p>
<script type="text/javascript">
var viewers = [];

function getOptions(){
    var mc = document.getElementById("mdlClr").value;
    var bc1 = document.getElementById("bckClr1").value;
    var bc2 = document.getElementById("bckClr2").value;
    var ren = document.getElementById("render").value;
    var def = document.getElementById("defini").value;
    return {ModelColor: mc, BackgroundColor1: bc1, BackgroundColor2: bc2, RenderMode: ren, Definition: def};
}

function readSTLfile(opt, canvasId){
    var canvas = document.getElementById(canvasId);
    var viewer = new JSC3D.Viewer(canvas);
    viewer.setParameter('SceneUrl', opt.SceneUrl);
    viewer.setParameter('InitRotationX', 0);
    viewer.setParameter('InitRotationY', 0);
    viewer.setParameter('InitRotationZ', 0);
    viewer.setParameter('ModelColor', opt.ModelColor);
    viewer.setParameter('BackgroundColor1', opt.BackgroundColor1);
    viewer.setParameter('BackgroundColor2', opt.BackgroundColor2);
    viewer.setParameter('RenderMode', opt.RenderMode);
    viewer.setParameter('Definition', opt.Definition);
    viewer.init();
    viewer.update();
    viewers.push(viewer); // 保存 viewer 實例
}

function changeOption(strOpt,strValue){
    console.log("change " + strOpt + " to " + strValue);
    viewers.forEach(viewer => {
        viewer.setParameter(strOpt, strValue);
        viewer.init();
        viewer.update();
    });
}

function openByUrl(){
    var url = document.getElementById("url").value;
    var opt = getOptions();
    opt.SceneUrl = url;
    // 可以添加更多的 STL URL
    readSTLfile(opt, 'cv1'); // 為每個 canvas 調用
}

function openByGet(){
    var urls = [
        "https://s104.cycu.org/~pj2023/cad2024_part_ex1_solvespace.stl"
    ];
    var opt = getOptions();
    urls.forEach((url, index) => {
        opt.SceneUrl = url;
        readSTLfile(opt, 'cv' + (index + 1)); // 動態生成 canvas ID
    });
}

openByGet();
</script>
</p>
<p></p>
<p>上述 iframe 的標註 src 為:</p>
<p><a href="https://mde.tw/cad2024/cmsimde/static/viewstl.html?src=https://s104.cycu.org/~pj2023/cad2024_part_ex1_solvespace.stl">https://mde.tw/cad2024/cmsimde/static/viewstl.html?src=https://s104.cycu.org/~pj2023/cad2024_part_ex1_solvespace.stl</a> </p>
<p>以上 STL 除了放在倉儲 downloads 目錄之外, 也可上傳到可以接受 Cross-Origin Resource Sharing (CORS) 的 WWW server, 目前已經設定一台 s104.cycu.org 可以讓使用者透過 sftp 將零組件轉出的 STL 上傳到使用者的 public_html 目錄, 並透過 "~用戶名稱/STL 檔案名稱"進行連結. 以下為該 server 的必要設置:</p>
<p>1. 必須與作業網站的 https 連結相同 - 可透過 <a href="https://letsencrypt.org/">Let's Encrypt (letsencrypt.org)</a> 設置, 其中 <a href="https://github.com/certbot/certbot/releases">Windows 套件為 v2.9.0</a>.</p>
<p>2. 有關 s104.cycu.org 中 nginx 的用戶 public_html 設置必須允許跨網站連結:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># 處理 /~username/ 格式的請求
location ~ ^/~(.+?)(/.*)?$ {
    alias C:/Users/$1/public_html$2;
    index index.html;
    autoindex on;
    # try to resolve the COR's issue
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Content-Type' always;

    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type' always;
        return 204;
    }
}</pre>
<p>3. 使用者必須設定其帳號下的 public_html 具有寫入檔案的權利, 以 scrum1 帳號為例, ssh 進入後, 利用 mkdir 建立 public_html 目錄後, 可以利用下列指令讓 public_html 可以寫入.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">icacls "C:\Users\scrum1\public_html" /grant scrum1:(OI)(CI)F

REM OI (Object Inherit) allows files in the folder to inherit these permissions.
REM CI (Container Inherit) allows subfolders to inherit these permissions.
REM F grants full control.
</pre>
<hr/>
<p>Solvespace 零件繪圖:</p>
<p>Sketch Rectangle (R)</p>
<p>Tangle Arc at Point (Shift + A)</p>
<p>Sketch Circle (C)</p>
<p>Constraint distance / diameter / length (D)</p>
<p>New group extruding active sketch (X)</p>
<p>Sketch line segment (S)</p>
<p>Sketch In Workplane (2)</p>
<p>Toggle construction (G)</p>
<p>Sketch in new workplane (Shift + W) - one point and specific orientation, origin and two lines</p>
<p>NX 零件繪圖:</p>
<p>Shift + mouse middle button pressed and move = Pane</p>
<p>Ctrl + f key = Fit</p>
<p>Sketch</p>
<p style="padding-left: 30px;">Rectangle From Center</p>
<p style="padding-left: 30px;">Fillet</p>
<p style="padding-left: 30px;">Circle</p>
<p style="padding-left: 30px;">Line</p>
<p style="padding-left: 30px;">Arc</p>
<p style="padding-left: 30px;">Center mouse click = Finish</p>
<p style="padding-left: 30px;">Include - Includes and projects external objects into the sketch</p>
<p style="padding-left: 30px;">Dimension - Display as PMI</p>
<p>Datum Plane</p>
<p style="padding-left: 30px;">Two Lines</p>
<p>Extrude</p>
<p style="padding-left: 30px;">Width - Value, Symmetric Value</p>
<p><img alt="" height="339" src="/images/cad2024_part_ex1_nx2312.png" width="400"/></p>
<p><a href="/downloads/cad2024_part_ex1_nx2312.7z">cad2024_part_ex1_nx2312.7z</a></p>
<p><a href="/downloads/cad2024_part_ex1_nx1872.7z">cad2024_part_ex1_nx1872.7z</a></p>
<p></p>
<h3>Solv_parts</h3>
<p>說明如何利用 Solvespace 繪製下列零件:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/o00FOhYDdy4?si=E1YW57ZmV0my8cyo" title="YouTube video player" width="560"></iframe></p>
<p><img alt="" height="532" src="/images/page16.png" width="400"/></p>
<p>採用 Solvespace 作圖:</p>
<p style="padding-left: 30px;"><a href="/downloads/page16.7z">page16.7z</a></p>
<p style="padding-left: 30px;">page16_core.slvs 為零件的核心物件, page16_material.slvs 則為其外圍物件, page16_final.slvs 為 page_material.slvs 作為基材, 利用組立導入後, 再以 page16_core.slvs 進行除料, 之後再補上下兩個物件.</p>
<script src="/static/jsc3d.js" type="text/javascript"></script>
<p><canvas height="300" id="cv1" style="border: 1px solid;" width="400"></canvas></p>
<p><img alt="" height="353" src="/images/page2-24.png" width="400"/></p>
<p><a href="/downloads/page2-24_one_piece_slvs.7z">page2-24_one_piece_slvs.7z</a></p>
<p><canvas height="300" id="cv2" style="border: 1px solid;" width="400"></canvas></p>
<div style="width: 400px; height: 70px; border: 1px solid;">Model Color:<input id="mdlClr" onchange="changeOption('ModelColor',this.value)" style="margin-right: 50px;" type="color" value="#00ff40"/> Back Color1:<input id="bckClr1" onchange="changeOption('BackgroundColor1',this.value)" style="margin-right: 50px;" type="color"/> Back Color2:<input id="bckClr2" onchange="changeOption('BackgroundColor2',this.value)" type="color"/><br/> Render Mode:<select id="render" onchange="changeOption('RenderMode',this.value)">
<option>Flat</option>
<option>Point</option>
<option>Wireframe</option>
<option>Smooth</option>
</select>Definition:<select id="defini" onchange="changeOption('Definition',this.value)">
<option>Standard</option>
<option>low</option>
<option>high</option>
</select></div>
<p>
<script type="text/javascript">
var viewers = [];

function getOptions(){
    var mc = document.getElementById("mdlClr").value;
    var bc1 = document.getElementById("bckClr1").value;
    var bc2 = document.getElementById("bckClr2").value;
    var ren = document.getElementById("render").value;
    var def = document.getElementById("defini").value;
    return {ModelColor: mc, BackgroundColor1: bc1, BackgroundColor2: bc2, RenderMode: ren, Definition: def};
}

function readSTLfile(opt, canvasId){
    var canvas = document.getElementById(canvasId);
    var viewer = new JSC3D.Viewer(canvas);
    viewer.setParameter('SceneUrl', opt.SceneUrl);
    viewer.setParameter('InitRotationX', 0);
    viewer.setParameter('InitRotationY', 0);
    viewer.setParameter('InitRotationZ', 0);
    viewer.setParameter('ModelColor', opt.ModelColor);
    viewer.setParameter('BackgroundColor1', opt.BackgroundColor1);
    viewer.setParameter('BackgroundColor2', opt.BackgroundColor2);
    viewer.setParameter('RenderMode', opt.RenderMode);
    viewer.setParameter('Definition', opt.Definition);
    viewer.init();
    viewer.update();
    viewers.push(viewer); // 保存 viewer 實例
}

function changeOption(strOpt,strValue){
    console.log("change " + strOpt + " to " + strValue);
    viewers.forEach(viewer => {
        viewer.setParameter(strOpt, strValue);
        viewer.init();
        viewer.update();
    });
}

function openByUrl(){
    var url = document.getElementById("url").value;
    var opt = getOptions();
    opt.SceneUrl = url;
    // 可以添加更多的 STL URL
    readSTLfile(opt, 'cv1'); // 為每個 canvas 調用
    readSTLfile(opt, 'cv2'); // 為每個 canvas 調用
}

function openByGet(){
    var urls = [
        "https://s104.cycu.org/~scrum1/page16_final.stl",
        "https://s104.cycu.org/~scrum1/page2-24_one_piece.stl"
    ];
    var opt = getOptions();
    urls.forEach((url, index) => {
        opt.SceneUrl = url;
        readSTLfile(opt, 'cv' + (index + 1)); // 動態生成 canvas ID
    });
}

openByGet();
</script>
</p><h3>NX_parts</h3>
<p>以下影片說明如何配置 NX2312:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/0KzHbQ_YxGA?si=-gPIzsZYSHtnnhPn" title="YouTube video player" width="560"></iframe></p>
<p><img alt="" height="532" src="/images/page16.png" width="400"/></p>
<p>採 NX2312 繪製:</p>
<p style="padding-left: 30px;">新增 Model, 選擇以 inches 作為繪圖單位</p>
<p style="padding-left: 30px;">選擇 Sketch 繪製草圖</p>
<p style="padding-left: 30px;">選擇在 Top 工作面上繪製底部正方形 (尺寸透過計算為 4.25x4.25)</p>
<p style="padding-left: 30px;">選擇 Datum Plane 建立工作面</p>
<p style="padding-left: 30px;">選擇 At Distance, 從 Top 工作面 (距離底部2.375) 往上建立上部較小的正方形 (1.875x1.875)</p>
<p style="padding-left: 30px;">從 Toolbar Options 帶出 Menu</p>
<p style="padding-left: 30px;">從 Menu - Insert - Mesh Surface - Through Curves 利用上下兩個正方形建立 loft 實體 (Alignment 必須選擇 Preserve Shape)</p>
<p style="padding-left: 30px;">根據 .375 厚度, 對 loft 實體轉為薄殼 (選擇上下底部挖空), 之後再補上下兩個實體</p>
<p style="padding-left: 30px;">上部實體可以使用 Include 取得外圍 1.875x1.875 的正方形, 內部則為 1.125x1.125 正方形, 長出實體高度則為 0.75</p>
<p style="padding-left: 30px;">接著因為 Shell 頂部正方形開口小於 1.125x1.125, 因此需要在 Shell 頂部繪製一個 1.125x1.125 的正方形往下進行除料</p>
<p style="padding-left: 30px;">最後再底部長出一個 5.25x5.25 且四邊倒圓角半徑 0.5 的外圍正方形, 內部正方形為 3.411x3.411, 完成後向上長出 0.5 實體即完成</p>
<p style="padding-left: 30px;">利用上述流程建立的零件: <a href="/downloads/page16_w9.prt">page16_w9.prt</a></p>
<p><img alt="" height="489" src="/images/nx2312_through_curves_alignment_preserve_shape.png" width="300"/></p>
<p></p>
<p><a href="/downloads/page16_nx2312.prt">page16_nx2312.prt</a></p>
<script src="/static/jsc3d.js" type="text/javascript"></script>
<div id="models"><canvas height="300" id="cv1" style="border: 1px solid;" width="400"></canvas> <!-- 可以添加更多的 canvas --></div>
<p><img alt="" height="353" src="/images/page2-24.png" width="400"/></p>
<p>作圖流程: 依據上述尺寸分別長出實體之後, 使用 Unite 將各長出的實體合併後, 使用 Edge Blend 在各相接的 Edge 進行倒圓</p>
<p><a href="/downloads/page2-24_nx2312.7z">page2-24_nx2312.7z</a></p>
<div id="models"><canvas height="300" id="cv2" style="border: 1px solid;" width="400"></canvas> <!-- 可以添加更多的 canvas --></div>
<p></p>
<div style="width: 400px; height: 70px; border: 1px solid;">Model Color:<input id="mdlClr" onchange="changeOption('ModelColor',this.value)" style="margin-right: 50px;" type="color" value="#00ff40"/> Back Color1:<input id="bckClr1" onchange="changeOption('BackgroundColor1',this.value)" style="margin-right: 50px;" type="color"/> Back Color2:<input id="bckClr2" onchange="changeOption('BackgroundColor2',this.value)" type="color"/><br/> Render Mode:<select id="render" onchange="changeOption('RenderMode',this.value)">
<option>Flat</option>
<option>Point</option>
<option>Wireframe</option>
<option>Smooth</option>
</select>Definition:<select id="defini" onchange="changeOption('Definition',this.value)">
<option>Standard</option>
<option>low</option>
<option>high</option>
</select></div>
<script type="text/javascript">
var viewers = [];

function getOptions(){
    var mc = document.getElementById("mdlClr").value;
    var bc1 = document.getElementById("bckClr1").value;
    var bc2 = document.getElementById("bckClr2").value;
    var ren = document.getElementById("render").value;
    var def = document.getElementById("defini").value;
    return {ModelColor: mc, BackgroundColor1: bc1, BackgroundColor2: bc2, RenderMode: ren, Definition: def};
}

function readSTLfile(opt, canvasId){
    var canvas = document.getElementById(canvasId);
    var viewer = new JSC3D.Viewer(canvas);
    viewer.setParameter('SceneUrl', opt.SceneUrl);
    viewer.setParameter('InitRotationX', 0);
    viewer.setParameter('InitRotationY', 0);
    viewer.setParameter('InitRotationZ', 0);
    viewer.setParameter('ModelColor', opt.ModelColor);
    viewer.setParameter('BackgroundColor1', opt.BackgroundColor1);
    viewer.setParameter('BackgroundColor2', opt.BackgroundColor2);
    viewer.setParameter('RenderMode', opt.RenderMode);
    viewer.setParameter('Definition', opt.Definition);
    viewer.init();
    viewer.update();
    viewers.push(viewer); // 保存 viewer 實例
}

function changeOption(strOpt,strValue){
    console.log("change " + strOpt + " to " + strValue);
    viewers.forEach(viewer => {
        viewer.setParameter(strOpt, strValue);
        viewer.init();
        viewer.update();
    });
}

function openByUrl(){
    var url = document.getElementById("url").value;
    var opt = getOptions();
    opt.SceneUrl = url;
    // 可以添加更多的 STL URL
    readSTLfile(opt, 'cv1'); // 為每個 canvas 調用
    readSTLfile(opt, 'cv2'); // 為每個 canvas 調用
}

function openByGet(){
    var urls = [
        "https://s104.cycu.org/~scrum1/page16_nx2312.stl",
        "https://s104.cycu.org/~scrum1/page2-24_nx2312.stl"

    ];
    var opt = getOptions();
    urls.forEach((url, index) => {
        opt.SceneUrl = url;
        readSTLfile(opt, 'cv' + (index + 1)); // 動態生成 canvas ID
    });
}

openByGet();
</script>
<p>參考:</p>
<p style="padding-left: 30px;"><a href="/downloads/page16_nx_loft.prt">page16_nx_loft.prt</a> (NX2312)</p>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/watch?v=hvAf9XESqmQ">https://www.youtube.com/watch?v=hvAf9XESqmQ</a></p><h2>BonW</h2>
<p>Balance on Wheels</p>
<p><a href="https://github.com/mdecycu/Balance_On_Wheels">https://github.com/mdecycu/Balance_On_Wheels</a></p>
<p><img alt="" height="217" src="/images/balance_on_wheels.png" width="400"/></p>
<p>專案第一階段執行過程:</p>
<ol>
<li>利用 Solvespace 建立零組件</li>
<li>將零組件轉入 CoppeliaSim</li>
<li>根據系統零組件從屬關係進行零件組立</li>
<li>針對系統動態運動模型運算簡化零件</li>
<li>進行初步開放系統的運動模擬</li>
<li>加入所需致動器與感測器</li>
<li>針對系統運動設定零件起始位置與機構運動範圍</li>
<li>利用 ZMQ Remote API 程式進行回授控制系統設計</li>
</ol>
<p>專案第二階段執行過程:</p>
<ol>
<li>利用 NX2312 建立零組件</li>
<li>將零組件轉入 CoppeliaSim</li>
<li>根據系統零組件從屬關係進行零件組立</li>
<li>針對系統動態運動模型運算簡化零件</li>
<li>進行初步開放系統的運動模擬</li>
<li>加入所需致動器與感測器</li>
<li>針對系統運動設定零件起始位置與機構運動範圍</li>
<li>利用 ZMQ Remote API 程式進行回授控制系統設計</li>
</ol>
<p>專案第三階段執行過程:</p>
<ol>
<li>利用 NXOpen 評估能否採二次程式開發流程建立系統零組件</li>
<li>利用 CoppeliaSim 的 Simple XML 模型檔案格式, 評估能否直接利用 NX2312 轉出的零件 STL 檔案建立模擬場景</li>
<li>結合 Jupyterlab 的 collaborative 模式 (或 Linux 上的 Jupyterhub server), 評估將潛在客戶導入協同產品設計的可行性</li>
</ol>
<p></p>
<p></p>
<h2>Quadruped</h2>
<p><a href="http://229.cycu.org/pj40922_downloads.7z">pj40922_downloads.7z</a></p>
<p><img caption="false" height="269" src="/images/quadruped_robot_pj40922.png" width="400"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/STmAWqYgiw8?si=PcL_jl5fn5_5cxTW" title="YouTube video player" width="560"></iframe></p>
<p><img alt="" height="332" src="/images/quadruped_8dof_v2.png" width="400"/></p>
<p>Actuator module:</p>
<p><img alt="" height="274" src="/images/quadruped_8dof_v2_actuator_module_2.png" width="400"/></p>
<p><img alt="" height="230" src="/images/quadruped_8dof_v2_actuator_module.png" width="400"/></p>
<p><a href="http://229.cycu.org/quadruped_8dof_v2_sw_nx.7z">quadruped_8dof_v2_sw_nx.7z</a> (built with Solidworks and open under NX2312) (<a href="https://github.com/open-dynamic-robot-initiative/open_robot_actuator_hardware/tree/master/mechanics/quadruped_robot_8dof_v2">File source</a>, <a href="https://open-dynamic-robot-initiative.github.io/">site</a>)</p>
<p><a href="https://arxiv.org/pdf/1910.00093">2020 An Open Torque-Controlled Modular Robot Architecture for Legged Locomotion Research</a> (<a href="https://ieeexplore.ieee.org/abstract/document/9015985">Journal</a>)</p>
<p><a href="https://arxiv.org/pdf/2406.01152">2024 Learning-based legged locomotion state of the art and future perspectives</a></p>
<p><a href="https://link.springer.com/chapter/10.1007/978-3-031-47272-5_15">2024 Planar Motion Control of a Quadruped Robot</a> (<a href="https://github.com/GabrielDGP/CLAWAR2023">Github</a>)</p>
<p><a href="https://github.com/mdecycu/quadruped">https://github.com/mdecycu/quadruped</a> </p>
<p><a href="https://github.com/mdecycu/Eklavya-QuadrupedMotionSimulation">https://github.com/mdecycu/Eklavya-QuadrupedMotionSimulation</a> </p>
<p><a href="https://github.com/mdecycu/jelly_mechanical">https://github.com/mdecycu/jelly_mechanical</a></p>
<p><img alt="" height="307" src="https://mde.tw/jelly_mechanical/images/dog_render_may17.JPG" width="400"/></p>
<p><a href="https://pupper-independent-study.readthedocs.io/en/latest/">https://pupper-independent-study.readthedocs.io/en/latest/</a></p>
<p><img alt="" height="318" src="/images/stanford_pupper.png" width="400"/></p>
<p><a href="https://github.com/dagor-dev">https://github.com/dagor-dev</a></p>
<p><a href="https://github.com/mdecycu/DingoQuadruped">https://github.com/mdecycu/DingoQuadruped</a></p>
<p><a href="http://229.cycu.org/DINGO_QUADRUPED_CAD.7z">DINGO_QUADRUPED_CAD.7z</a></p>
<p><img alt="" height="217" src="/images/dingo.png" width="400"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/8KntOIgzUjY?si=hOELpHP-nLpvMHdn" title="YouTube video player" width="560"></iframe></p>
<h2>Rover</h2>
<p><a href="https://github.com/Roger-random/Sawppy_Rover">https://github.com/Roger-random/Sawppy_Rover</a> (<a href="https://cad.onshape.com/documents/0c757e42f113318abade702c/w/83a3818a1aef5d4234265d9c/e/0284daee1c8866acdbcf0b9d">in Onshape</a>)</p>
<p><img caption="false" height="221" src="/images/sawppy_the_rover_in_onshape.png" width="300"/></p>
<p><a href="/downloads/40723221_2019_rover.7z">40723221_2019_rover.7z</a></p>
<p><a href="/downloads/40723221_2019_curiosity.7z">40723221_2019_curiosity.7z</a></p>
<p>1996 <a href="/downloads/Rocky_Mars_Rover_Prototyp.pdf">Rocky_Mars_Rover_Prototyp.pdf</a> (<a href="https://web.archive.org/web/20190228211544id_/http://pdfs.semanticscholar.org/a9c3/e7058d5374b3efc2112ba5570917c76a8db5.pdf">Source</a>)</p>
<p><a href="https://science.nasa.gov/mars/">https://science.nasa.gov/mars/</a> </p>
<p><a href="https://science.nasa.gov/mission/msl-curiosity/">https://science.nasa.gov/mission/msl-curiosity/</a> </p>
<p><a href="https://github.com/nasa/NASA-3D-Resources/tree/master/3D%20Models/Curiosity%20Rover/Curiosity%20Rover%203D%20Printed%20Model">Curiosity mars rover 3D model</a></p>
<p><a href="https://www.sciencedirect.com/science/article/pii/S0094114X1830171X">Design and terramechanics analysis of a Mars rover utilising active suspension</a></p>
<p><a href="http://229.cycu.org/2004_Design_of_a_Mars_Rover_Suspension_Mechanism.pdf">2004_Design_of_a_Mars_Rover_Suspension_Mechanism.pdf</a></p>
<p><img alt="" height="246" src="/images/mars_rover_design.png" width="400"/></p>
<h2>meArm</h2>
<p><a href="https://ucr-ee144.readthedocs.io/en/latest/">Foundation of Robotics</a> (Course document)</p>
<p><a href="https://link.springer.com/content/pdf/10.1007/978-3-319-62533-1.pdf">Elements of Robotics</a> (Open ebook)</p>
<p><a href="/downloads/uArm_manipulator_en.pdf">uArm_manipulator_en.pdf</a> (<a href="/downloads/uArm_manipulator_es.pdf">uArm_manipulator_es.pdf</a>)</p>
<p><img alt="" height="672" src="/images/cd2022_flowchart.png" width="544"/></p>
<hr/>
<p>Forward Kinematics and Inverse Kinematics of uArm robot:</p>
<p>Inverse Kinematics:</p>
<p>利用 <a href="https://www.sympy.org">sympy</a> 根據 <a href="/downloads/MeArmPiTechnicalOverviewV0-3DRAFT.pdf">meArm Pi Technical Overview</a> 中的說明 (修正錯誤後), 解出 Inverse Kinematics 如下:</p>
<p>當已知 manimpulator 端點的座標為 (x, y ,z) 時, 求 theta, ltheta (low arm link theta) 與 utheta (upper arm link theta). 利用 <a href="https://www.sympy.org">sympy</a> 之前必須先以 pip install sympy 安裝模組.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sympy as sp
   
# Define symbols
theta, ltheta, utheta, r, x, y, z = sp.symbols("theta ltheta utheta r x y z")
   
# Define equations, rearranged so expressions equal 0
eq1 = 15 + 50 + 80*sp.sin(ltheta) + 80*sp.sin(utheta) - r
eq2 = 53 + 80*sp.cos(ltheta) - 80*sp.cos(utheta) - z
# 從 eq3 與 eq4 可以得到 eq5 與 eq6, 將 r 及 theta 表示成 x, y 輸入的函式
# 因此 r 與 theta 在得知 x, y, z 時就可視為已知
eq3 = r*sp.cos(theta) - x
eq4 = r*sp.sin(theta) - y
eq5 = sp.sqrt(x*x + y*y) - r
eq6 = sp.atan(y/x) - theta
   
# Solve for theta1 &amp; theta3
solution = sp.solve([eq1, eq2], [ltheta, utheta], dict=True)
print(solution)
   
'''
[{ltheta: pi - asin(r/80 + sin(2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) - 13/16), 
   
utheta: -2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}, 
   
{ltheta: asin(-r/80 + sin(2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) + 13/16) + pi, 
   
utheta: 2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}, 
   
{ltheta: -asin(-r/80 + sin(2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) + 13/16), 
   
utheta: 2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}, 
   
{ltheta: asin(r/80 + sin(2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) - 13/16), 
   
utheta: -2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}]</pre>
<p></p>
<h1>CAD</h1>
<p>Engineers Edge: <a href="https://www.engineersedge.com/">https://www.engineersedge.com/</a></p>
<p>Computer Aided Design:</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Polygon_mesh">https://en.wikipedia.org/wiki/Polygon_mesh</a></p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Constructive_solid_geometry">https://en.wikipedia.org/wiki/Constructive_solid_geometry</a></p>
<p style="padding-left: 30px;"><a href="https://fr.wikipedia.org/wiki/B-Rep">https://fr.wikipedia.org/wiki/B-Rep</a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-03862-9">2015 Space Modeling with SolidWorks and NX</a></p>
<p style="padding-left: 30px;">Pymadcad (執行的電腦需要配置獨立顯卡):</p>
<p style="padding-left: 60px;"><a href="https://madcad.netlify.app/">https://madcad.netlify.app/</a></p>
<p style="padding-left: 60px;"><a href="https://pymadcad.readthedocs.io/en/latest/reference/index.html">https://pymadcad.readthedocs.io/en/latest/reference/index.html</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/jimy-byerley/pymadcad">https://github.com/jimy-byerley/pymadcad</a> (<a href="https://github.com/mdecycu/pymadcad">https://github.com/mdecycu/pymadcad</a>)</p>
<p style="padding-left: 90px;">Modification: <a href="https://pymadcad.readthedocs.io/en/latest/reference/text.html">Render Text</a> using UTF-8 encoding</p>
<p style="padding-left: 60px;"><a href="https://pymadcad.readthedocs.io/en/latest/algorithms/gearprofile.html">https://pymadcad.readthedocs.io/en/latest/algorithms/gearprofile.html</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/jimy-byerley/uimadcad">https://github.com/jimy-byerley/uimadcad</a> (<a href="https://github.com/mdecycu/uimadcad">https://github.com/mdecycu/uimadcad</a>)</p>
<p style="padding-left: 60px;">.ply io.read and io.write - <a href="https://github.com/dranjan/python-plyfile">https://github.com/dranjan/python-plyfile</a> (<a href="https://github.com/mdecycu/python-plyfile">https://github.com/mdecycu/python-plyfile</a>)</p>
<p style="padding-left: 60px;">.stl io.read and io.write - <a href="https://github.com/WoLpH/numpy-stl">https://github.com/WoLpH/numpy-stl</a> (<a href="https://github.com/mdecycu/numpy-stl">https://github.com/mdecycu/numpy-stl</a>)</p>
<p style="padding-left: 60px;">.obj io.read and io.write - <a href="https://github.com/pywavefront/PyWavefront">https://github.com/pywavefront/PyWavefront</a> (<a href="https://github.com/mdecycu/PyWavefront">https://github.com/mdecycu/PyWavefront</a>)</p>
<p style="padding-left: 60px;">系統先安裝 <a href="https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/">https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/</a></p>
<p style="padding-left: 60px;">重新開機後, 啟動可攜程式系統, 利用 pip install pymadcad numpy numpy-stl plyfile pywavefront uimadcad</p>
<p style="padding-left: 60px;">git clone <a href="https://github.com/mdecycu/pymadcad.git">https://github.com/mdecycu/pymadcad.git</a></p>
<p style="padding-left: 60px;">利用可攜系統中的 SciTE 開啟 examples 目錄中的 axis-holder.py 修改 write() 如下後, 利用 Tools - Go 執行.</p>
<p style="padding-left: 60px;">啟動 uimadcad: python -m uimadcad</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from madcad import *

# define a base of vectors: origin and directions
O = vec3(0,0,0)
X = vec3(1,0,0)
Y = vec3(0,1,0)
Z = vec3(0,0,1)

# part parameters
dint = 20
dext = 100
h = 30
rvis = dext/3
dvis = 3
hvis = 3


# create the revolution profile, called 'cone'
# --------------------------------------------

B = vec3(dint/2, 0, 0)
S = vec3(dint/2, 0, h)
E = vec3(dext/2, 0, 0)
Eh = E+2*Z
Se = S+5*X
# sketch a profile
line = [
	Segment(B,S),
	ArcCentered(((Se+S)/2, Y), S, Se),
	Segment(Se, Eh),
	Segment(Eh, E),
	Segment(E, B),
	]
# mutate the profile to fit some geometrical constraints
solve([
		Tangent(line[0], line[1], S),
		Tangent(line[1], line[2], Se),
		Radius(line[1], 5),
		Distance(E, Eh, 10),
		OnPlane((O,Y), [B,S,E,Eh,Se]),
		],
	fixed=[O,X,Y,Z,B,S,E],
	precision=1e-12
	)
# generate the cone
cone = revolution(
			radians(360), 
			(O,Z), 
			web(line))
# merge the start and end sections of the revolution (because its a 360° revolution)
cone.mergeclose()
# chamfer the lower edge: this is a chamfer over a circular edge
chamfer(cone, cone.frontiers((0,4)), ('depth', 3))



# create the slots for screws
# ---------------------------
# we remove a partially defined volume

rplace = dvis*3+2
C = vec3(rvis,0,hvis)
A = vec3(rvis, rplace,hvis)
B = vec3(rvis,-rplace,hvis)
Ae = A+vec3(dext/2, 60,0)
Be = B+vec3(dext/2,-60,0)
# sketch its line
line = [
	Segment(Ae, A),
	ArcCentered((C,Z), A, B),
	Segment(B, Be),
	]
solve([
		Tangent(line[0], line[1], A),
		Tangent(line[2], line[1], B),
		Radius(line[1], 3*dvis),
		Distance(Ae, O, dext),
		Distance(Be, O, dext),
		Angle(Segment(Ae,A), Segment(Be,B), radians(60)),
		OnPlane((C,Z), [A,B,Ae,Be]),
		],
	fixed=[O,X,Y,Z,C],
	precision=1e-12,
	)
# extrude that base line and add a bottom face
place = (	extrusion(vec3(0,0,h), line) 
		+	flatsurface(wire(line).flip())
		)
# merge outlines of both generated faces
place.mergeclose()
# round the cutting edge to have smooth transition
bevel(
	place, 	
	(   place.frontiers(0,3) 	# this is the frontier line between group 0 and group 3
	  + place.frontiers(1,3) 	# this is the frontier line between group 1 and group 3
	  + place.frontiers(2,3) ), 
	('depth', 2))

# make the screw holes:
# a cylinder (not necessarily closed on its ends as we don't care of that surfaces)
vis = extrusion(vec3(0,0,-2*h), web(Circle((C+vec3(0,0,h),-Z), dvis)))


# assemble everything
# -------------------
# get 6 shapes with the slot and the hole for the scren
big = repeat(
		union(place, vis), 	# this union cuts the slot to add the hole
		6, rotatearound(radians(60), (O,Z)))
# cut the cone to put the slots and holes
part = difference(cone, big)
# this is the final touch for parts: optimize the buffers and check mesh validity
part.finish()




# if we want we can at any moment place some fancy notes
notes = [
	note_leading(part.group(2), text="conic surface"),
	note_leading(part.group(11), vec3(-5,0,-10), text='ø'+str(dvis)),
	]

# write the part to a ply file
#write(part, 'tests/axis-holder.ply')
with open('tests/axis-holder.ply', 'w') as f:
    f.write(str(part))

# display what we want
show([part, notes])
</pre>
<p>pymatcad solid read and write to stl, obj and ply:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from madcad import *
s = screw(10, 20) # s is a `Solid`
# Write
io.write(s["part"], "screw.stl")
# Read
read_mesh = io.read("screw.stl")
read_mesh.mergeclose()
show([read_mesh])</pre>
<h4>Solvespace</h4>
<p>SolveSpace 所提供的主要功能:</p>
<p>1. 2D 草圖設計:<br/> - 繪製基本 2D 形狀(線、矩形、圓等)<br/> - 添加約束(長度、距離、角度等)<br/> - 完全參數化設計</p>
<p>2. 3D 實體建模:<br/> - 通過擠出、旋轉等方式從 2D 草圖生成 3D 實體<br/> - 支持 3D 實體的布林運算(並集、差集、交集)<br/> - 提供渲染和陰影視覺效果</p>
<p>3. 參數化和約束求解:<br/> - 可添加各種幾何和代數約束<br/> - 支持尺寸驅動設計<br/> - 自動求解過約束或過約定系統</p>
<p>4. 分析工具:<br/> - 質量屬性分析(體積、表面積、質心等)<br/> - 公差分析<br/> - 運動學模擬(僅限簡單機構)</p>
<p>5. 輔助建模工具:<br/> - 添加工程參考幾何(平面、軸線等)<br/> - 支持配置不同的草圖視圖和投影視圖</p>
<p>6. 開發者擴展性:<br/> - 開源代碼,支持定製化擴展<br/> - 可通過 C++、Python 等語言擴充功能</p>
<p>7. 操作界面:<br/> - 傳統的圖形用戶界面<br/> - 支持鍵盤快捷鍵和命令行輸入</p>
<p>8. 導入導出格式:<br/> - 支持導入/導出 STEP、STL、DXF 等 CAD 文件格式<br/> - 可嵌入網頁或其他應用程序</p>
<h4>Onshape</h4>
<p>Onshape 是一款基於雲端的3D CAD軟體,它提供了許多功能來協助設計和工程工作。Onshape 作為全功能的雲端CAD工具,提供了建模、協作、分析、數據管理等全面的功能,適合用於產品設計、工程項目等領域。</p>
<p>以下是 Onshape 提供的主要功能:</p>
<p>1. 全功能3D參數式建模工具:</p>
<p style="padding-left: 30px;">- 實體和曲面建模<br/> - 參數化和約束幾何體<br/> - 自動生成製造製圖<br/> - 直覺式草圖工具</p>
<p>2. 直接編輯功能:</p>
<p style="padding-left: 30px;">- 不需要返回設計樹狀結構<br/> - 可以直接編輯和修改現有幾何體</p>
<p>3. 版本控制和分支:</p>
<p style="padding-left: 30px;">- 類似 Git 的版本控制系統<br/> - 可以創建分支和合併分支<br/> - 方便協作和跟踪修改歷史</p>
<p>4. 數據管理和整合:</p>
<p style="padding-left: 30px;">- 整合PDM/PLM系統<br/> - 材料庫和標準件庫<br/> - Onshape App Store 提供各種插件</p>
<p>5. 實時協作和評註:</p>
<p style="padding-left: 30px;">- 多人同時編輯同一個文件<br/> - 添加評註和討論設計細節</p>
<p>6. 模擬和分析工具:</p>
<p style="padding-left: 30px;">- 有限元分析(FEA)<br/> - 運動學模擬<br/> - 碰撞檢測</p>
<p>7. 雲端計算和存儲:</p>
<p style="padding-left: 30px;">- 無需安裝軟體<br/> - 所有設計都存儲在雲端<br/> - 可隨時隨地訪問</p>
<p>8. 開放API和集成:</p>
<p style="padding-left: 30px;">- 可與其他軟體系統集成<br/> - 提供API進行自動化和定製</p>
<h2>Q_AI</h2>
<p>Questions for AI</p>
<p data-pm-slice="0 0 []">請問 Solvespace 程式的編寫用到那些理論?</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">From Claude.ai:</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">SolveSpace 主要運用以下幾個理論領域:<br/><br/>1. 幾何約束求解理論:<br/>- 使用符號代數方法處理幾何約束系統<br/>- 應用數值優化方法求解非線性方程組<br/>- 採用 DOF (自由度)分析來判斷約束是否充分<br/><br/>2. 計算幾何學:<br/>- 向量和矩陣運算<br/>- 三維空間中的線段、曲線、曲面表示<br/>- 布林運算(Boolean operations)的實現<br/>- NURBS 曲線和曲面的數學表示<br/><br/>3. 圖形學理論:<br/>- OpenGL 渲染管線<br/>- 光照模型<br/>- 視圖變換<br/>- 深度測試<br/><br/>4. 數值計算方法:<br/>- Newton-Raphson 迭代法求解非線性方程<br/>- QR 分解等矩陣運算<br/>- 數值積分和微分<br/><br/>5. 參數化建模理論:<br/>- 特徵建模(Feature-based modeling)<br/>- 歷史樹(History tree)結構<br/>- 參數關聯性管理</p>
<p data-pm-slice="1 1 []" style="padding-left: 30px;">能分別列出幾本重要的參考書嗎?<br/><br/>1. 幾何約束求解理論:<br/>- "<a href="https://link.springer.com/book/10.1007/978-3-642-58898-3">Geometric Constraint Solving and Applications</a>" by Beat Brüderlin &amp; Dieter Roller<br/>- "<a href="https://www.google.com.tw/books/edition/Solving_Geometric_Constraint_Systems/TxRPYdYqIT0C?gbpv=1">Geometric Constraint Solving</a>" by Glenn A. Kramer (<a href="https://cdn.aaai.org/AAAI/1990/AAAI90-106.pdf">Solving Geometric Constraints</a>)<br/>- "Engineering Design with SolidWorks" by David C. Planchard (包含約束系統的實務應用)<br/><br/>2. 計算幾何學:<br/>- "<a href="https://link.springer.com/book/10.1007/978-3-540-77974-2">Computational Geometry: Algorithms and Applications</a>" by Mark de Berg et al.<br/>- "NURBS: From Projective Geometry to Practical Use" by Gerald Farin (<a href="https://link.springer.com/book/10.1007/978-3-642-59223-2">The NURBS Book</a>)<br/>- "<a href="https://www.geometrictools.com/Books/GeometricTools/AboutTheBook.html">Geometric Tools for Computer Graphics</a>" by Philip Schneider &amp; David H. Eberly<br/><br/>3. 圖形學理論:<br/>- "Computer Graphics: Principles and Practice" by John F. Hughes et al.<br/>- "OpenGL Programming Guide" (俗稱紅皮書)<br/>- "Real-Time Rendering" by Tomas Akenine-Möller et al.<br/><br/>4. 數值計算方法:<br/>- "Numerical Recipes: The Art of Scientific Computing" by William H. Press et al.<br/>- "Matrix Computations" by Gene H. Golub &amp; Charles F. Van Loan<br/>- "Applied Numerical Linear Algebra" by James W. Demmel<br/><br/>5. 參數化建模理論:<br/>- "Parametric and Feature-Based CAD/CAM" by Jami J. Shah &amp; Martti Mäntylä<br/>- "Product Design Modeling using CAD/CAE" by Kuang-Hua Chang<br/>- "Feature-Based Product Life-Cycle Modelling" by Jos van den Berg et al.<br/><br/></p>
<p data-pm-slice="1 1 []" style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/979-8-8688-0149-5">Beginning C</a></p>
<p data-pm-slice="1 1 []" style="padding-left: 30px;"><a href="https://link.springer.com/content/pdf/10.1007/978-1-4842-9343-0.pdf">Beginning C++23</a></p>
<h2>NX</h2>
<p>NX2312 設定:</p>
<p>Journal 程式語言選定: File - Preferences - User Interface - Tools - Journal</p>
<p style="padding-left: 30px;">可選擇的程式語言, 包括 C#、C++、Java、Python 與 Visual Basic 等.</p>
<p>Journal 程式執行或錄製選擇: Menu - Tools - Automation - Journal</p>
<p style="padding-left: 30px;">可選擇: Play、Record、Edit 與 Insert 等.</p>
<hr/>
<p><a href="http://229.cycu.org/nx2306_tutorial_video.7z">NX Tutorial</a></p>
<p>西門子NX的發展歷程可以追溯至 1969 年, 當時麥道公司成立了自動化部門 McAuto, 開始發展內部 CAD/CAM系統CADD。CADD 最初運行於 IBM 360/40 電腦上,並使用 IBM 2250 圖形顯示終端機。</p>
<p class="whitespace-pre-wrap break-words">1976年, McAuto 收購了 United Computing, 獲得該公司開發的互動式 CAD 系統 Unigraphics。Unigraphics 最初運行於通用自動化 SPC-16 小型機上, 並使用 Tektronix 顯示終端機。</p>
<p class="whitespace-pre-wrap break-words">1982年, McAuto 開始開發新一代 Unigraphics II, 目標是打造更強大的三維設計、繪圖和 NC 加工系統。Unigraphics II 1.0 版於 1983 年發布,首次支援圖形著色。</p>
<p class="whitespace-pre-wrap break-words">1985年, 麥道公司將 McAuto 重組為 McDonnell Douglas Information Systems Company, Unigraphics 歸入其中。</p>
<p class="whitespace-pre-wrap break-words">1988年, 麥道公司收購 Shape Data, 獲得其開發的 Parasolid 幾何造型核心。</p>
<p class="whitespace-pre-wrap break-words">1989年, Unigraphics 7.0 版發布, 首次支援 Parasolid 造型核心。</p>
<p class="whitespace-pre-wrap break-words">1991年, 電子資料系統公司收購 MISCO, Unigraphics 成為 EDS 的一部門, 更名為 EDS Unigraphics。</p>
<p class="whitespace-pre-wrap break-words">1992年, Unigraphics 10.0 版發布, 強調參數化設計和三維造型。</p>
<p class="whitespace-pre-wrap break-words">1996年, Unigraphics 12.0 版發布, 首次支援 Windows NT 平台, 並加入 UG Scenario 分析軟體。</p>
<p class="whitespace-pre-wrap break-words">1997年, Unigraphics 13.0 版發布, 引入 WAVE 技術, 提高設計效率。</p>
<p class="whitespace-pre-wrap break-words">1998年, EDS 成立 Unigraphics Solutions, 完成對 Intergraph 機械部門的收購, 合併 Solid Edge 產品線。</p>
<p class="whitespace-pre-wrap break-words">1999年, UGS 發布 Unigraphics 16.0 版, 強調基於網路的協同設計。</p>
<p class="whitespace-pre-wrap break-words">2000年, EDS 將 UGS 拆分為獨立公司並上市。UGS 發布 Unigraphics 17.0 版, 首次支援 JT 數據交換格式。</p>
<p class="whitespace-pre-wrap break-words">2001年, EDS 收購 SDRC, UGS 成為 EDS PLM Solutions 的一部分, 更名為 EDS PLM Solutions。</p>
<p class="whitespace-pre-wrap break-words">2002年, UGS PLM Solutions 發布 NX 1.0 版, 旨在整合 Unigraphics 和 I-DEAS。</p>
<p class="whitespace-pre-wrap break-words">2003年, UGS PLM Solutions 發布 NX 2.0 版, 改進使用者介面和知識庫設計。</p>
<p class="whitespace-pre-wrap break-words">2004年, UGS 被 Bain Capital、Silver Lake Partners 和 Warburg Pincus 等三家私募股權公司收購,更名為 UGS Corporation。同年發布 NX 3.0 版, 實現 Unigraphics 和 I-DEAS 的整合。</p>
<p class="whitespace-pre-wrap break-words">2007年, 西門子公司收購 UGS Corporation, 更名為 Siemens PLM Software, NX 成為其旗艦產品。同年發布NX 5.0 版, 進一步最佳化使用者介面和模型編輯功能。</p>
<p class="whitespace-pre-wrap break-words">2007年之後的版本請參考: <a href="https://en.wikipedia.org/wiki/Siemens_NX">https://en.wikipedia.org/wiki/Siemens_NX</a> </p>
<p class="whitespace-pre-wrap break-words"><a href="https://github.com/mdecycu/nxlab">https://github.com/mdecycu/nxlab</a> </p>
<p class="whitespace-pre-wrap break-words"><a href="https://github.com/me5763">https://github.com/me5763</a> </p>
<hr/>
<p>NX2312 需要 Windows 操作系統帶有 Windows Desktop Runtime 6.0.16.</p>
<p>NX2312 client 連線到認證主機設定採 29000 時, client 端需要讓防火牆可以對 29000 與 29001 port 連外, 至於 server 端則需要讓防火牆可以對 29000 與 29001 port 連入.</p>
<p>NX2312 與 NX2406 已經不再使用 VENDOR ugslmg 執行認證, 也就是不再需要 ugslmg.exe, 而是採用 Siemens Advanced Licensing Technology Daemon (<a href="https://support.sw.siemens.com/en-US/okba/PL8777155/About-Siemens-Advanced-Licensing-Technology-SALT-and-Siemens-License-Server-SLS/index.html">SALTD</a>), 並且透過 Mentor Standard Licensing (MSL) - (mgcld) utility 進行使用授權認證, license file 設定更動如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">SERVER 伺服器名稱 COMPOSITE=對應的編碼 29000
VENDOR saltd saltd PORT=29001</pre>
<p>完整的 NX2312 總共有超過 11 萬個檔案, 總容量超過 33 GB.</p>
<p>開啟 NX - NX2312\NXBIN\ugraf.exe -nx</p>
<p>開啟 NX 2D Edit - NX2312\NXBIN\nx2dedit.exe</p>
<p>開啟 NX Layout - NX2312\NXBIN\ugraf.exe -layout</p>
<p>開啟 NX Viewer - NX2312\NXBIN\ugraf.exe -view</p>
<p>開啟 Simcenter 3D - NX2312\NXBIN\simcenter3d.exe</p>
<p>開啟 Sincenter 3D Results ㄒiewer - NX2312\NXBIN\simcenter3d.exe -simviewer</p>
<p>開啟 Simens Mechatronics Concept Designer - NX2312\NXBIN\ugraf.exe -mechatronics</p>
<p>開啟 NX Manufacturing - NX CAM - NX2312\NXBIN\ugraf.exe -nxcam</p>
<p><a href="http://wcm.cycu.org:88/nx3doc/">NX3 Help Library</a> (for internal IPv6 users only)</p>
<p><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.xid1851843/xid1851946">NX2312 DOC</a> (英文)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.menuscript/menuscript_xml_title_page">MenuScript</a></p>
<p><a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20230425446868577.xid1851843/xid1851946">NX2312 DOC</a> (中文)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20230425446868577.xid1849545/xid1849546">草圖</a> (Sketch)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20230425446868577.modeling/xid1852129">建模</a> (Modeling)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20230425446868577.xid851385/xid821812">創意塑型</a> (Realize Shape)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20230425446868577.assemblies/assem_intro">組立</a> (Assembly)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20230425446868577.xid2204268/xid2133740">效能預測器</a> (Performance Predictor)</p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/en-US/doc/289054037/PL20230419932494371.design/id636456">Design Simulation</a></p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/en-US/doc/289054037/PL20230419932494371.xid1853788/xid1853789">Simcenter 3D</a> (<a href="https://www.sciencedirect.com/book/9781569907122/simulations-with-nx-simcenter-3d">Simulation with NX / Simcenter 3D</a> or <a href="http://229.cycu.org/Simulations_with_NX_Simcenter_3D.zip">local download</a>)</p>
<h3>Ebooks</h3>
<p><a href="https://www.sciencedirect.com/book/9780128211021/mechanical-design">Mechanical Design</a> or <a href="http://229.cycu.org/Mechanical_Design.zip">local download</a></p>
<p><a href="/get_page/NX/Mechanical Design Engineering Handbook">Mechanical Design Engineering Handbook</a> or <a href="http://229.cycu.org/Mechanical_Design_Engineering_Handbook.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780124713703/mechanical-engineers-handbook">Mechanical Engineer's Handbook</a> or <a href="http://229.cycu.org/Mechanical_Engineers_Handbook.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780123985132/product-design-modeling-using-cad-cae">Product Design Modeling using CAD/CAE</a> or <a href="http://229.cycu.org/Product_design_modeling_using_CAD_CAE.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780340645710/advanced-engineering-dynamics">Advanced Engineering Dynamics</a> or <a href="http://229.cycu.org/Advanced_engineering_dynamics.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780750651318/advanced-vehicle-technology">Advanced Vehicle Technology</a> or <a href="http://229.cycu.org/Advanced_Vehicle_Technology.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780128127506/vehicle-collision-dynamics">Vehicle Collision Dynamics</a> or <a href="http://229.cycu.org/Vehicle_collision_dynamics.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780124058750/linear-feedback-controls">Linear Feedback Controls</a> or <a href="http://229.cycu.org/Linear_feedback_controls.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780750663793/mechatronics">Mechatronics</a> or <a href="http://229.cycu.org/Mechatronics.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780128138106/sensors-for-mechatronics">Sensors for Mechatronics</a> or <a href="http://229.cycu.org/Sensors_for_mechatronics.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780750642347/analog-circuits-cookbook">Analog Circuits Design</a> or <a href="http://229.cycu.org/Analog_Circuits_Cookbook.zip">local download</a></p>
<p><a href="https://www.sciencedirect.com/book/9780128116487/op-amps-for-everyone">Op Amps for Everyone</a> or <a href="http://229.cycu.org/Op_Amps_for_Everyone.zip">local download</a></p>
<p><a href="https://www.youtube.com/watch?v=J1I6fDGjKBA&amp;list=PLvjX0x1uNNLFLiRzEdnpgBjPmUhgo7Zas">NX CAD Tutorial</a></p>
<p><a href="https://www.youtube.com/watch?v=jYmcd9Id48o">NX Surface Tutorial</a></p>
<h3>NX3</h3>
<p><a href="http://229.cycu.org/NX3_for_cad2024.7z">下載</a> NX3 可攜 CAD/CAE 壓縮檔案 (196 MB, 解開壓縮後約 761 MB)</p>
<p>NX3 尚無 NXOpen Python 延伸程式開發架構, 僅能以 Visual Basic、C 或 C++ 執行開發.</p>
<p><a href="http://wcm.cycu.org:88/nx3doc/">NX3 Help Library</a><span> (for internal IPv6 users only)</span></p>
<p>UGOpen C 程式架構請參考<span> </span><a href="http://wcm.cycu.org:88/github/cd2022_guide/downloads/nxopen/UG_Open-API_Programming.pdf">UG_Open-API_Programming.pdf</a></p>
<p>UGOpen 技術文件請參考:</p>
<p><a href="http://wcm.cycu.org:88/nx3doc/apiprog/index.htm">Open C Programmer's Guide</a><span> </span>(for internal IPv6 users only)</p>
<p><a href="http://wcm.cycu.org:88/nx3doc/ugopen_doc/main.html">Open C Reference Manual</a><span> </span>(for internal IPv6 users only)</p>
<h3>NX12</h3>
<p>File - Utilities - Customer Defaults - General - Miscellaneous</p>
<p>Product Excellence Program -  turn off the Participate and Display initial Message</p>
<hr/>
<p><span>NX12 NXOpen Python 動態連結程式庫採用 Python 3.6.5 版本編譯.</span></p>
<p><span><a href="http://229.cycu.org/NX12_CAD_portable.7z">下載</a> NX12_CAD_portable.7z (947 MB, 解開壓縮後約 4.7 GB)</span></p>
<h3>NX1872</h3>
<h4>可攜 NX1872 製作:</h4>
<p><a href="/downloads/nx1872_from_installed_to_portable_batch_setup.7z">nx1872_from_installed_to_portable_batch_setup.7z</a> 中的檔案可以說明如何將 NX1872 安裝版轉為可攜啟動的設定過程. 從安裝版啟動後的 Menu - Help - Log File 可以取得系統系統過程的所有細節, 其中包括各對應 .bat 執行過程所設定的環境變數, 以及所啟動的 .dll 檔案.</p>
<p>上列 .7z 檔案即包括從此 Log File 中的環境變數註記, 經過 Python 程式轉為 .bat 設定外, 還利用 %cd% 取代原先安裝版本的 C:\NX1872, 並且以 %USERNAME% 取代安裝時的使用者 pj2022, 之後只要再納入 NX1872 的認證伺服器與所購買的 bundles, 就可以將安裝版 NX1872 轉為可存入 USB 隨身碟的可攜版本.</p>
<p><span>NX1872 NXOpen Python 動態連結程式庫採用 Python</span><span> 3.7.1 版本編譯</span><span>.</span></p>
<p>下載 <a href="http://229.cycu.org/NX1872_CAD_portable.7z">NX1872_CAD_portable.7z</a> (1151 MB, 解開壓縮後約 5.2 GB)</p>
<p>To edit the settings of the active sketch, use Settings in the Edit menu: 例如要關閉 Continuous Auto Dimensioning 則需在 Sketch 編輯中的 Settings 中進行設定.</p>
<h3>NX1980</h3>
<p><span>NX1980 NXOpen Python 動態連結程式庫採用 Python 3.8.8 版本編譯.</span></p>
<p><a href="http://229.cycu.org/NX1980_CAD_portable.7z">下載</a>可攜 NX1980 CAD 壓縮檔案 (解開壓縮後約 6457 MB)</p>
<h3>NX2008</h3>
<p><span>NX2008 NXOpen Python 動態連結程式庫採用 Python 3.8.12 版本編譯.</span></p>
<p><a href="http://229.cycu.org/NX2008_CAD_portable.7z">下載</a>可攜 NX2008 CAD 壓縮檔案 (1410 MB, 解開壓縮後約 6457 MB)</p>
<h3>NX2312</h3>
<p><span>NX2312 NXOpen Python 動態連結程式庫採用 Python</span><span> 3.10.12 版本編譯</span><span>.</span></p>
<p><span><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.nxopen_prog_guide/purpose">NXOpen Programmer's Guide</a></span></p>
<p><span><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.custom_api.nxopen_python_ref">NXOpen Python Reference Guide 2312</a></span></p>
<p><span><a href="http://229.cycu.org/NX2312_CAD.7z">下載</a> NX2312 可攜 CAD 壓縮檔案 (1.85 GB, 解開後約 9 GB)</span></p>
<p style="padding-left: 30px;"><span><a href="http://229.cycu.org/nx2312_Drafting.7z">nx2312_Drafting.7z</a></span></p>
<p style="padding-left: 30px;"><span><a href="http://229.cycu.org/nx2312_nxplot.7z">nx2312_nxplot.7z</a></span></p>
<p><span>Download <strong>SiemensNX-2312.4001_wntx64.zip</strong> (14GB)</span></p>
<p>NX2312 安裝後, 透過 Local_Machine - Software - Siemens 登錄檔案儲存下列資料, 其中包括認證主機的埠號與 IP:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\Siemens]

[HKEY_LOCAL_MACHINE\SOFTWARE\Siemens\Installed Products]
"NX 2312"="[{\"ProductCode\":\"{BC25F476-AA6E-41ED-BBA3-F7CA7DE8EB92}\",\"ChannelType\":\"Main\"}]"

[HKEY_LOCAL_MACHINE\SOFTWARE\Siemens\NX 2312]
@="D:\\NX2312\\"
"NXOPEN_EXTENSIONS"=""
"NXOPEN_INSTALL"="YES"
"INSTALLDIR"="D:\\NX2312\\"
"LANGUAGE"="english"
"LICENSESERVER"="29000@your_license_server"
"UGII_BASE_DIR"="D:\\NX2312"</pre>
<hr/>
<p>透過 <a href="/downloads/get_file_size_python.txt">get_dir_size.py</a> 可以取得 Siemens NX 各子目錄與總容量.</p>
<p class="whitespace-pre-wrap break-words">各目錄的功能:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">AUTOMATION_DESIGNER: 自動化設計工具, 用於創建和管理自動化系統。
CAPITALINTEGRATION: 與 Siemens Capital 軟件集成,用於電氣系統設計。
CATIAV5: CATIA V5 文件的轉換器和介面。
CMM_INSPECTION: 座標測量機(CMM)檢測功能。
DESIGN_TOOLS: 各種輔助設計工具和功能。
DIAGRAMCORE: 圖表和示意圖的核心功能。
DIAGRAMMING: 用於創建各種工程和系統圖表。
DRAFTING: 2D製圖和文檔創建工具。
IGES: 初始圖形交換規範(IGES)文件的導入/導出。
INSTALL: 安裝相關文件和腳本。
LOCALIZATION: 多語言支持和本地化文件。
MACH: 工具機加工和 CNC 編程功能。
MANUFACTURING_PLANNING: 製造規劃和工藝設計工具。
MECH: 機械設計和工程功能。
MECHATRONICS: 機電整合設計工具。
MOLDWIZARD: 模具設計和分析工具。
MPA: 運動模擬和分析功能。
NXASSEMBLY: 零件裝配和管理工具。
NXBIN: NX 的核心檔案和執行檔。
NXCAE_EXTRAS: 額外的電腦輔助工程(CAE)工具和功能。
NXHUMAN: 人體工程學和人因工程設計工具。
NXJOIN: 零件連接和焊接功能。
NXNASTRAN: 有限元素分析(FEA)求解器。
NXPARTS: 零件設計和模擬工具。
NXPLOT: 繪圖和可視化工具。
NXPROE: Pro/ENGINEER 文件的轉換器和介面。
NXREPORTS: 報告生成和管理工具。
NXSHIP: 船舶設計專用工具。
POSTBUILD: 後處理和結果分析工具。
PSTUDIO: 產品工作室, 用於產品設計和管理。
PVTRANS: 產品視覺化轉換工具。
REL_INFO: 發布資訊和檔案。
SIMULATION: 各種模擬和分析工具。
STAMPING_TOOLS: 沖壓工具設計功能。
STEP203UG 和 STEP214UG: STEP 文件格式的導入/導出。
TDP: Technical Data Package 創建和管理工具。
Temp 和 temp_module: 臨時文件存儲目錄。
TOOLING_BASE: 工具設計的基礎功能。
TRANSLATORS: 各種文件格式轉換器。
UGALLIANCE: 與其他 CAD 系統的集成工具。
UGAUTOMOTIVE: 汽車行業專用設計工具。
UGCATIA: CATIA文件的轉換器和介面。
UGFLEXLM: FlexLM許可證管理系統。
UGFPCD: 印刷電路板(PCB)設計工具。
UGII: NX 用戶界面和基礎功能。
UGIMW: 整合材料管理工作台。
UGMANAGER: 文件和專案管理工具。
UGOPEN: 開發模組和API。
UGOPENPP: C++ 開發模組。
UGPCBXCHANGE: PCB數據交換工具。
UGPHOTO: 高級著色和視覺工具。
UGSTRUCTURES: 結構分析和設計工具。
UGSTUDIO: 產品設計工作室。
UGTIPS: 用戶提示和幫助文件。
UGTO2D: 3D到2D轉換工具。
UGWEB: Web 整合和協同工具。
UGWELD: 焊接設計和分析工具。
UNFOLD: 鈑金展開工具。</pre>
<h4>NX2312 完整版各目錄容量:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">ACOUSTICS : 1.28 GB
AM_SIMULATION : 67.7 MB
AUTOMATED_TESTING : 3.19 MB
AUTOMATIC_UPDATE : 541.0 B
AUTOMATION_DESIGNER : 336.83 MB
CAPITALINTEGRATION : 2.04 MB
CATIAV5 : 901.76 KB
CLOUDDM : 13.18 KB
CMM_INSPECTION : 319.18 MB
COMPOSITES : 54.18 KB
DESIGNSPACEEXPLORER : 8.04 KB
DESIGN_TOOLS : 135.75 MB
DIAGRAMCORE : 5.81 MB
DIAGRAMMING : 118.67 MB
DOCUMENT : 666.71 KB
DRAFTING : 115.44 MB
DXFDWG : 197.04 MB
FABRICMODELER : 5.03 KB
GCTOOLKIT : 230.19 MB
IGES : 5.47 MB
IMMERSIVEEXPERIENCE : 1016.81 MB
INSTALL : 55.39 KB
LOCALIZATION : 94.3 KB
MACH : 2.41 GB
MANUFACTURING_PLANNING : 160.74 MB
MBD : 67.83 MB
MECH : 871.99 MB
MECHATRONICS : 278.23 MB
MENDIXREPORTING : 1.05 MB
MOLDCOOLING : 12.37 KB
MOLDWIZARD : 236.79 MB
MPA : 1.48 MB
NX2DEDIT : 1.25 MB
NXAECDESIGN : 70.86 MB
NXASSEMBLY : 91.5 MB
NXBIN : 6.47 GB
NXCABLEROUTER : 29.51 KB
NXCAE_EXTRAS : 4.55 GB
NXCOATINGS : 632.24 KB
NXCREO : 5.71 MB
NXHUMAN : 247.74 MB
NXJOIN : 24.34 MB
NXNASTRAN : 3.23 GB
NXPARTS : 64.96 MB
NXPLOT : 246.92 MB
NXREPORTS : 3.66 MB
NXSHIP : 339.88 MB
NXSTRUCTUREDESIGN : 119.29 MB
NXVR : 534.04 MB
NX_VSA : 12.73 MB
PARTMFG : 32.08 MB
PLASTIC_DESIGNER : 6.49 MB
POSTBUILD : 35.08 MB
PSTUDIO : 35.5 MB
PVTRANS : 106.92 KB
REL_INFO : 36.92 KB
ROUTING : 433.54 MB
RULE : 306.25 KB
SAFETY : 24.39 KB
SIMULATION : 2.68 GB
STAGE_MODEL : 4.06 MB
STAMPING_TOOLS : 163.08 MB
STEP203UG : 1.44 MB
STEP214UG : 1.44 MB
TDP : 219.56 MB
TOOLING_BASE : 254.04 KB
TRANSLATORS : 150.1 MB
UGALLIANCE : 89.19 KB
UGAUTOMOTIVE : 147.22 MB
UGCATIA : 6.04 MB
UGFLEXLM : 30.28 MB
UGFPCD : 31.89 KB
UGII : 550.7 MB
UGIMW : 8.45 MB
UGMANAGER : 127.12 MB
UGOPEN : 530.1 MB
UGOPENPP : 692.91 KB
UGPCBX : 342.48 KB
UGPCBXCHANGE : 102.96 MB
UGPHOTO : 3.94 GB
UGSTRUCTURES : 346.62 MB
UGSTUDIO : 14.03 MB
UGTIPS : 56.22 MB
UGTO2D : 886.88 KB
UGWEB : 9.08 MB
UGWELD : 2.07 MB
UNFOLD : 71.92 KB
VDA : 26.31 KB
VDV : 5.34 MB
total: 33.32 GB</pre>
<h4>NX2312 各功能對應目錄:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Simcenter Nastran - NXNASTRAN
Simcenter 3D Acoustics - ACOUSTICS
Programming Tools - UGALIANCE UGOPEN UGOPENPP
Model Based Part Manufacturing - PARTMFG DOCUMENT DIAGRAMMING
Ship Building - NXSHIP NXCABLEROUTER
Greater China Tools - GCTOOLKIT
Automated Testing Studio - AUTOMATED_TESTING
Automotive - UGAUTOMOTIVE DESIGN_TOOLS STAMPING_TOOLS TOOLING_BASE UGWELD VDV VDA
Composites - COMPOSITES
Diagramming - DIAGRAMMING
Drafting - DRAFTING NX2DEDIT
Fabric Modeler - FABRICMODELER
Immersive - IMMERSIVEEXPERIENCE
Inductrial Electrical Design - AUTOMATION_DESIGNER
Manufacturing - MACH CMM_INSPECTION MBD NX_VSA POSTBUILD PSTUDIO STAGE_MODEL UNFOLD
Manufacturing Planning - MANUFACTURING_PLANNING
Mechatronics Concept Designer - MECHATRONICS
NX Reporting - MENDIXREPORTING
Optimization Tools - DESIGNSPACEEXPLORER
Molded Part Design - PLASTIC_DESIGNER
Routing - ROUTING CAPITALINTEGRATION
Simcenter 3D - COMPOSITES MECH MOLDCOOLING NXCAE_EXTRAS SAFETY SIMULATION UGSTRUCTURE UGPCBEXCHANGE UGPCBX UGFPCD
Studio Render - UGSTUDIO UGPHOTO
Tooling Design &amp; NX Joint - DESIGN_TOOLS MOLDWIZARD NXAECDESIGN NXCOATINGS NXJOIN NXREPORTS NXSTRUCTUREDESIGN STAMPING_TOOLS TOOLING_BASE UGAUTOMOTIVE UGWELD
Translators - CATIAV5 DXFDWG IGES NXCREO STEP203UG STEP214UG UGCATIA UGMW UGTO2D TRANSLATORS
Validation - DESIGN_TOOLS NXREPORTS MPA
NX VR - NXVR</pre>
<hr/>
<h3>NX2406</h3>
<p><span>NX2406 NXOpen Python 動態連結程式庫採用 Python</span><span> 3.10.12 版本編譯</span><span>.</span></p>
<p><span><a href="http://229.cycu.org/NX2406_CAD.7z">下載</a> NX2406 可攜 CAD 壓縮檔案 (1.76 GB, 解開後約 9 GB)</span></p>
<p>有關 NX on 2024.June:</p>
<p>NX2406 在 Windows 安裝需要 MS Windows Desktop Runtime 6.0.16 以上版本.</p>
<p>NX2406 安裝目錄與容量:</p>
<ol>
<li>NX Platform: 必要檔案容量 6953 MB, 若加上 Simcenter NASTRAN (4265 MB), Programming Tools (562 MB), Drafting (119MB), Optimization Tools (11 MB) and Translators (140 MB), Ugstructures (353 MB),  Ncae_extras (4120 MB), Simulation (2690 MB) 將是具備可攜基本 CAD/CAE 與延伸程式開發功能的 NX 套件, 容量約 20 GB.</li>
<li>Localizations: 若選擇 Traditional Chinese 介面, 目錄名稱 Localizations, 增加 107 MB, 但一般建議直接使用英文介面即可.</li>
<li>Simcenter Nastran: FE solver for simulation products, Mach stress and vibration wizards. 目錄名稱為 NASTRAN, 增加 4265 MB.</li>
<li>Simcenter 3D Acoustics: Acoustics BEM 與 Ray solvers, 目錄名稱 ACOUSTICS, 增加 1418 MB.</li>
<li>Programming Tools: Programming Interfaces, 目錄名稱 UGALLIANCE, UGOPEN, UGOPENPP, 增加 562 MB.</li>
<li>Model Based Part Manufacturing: 目錄名稱 PARTMFG, DOCUMENT, DIAGRAMMING, 增加 176 MB.</li>
<li>Additive Manufacturing Simulation: 目錄名稱 AM_SIMULATION, COMPOSITE, MACH, NXCAE_EXTRAS, SIMULATION, UGSSTRUCTURES, 增加 10 GB.</li>
<li>Ship Building: 目錄名稱 NXSHIP, NXCABLEROUTER, 增加 353 MB.</li>
<li>Greater China Tools: 目錄名稱 GCTOOLKIT, 增加 233 MB.</li>
<li>Automated Testing Studio: 目錄名稱 AUTOMATED_TESTING, 增加 4848 KB.</li>
<li>Automotive: 目錄名稱 UGAUTOMOTIVE, DESIGN_TOOLS, MOLDWIZARD, NXREPORTS, STAMPING_TOOLS, TOOLING_BASE, UGWELD, VDV, VDA, 增加 842 MB.</li>
<li>Composites: 目錄名稱 COMPOSITES, 增加 208 MB.</li>
<li>Digramming: 目錄名稱 DIAGRAMMING, 增加 135 MB.</li>
<li>Drafting: Extends 2D and 3D drawing tools, 目錄名稱 DRAFTING, NX2EDIT, 增加 119 MB.</li>
<li>Fabric Modeler: 目錄名稱 FABRICMODELER, 增加 2744 KB.</li>
<li>Immersive: 目錄名稱 IMMERSIVEEXPERIENCE, 增加 1056 MB.</li>
<li>Industrial Electrical Design: 目錄名稱 AUTOMATION_DESIGNER, <span>增加 404 MB.</span></li>
<li>Manufacturing: 目錄名稱 MACH, CMM_INSPECTION, MBD, NX_VSA, POSTBUILD, PSTUDIO, STAGE_MODEL, UNFOLD, 增加 3565 MB.</li>
<li>Manufacturing Planning: 目錄名稱 MANUFACTURING_PLANNING, 增加 449 MB.</li>
<li>Mechatronics Concept Designer: 目錄名稱 MECHATRONICS, 增加 332 MB.</li>
<li>NX Reporting: 目錄名稱 MENDIXREPORTING, 增加 1312 KB.</li>
<li>Optimization Tools: 目錄名稱 DESIGNSPACEEXPLORER, 增加 11 MB.</li>
<li>Molded Part Design: 目錄名稱 PLASTIC_DESIGNER, 增加 13 MB.</li>
<li>Routing: 目錄名稱 ROUTING, CAPITALINTEGRATION, 增加 467 MB.</li>
<li>Simcenter 3D: 目錄名稱 COMPOSITES, MECH, MOLDCOOLING, NXCAE_EXTRAS, SAFETY, SIMULATION, UGSTRUCTURES, UGPCBXCHANGE, UGPCBX, UGFPCB, 增加 9007 MB.</li>
<li>Studio Render: 目錄名稱 UGSTUDIO, UGPHOTO, 增加 4085 MB.</li>
<li>Tooling Desing and NX Join: 目錄名稱 DESIGN_TOOLS, MOLDWIZARD, NXAECDESIGN, NXCAATINGS, NXJOIN, NXREPORT, NXSTRUCTUREDESIGN, STAMPING_TOOLS, TOOLING_BASE, UGAUTOMOTIVE, UGWELD, 增加 1079 MB.</li>
<li>Translators: 目錄名稱 CATIAV5, DXFDWG, IGES, NXCREO, STEP203UG STEP214UG, UGCATIA, UGIMW, UGTO2D, TRANSLATORS, 增加 815 MB.</li>
<li>Validation: 目錄名稱 DESIGN_TOOLS, TOOLS_NXREPORTS, MPA, 增加 182 MB.</li>
</ol>
<hr/>
<p><a href="https://plm.sw.siemens.com/en-US/nx/best-cad-cam-software-industry-awards/">https://plm.sw.siemens.com/en-US/nx/best-cad-cam-software-industry-awards/</a> </p>
<p>NX X:</p>
<p>2024 <a href="https://www.engineering.com/siemens-announces-nx-x/">Siemens 推出 NX X</a>.</p>
<p><a href="https://resources.sw.siemens.com/en-US/video-introducing-nx-x-nx-as-a-saas-solution">https://resources.sw.siemens.com/en-US/video-introducing-nx-x-nx-as-a-saas-solution</a> </p>
<p><a href="https://plm.sw.siemens.com/en-US/nx/products/compare-nx-x-cad-bundles/">https://plm.sw.siemens.com/en-US/nx/products/compare-nx-x-cad-bundles/</a> </p>
<p><a href="https://blogs.sw.siemens.com/nx-manufacturing/whats-new-in-nx-for-manufacturing-june-2024/">https://blogs.sw.siemens.com/nx-manufacturing/whats-new-in-nx-for-manufacturing-june-2024/</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/bIw5nm5PON8?si=X6bwkxaNxM9d7XqR" title="YouTube video player" width="560"></iframe></p>
<p>NX2406 <a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20231101866122454.whatsnew/xid1851820">新增功能</a></p>
<p>NX2406 <a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20231101866122454.xid1851843/xid1851946">文件瀏覽</a></p>
<p>NX2406 <a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20231101866122454.xid1849545/xid1849546">草圖文件</a></p>
<p>NX2406 <a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20231101866122454.modeling/xid1852129">建模文件</a></p>
<p>NX2406 <a href="https://docs.sw.siemens.com/zh-TW/doc/209349590/PL20231101866122454.assemblies/assem_intro">組立文件</a></p>
<h3>NXOpen</h3>
<p>cad2024 最新整理的 <a href="/downloads/gear_c_NX2312.txt">gear_c_NX2312.txt</a></p>
<p><a href="/downloads/1_block_only_short_py.txt">1_block_only_short_py.txt</a></p>
<hr/>
<p><a href="https://github.com/mdecycu/nxopen">https://github.com/mdecycu/nxopen</a></p>
<p><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.xid1968491/xid2091711">Browse Programming Tools Help</a></p>
<p><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.nxopen_prog_guide/purpose">Overview of Programmer's Guide</a></p>
<p><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.apiprog/intro_intro_overview">Open C Programmer's Guide</a></p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.custom_api.ugopen_doc">Open C Reference Guide</a></p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/data/msys64_20240507.7z">msys64_20240507.7z</a> (183MB)</p>
<p><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.custom_api.nxopen_python_ref">NXOpen Python Reference Guide</a></p>
<p>若使用 NX2312, 其中需要設計並繪製減速機中的正齒輪組 (Spur Gear Train), 若採 UGOPEN C 編寫延伸程式, 可以利用 MSYS2 中的 gcc 進行編譯與連結:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">mkdir build
 
mkdir dist
 
REM compile gear.c
gcc.exe -c -g -IC:\nx2312_portable\data\nx2312\UGOPEN -MMD -MP -MF build/gear.o.d -o build/gear.o gear.c
 
REM link with libufun.lib and libugopenint.lib
gcc.exe -shared -o dist/gear.dll build/gear.o C:\nx2312_portable\data\nx2312\UGOPEN\libufun.lib C:\nx2312_portable\data\nx2312\UGOPEN\libugopenint.lib</pre>
<p>取得 gear.dll 後, 可開啟 new Model file 後, 以 File -&gt; Execute -&gt; NX Open 執行 gear.dll.</p>
<p>UGOpen C 程式架構請參考 <a href="http://wcm.cycu.org:88/github/cd2022_guide/downloads/nxopen/UG_Open-API_Programming.pdf">UG_Open-API_Programming.pdf</a></p>
<p>UGOpen 技術文件請參考:</p>
<p style="padding-left: 30px;"><a href="http://wcm.cycu.org:88/nx3doc/apiprog/index.htm">Open C Programmer's Guide</a> (for internal IPv6 users only)</p>
<p style="padding-left: 30px;"><a href="http://wcm.cycu.org:88/nx3doc/ugopen_doc/main.html">Open C Reference Manual</a> (for internal IPv6 users only)</p>
<p></p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_gear_design" height="630" muted="true" width="1008">
<source src="/downloads/nxopen_gear_design.mp4" type="video/mp4"/></video></div>
<div class="winkVideoContainerClass"><a href="/downloads/gear_model2.c.txt">gear_model2.c.txt</a></div>
<div class="winkVideoContainerClass"><a href="/downloads/uarm_gear_design_for_NX.zip">uarm_gear_design_for_NX.zip</a></div>
<div class="winkVideoContainerClass">using MSYS2 compile gear.c: <a href="/downloads/spur_gear_NXOpen_C_NX2312.7z">spur_gear_NXOpen_C_NX2312.7z</a></div>
<div class="winkVideoContainerClass"><a href="http://229.cycu.org/nxopen_ref.7z">NXOpen_ref.7z</a></div>
<h3>NXOpen_Python</h3>
<p><a href="/downloads/generate_cylinder_nx2312_py.txt">generate_cylinder_nx2312_py.txt</a></p>
<p><span><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.nxopen_prog_guide/purpose">NXOpen Programmer's Guide</a></span></p>
<p><span><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.custom_api.nxopen_python_ref">NXOpen Python Reference Guide 2312</a></span></p>
<p>NX2312 與 NX2406 必須配合 Python 3.10 使用 (以 Python 3.10.12 編譯 .pyd), 這裡利用 gen_python_for_nx2312.py 如下, 建立 Python310 備用 (由於 Python 3.10.12 可攜目錄無法使用下列程式建立, 因此退至 Python 3.10.11):</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import urllib.request
import os
    
dir_path = os.path.dirname(os.path.realpath(__file__))
# basic files for Python installation
# before 3.12.0
py_list = ["core", "dev", "exe", "lib", "tcltk", "tools"]
# 3.12.1 no tools.msi
#py_list = ["core", "dev", "exe", "lib", "tcltk"]
# Python version 3.10.11 for NX2312
version = "3.10.11"
# Python msi download URL
ftp = "https://www.python.org/ftp/python/" + version + "/amd64/"
# location for Portable Python
path = "y:\\tmp\\Python310"
# create directory
try:
    os.mkdir(path)
except:
    # path exists
    pass
# get Python installation msi files and extract into target dir
for i in py_list:
    filename = i + ".msi"
    url = ftp + filename
    # download basic python msi file
    urllib.request.urlretrieve(url, filename)
    os.system("msiexec.exe /a " + i + ".msi targetdir=" + path)
    # delete msi file
    os.remove(dir_path + "\\" + i + ".msi")
    os.remove(path + "\\" + i + ".msi")</pre>
<p>其中可攜程式系統啟動批次檔, 必須將 NX\NXbin\python 納入 PYTHONPATH 設定, 因為 NXOptn 相關的動態連結程式庫 *.pyd 都放在這個目錄.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">set PYTHONPATH=%Disk%:\Python310\DLLs;%Disk%:\Python310\Lib;%Disk%:\Python310\Lib\site-packages;%Disk%:\NX\NXBIN\python;</pre>
<p>在可攜啟動批次檔案中的 path 指令搜尋路徑之後, 讓 NX2312 取得使用授權後啟動:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">REM for NX2312, must after path setup 
set SPLM_LICENSE_SERVER=29000@192.168.56.3
set UGII_LANG=english
set UGS_LICENSE_BUNDLE=ACD11,ACD10
set UGII_BASE_DIR=%Disk%:\NX\
set UGII_TMP_DIR=%Disk%:\NX\temp
set UGII_LIB_PATH=%Disk%:\NX\NXBIN\python
set ugii=%Disk%:\NX\ugii;%Disk%:\NX\nxbin;
path = %ugii%;%path%
Xcopy %Disk%:\home_ipv6\AppData\Local\Siemens\NX2312 C:\users\%USERNAME%\AppData\Local\Siemens\NX2312 /E /H /C /I /Y</pre>
<p>AppData\Local\Siemens\NX2312\NX_user.dpv 內容設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;?xml-stylesheet type="text/xsl" href="NX_user.xsl"?&gt;
&lt;PrefValues defaultLockStatus="unlocked"&gt;
&lt;Pref Application="Gateway" Category="General" Tab="Data Privacy" displayValue="No" modified="2024-08-09T08:48:09" name="NX_ProductExcellenceProgram" title="Product Excellence Program - Participate" value="false"/&gt;
&lt;Pref Application="Gateway" Category="General" Tab="Miscellaneous" displayValue="No" modified="2024-08-09T08:25:55" name="NX_ProductExcellenceProgramMessage" title="Product Excellence Program - Display Initial Startup Message" value="false"/&gt;
&lt;Pref Application="Gateway" Category="User Interface" Tab="Journal" displayValue="Python" modified="2024-08-09T08:26:17" name="UG_journalLanguage" title="Journal Language" value="4"/&gt;
&lt;/PrefValues&gt;</pre>
<p><a href="/downloads/nxopen_ex.7z">nxopen_ex.7z</a></p>
<p>可攜啟動之後, 若從命令列中啟動 NX, 則系統內定設定將讀取 home_ipv6\AppData\Local\Siemens\NX2312 目錄中的相關設定, 其中與 Menu 下拉式功能表有關的設定位於 user.mtx, 決定顯示 Menu 的設定內容為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">&lt;ActionList name="QuickAccessBar" type="popupbar"&gt;
    &lt;ActionItems&gt;
        &lt;ActionItem name="MenuBar" type="cascade" visibility="1"/&gt;
    &lt;/ActionItems&gt;
&lt;/ActionList&gt;</pre>
<p><a href="/downloads/NX2312_user_mtx_and_NX_user_dpv.7z">NX2312_user_mtx_and_NX_user_dpv.7z</a></p>
<h3>Open C</h3>
<p><span><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.nxopen_prog_guide/purpose">NXOpen Programmer's Guide</a></span></p>
<p><span><a href="https://docs.sw.siemens.com/en-US/doc/209349590/PL20230425446868577.custom_api.nxopen_python_ref">NXOpen Python Reference Guide 2312</a></span></p>
<p>The following table lists the Open C functions that have been wrapped for use in NXOpen.NET. The list provides the Open C function name and the corresponding C# method.</p>
<table border="1" cellpadding="6" frame="box" width="438"><colgroup span="1"><col span="1" width="233*"/><col span="1" width="339*"/></colgroup>
<thead>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>Open C Function</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>C# Wrapper Method</p>
</td>
</tr>
</thead>
<tbody>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc4577</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFCFI::GetUniqueFilename</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc5822</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFPATT::AskData</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc5823</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFPATT::Import</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc5824</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFPATT::CycleErrors</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5940</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::CreateCsysMappingMatrix</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5941</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::MapPosition</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5942</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::MultiplyMatrices</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5943</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::CreateTranslationMatrix</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5944</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::CreateScalingMatrix</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5945</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::CreateRotationMatrix</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5946</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::CreateReflectionMatrix</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uf5947</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFTrns::TransformObjects</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc6409</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFView::AskViewDependentStatus</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc6434</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFView::SetViewMatrix</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1615</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::PickPoint</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1616</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::PointSubfunction</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1630</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::PickCsys</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1652</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::PickView</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1653</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::AskLastPickedView</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1600</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::AskStringInput</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1601</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::DisplayMessage</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1603</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::DisplayMenu</p>
</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>uc1605</p>
</td>
<td align="left" colspan="1" rowspan="1" valign="top">
<p>UFUi::DisplayMultiSelectMenu</p>
</td>
</tr>
</tbody>
</table>
<div class="row justify-content-center topic-header scroll">
<div class="col-12 content-pad">
<div class="topic-header-content" id="xid455853">
<h4>Non-wrapped NX Open C functions</h4>
<div class="row justify-content-center">
<div class="col-12 content-pad">
<p>The Non-wrapped NX Open C functions are Open C functions that do not have .NET, Java, or Python bindings provided. This is mainly due to the following reasons:</p>
<ul>
<li>
<p>Corresponding functions have no use in .NET, Java, or Python</p>
</li>
<li>
<p>Functions in C are so complex that we cannot map them to .NET, Java, or Python</p>
</li>
</ul>
<p>The following are the non-wrapped NX Open C functions:</p>
<pre class="code-text">UF_ASSEM_free_deform_warnings_data<br/>UF_ASSEM_free_prev16_aligns<br/>UF_CLONE_free_validation_options<br/>UF_CUT_LEVELS_free<br/>UF_DRF_free_comp_data<br/>UF_FAM_free_class_data<br/>UF_FBM_GEOM_free_classified_set_list<br/>UF_GDT_free<br/>UF_KF_free_list_object_contents<br/>UF_KF_free_rule_value<br/>UF_LIB_free_rset_map<br/>UF_MODL_free_bsurf_data<br/>UF_MODL_free_compare_data<br/>UF_MODL_free_compare_data_3<br/>UF_MODL_free_law<br/>UF_MODL_free_law_extension<br/>UF_MODL_free_refit_face_feature_data<br/>UF_MODL_free_rough_offset_data<br/>UF_MODL_free_silhouette_flange<br/>UF_MODL_free_snip_surface_feature_data<br/>UF_MODL_free_string_list<br/>UF_MODL_shape_pattern_free_client_data<br/>UF_MODL_SWEEP_free_trim_data<br/>UF_MODL_udf_free_exp_data<br/>UF_NXSM_free_closed_corner_data<br/>UF_NXSM_free_flange_data<br/>UF_NXSM_free_flange_sketch_data<br/>UF_NXSM_free_rebend_data<br/>UF_NXSM_free_unbend_data<br/>UF_PART_free_load_status<br/>UF_PD_free_business_modifier_data<br/>UF_PD_free_product_attribute_data<br/>UF_PD_free_product_attribute_data_2<br/>UF_PD_free_product_attribute_value_data<br/>UF_ROUTE_free_places<br/>UF_SF_free_defeature_parms<br/>UF_SF_free_idealize_parms<br/>UF_SF_free_idealize_region<br/>UF_SF_free_midsrf_user_parms<br/>UF_SF_LEGEND_free_attr<br/>UF_SUBDIV_free<br/>UF_WAVE_free_linked_feature_info<br/>UF_WEIGHT_free_exceptions</pre>
</div>
</div>
</div>
</div>
</div>
<h3>MSYS2</h3>
<p><a href="http://229.cycu.org/python_2025/data/msys64_20240507.7z">msys64_20240507.7z</a> (183MB)</p>
<h2>Solvespace</h2>
<p>在 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a><span> 加入以下說明的 msys2 與 cmake 後, 可用來編譯 Solvespace v3.1 版原始碼的可攜套件 <a href="http://229.cycu.org/python_2025_lite_w_msys_cmake_solvespace.7z">python_2025_lite_w_msys_cmake_solvespace.7z</a> (Download 1.96GB, After extracted 3.7GB)</span></p>
<hr/>
<p>Solvespace 採 C++ 編寫, 原始碼位於 <a href="https://github.com/solvespace/solvespace">https://github.com/solvespace/solvespace</a>, 以下將採用可攜程式系統 python_2025 中的 msys2 (<a href="http://229.cycu.org/python_2025/data/msys64_20240507.7z">msys64_20240507.7z</a>) 以及 cmake 3.20.1 進行編譯 (若採用目前最新版的 cmake 3.30.2, 必須對 Solvespace v3.1 中的 CMakeLists.txt 進行修改).</p>
<p>舊版的 cmake 3.21.0 可以利用下列連結取得:</p>
<p><a href="https://github.com/Kitware/CMake/releases/download/v3.21.0/cmake-3.21.0-windows-x86_64.zip">https://github.com/Kitware/CMake/releases/download/v3.21.0/cmake-3.21.0-windows-x86_64.zip</a> </p>
<p><a href="http://229.cycu.org/python_2025/data/msys64_20240507.7z">msys64_20240507.7z</a> (下載到 data 目錄下後, 目錄名稱必須改為 msys64) 則必須安裝 mingw32-make:</p>
<p>(安裝以下 make 套件前, 必須先執行 msys64 中的 mingw64.exe)</p>
<p>pacman -S mingw-w64-ucrt-x86_64-make</p>
<p>最新版的 python_2025 可攜程式環境架構位於: <a href="https://github.com/mdecycu/pyhton_2025">https://github.com/mdecycu/pyhton_2025</a>, 各目錄套件可自行根據 <a href="https://mde.tw/cad2024/content/Python.html">https://mde.tw/cad2024/content/Python.html</a> 中的說明下載, 或者自行配置.</p>
<p>機械設計工程師採用可攜程式套件的原因, 是希望能彈性配置 Python 版本, 因為大多數主流 CAD/E/M 套件都非開源軟體, 各版本的 API 相關的動態連結程式庫, 都採用特定的 Python 版本程式碼編譯而成. 例如: Siemens NX12 採用 Python 3.6.5, NX1872 採用 Python 3.7.1, NX1980 採用 Python 3.8.8, NX2312 使用 Python 3.10.12. 假如採用可攜程式套件, 除了可以如虛擬 Python 環境一樣, 將能配合 NXOpen 程式開發, 將所需的 Python 版本與相關模組放在同一目錄, 且能夠在不同的 64 位元 Windows 操作系統中執行.</p>
<p>接著取得 Solvespace v3.1 的原始碼, 可以直接從 <a href="https://github.com/solvespace/solvespace/releases">https://github.com/solvespace/solvespace/releases</a> 取得, 或以 以 git clone --recurse-submodules <a href="https://github.com/solvespace/solvespace.git">https://github.com/solvespace/solvespace.git</a> 之後,</p>
<p>cd solvespace</p>
<p>git checkout v3.1</p>
<p>接下來則必須修改 solvespace\extlib\angle\src\libANGLE\HandleAllocator.cpp 加入標頭檔案:</p>
<p>#include &lt;limits&gt;</p>
<p>接著就可以進行程式碼的編譯與連結:</p>
<p>mkdir build</p>
<p>cd build</p>
<p>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release</p>
<p>mingw32-make</p>
<p>完成編譯後, solvespace.exe 即位於 build\bin 目錄中, 執行時則需要 libwinpthread-1.dll 動態連結程式庫.</p>
<p>進行上述流程編譯的原始碼 <a href="http://229.cycu.org/solvespace_v3.1_src.7z">solvespace_v3.1_src.7z</a>, 以及編譯完成的 <a href="http://229.cycu.org/solvespace_v3.1_msys2.7z">solvespace_v3.1_msys2.7z</a>.</p>
<h2>CoppeliaSim</h2>
<p>下載相容於 IPv6 的 CoppeliaSim 4.7.0 rev4: <a href="http://229.cycu.org/CoppeliaSim_Edu_4.7.0_rev4_for_2024Fall.7z">CoppeliaSim_Edu_4.7.0_rev4_for_2024Fall.7z</a></p>
<p><a href="http://229.cycu.org/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p>ZMQ Remote API Python Examples: <a href="https://github.com/benzr/cdfrob2024-coppeliasim-zeromq-remote-api">https://github.com/benzr/cdfrob2024-coppeliasim-zeromq-remote-api</a> (修改為 4.7.0 相容範例: <a href="/downloads/cdfrob2024-coppeliasim-zeromq-remote-api.7z">cdfrob2024-coppeliasim-zeromq-remote-api.7z</a>)</p>
<p>官方 4.7.0 Visualization Stream 瀏覽器前端允許使用者變動場景中的物件位置與方位, 若要移除此一功能, 必須修改 threejsFrontend.html 與 threejsFrontend.js. (下載已經修改後的<a href="/downloads/CoppeliaSim_Edu_4.7.0_rev4_threejsFrontend_for_2024Fall.7z">超文件與 js 檔案</a>)</p>
<p>模擬場景範例: <a href="/downloads/tricycle_ttt.7z">tricycle_ttt.7z</a>, <a href="/downloads/GPSsensor_ttt.7z">GPSsensor_ttt.7z</a></p>
<p><a href="https://www.youtube.com/playlist?list=PLjzuoBhdtaXOoqkJUqhYQletLLnJP8vjZ">CoppeliaSim Tutorial Videos</a></p>
<p><a href="https://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_CoppeliaSim_Simulator">Get started with CoppeliaSim</a></p>
<hr/>
<p>CoppeliaSim 在 2024.06.14 推出 <a href="https://manual.coppeliarobotics.com/en/versionInfo.htm#coppeliaSim4.7.0">4.7.0 版</a>, 其中沿用至 4.6.0 版的 zmqRemoteApi 模組已經改名為 coppeliasim_zmqremoteapi_client, 部分模組的內容也進行些微更動, 導致先前所編寫的 ZMQ Rempte API Python 程式都必須因應修改, 否則無法執行.</p>
<p>KMOLab 在 4.5.1 版為了讓 CoppeliaSim 的 ZMQ Remote API Python 遠端控制程式能夠在 IPv6 網路協定中執行, 修改了 Server 與 Client 模組中的 ZMQ 程式設定, 若要讓 4.7.0 版也能相容於 IPv6, 則必須修改下列程式碼:</p>
<p>lua\pythonWrapperV2.lua</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function initPython(prog)
    local pyth = sim.getStringParam(sim.stringparam_defaultpython)
    local pyth2 = sim.getNamedStringParam("python")
    if pyth2 then pyth = pyth2 end
    if pyth == nil or #pyth == 0 then
        local p = sim.getInt32Param(sim.intparam_platform)
        if p == 0 then
            pyth = 'py'
        else
            pyth = 'python3'
        end
    end
    local errMsg
    if pythonExecutable then
        pyth = pythonExecutable
    end
    if pyth and #pyth &gt; 0 then
        subprocess, controlPort = startPythonClientSubprocess(pyth)
        if controlPort then
            pyContext = simZMQ.ctx_new()
            pySocket = simZMQ.socket(pyContext, simZMQ.REQ)
            -- enable IPv6 for ZMQ, default is false to IPv6 from KMOLab
            simZMQ.setsockopt(pySocket,simZMQ.IPV6,sim.packUInt32Table{1})
            simZMQ.setsockopt(pySocket,simZMQ.IPV4ONLY,sim.packUInt32Table{0})
            -- end for enabling IPv6 for ZMQ
            simZMQ.setsockopt(pySocket, simZMQ.LINGER, sim.packUInt32Table {0})
            simZMQ.connect(pySocket, controlPort)
            virtualPythonFilename = sim.getStringParam(sim.stringparam_scene_path_and_name)</pre>
<p>另外必須注意的是 4.7.0 在 Windows 中使用虛擬硬碟代號 z:, 若控制程式的開發是在可攜程式系統中進行, 必須避開使用 z:.</p>
<p>另外在 lua\motion.lua 中將封包傳送綁定在 localhost, 嘗試修改如下:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sim.generateTimeOptimalTrajectory(...)
    simZMQ = require 'simZMQ'
    local path, pathLengths, minMaxVel, minMaxAccel, trajPtSamples, boundaryCondition, timeout =
        checkargs({
            {type = 'table', item_type = 'float', size = '2..*'},
            {type = 'table', item_type = 'float', size = '2..*'},
            {type = 'table', item_type = 'float', size = '2..*'},
            {type = 'table', item_type = 'float', size = '2..*'},
            {type = 'int', default = 1000},
            {type = 'string', default = 'not-a-knot'},
            {type = 'float', default = 5},
    }, ...)

    local confCnt = #pathLengths
    local dof = math.floor(#path / confCnt)

    if (dof * confCnt ~= #path) or dof &lt; 1 or confCnt &lt; 2 or dof ~= #minMaxVel / 2 or
        dof ~= #minMaxAccel / 2 then error("Bad table size.") end
    local lb = sim.setStepping(true)

    local pM = Matrix(confCnt, dof, path)
    local mmvM = Matrix(2, dof, minMaxVel)
    local mmaM = Matrix(2, dof, minMaxAccel)

    sim.addLog(sim.verbosity_scriptinfos,
        "Trying to connect via ZeroMQ to the 'toppra' service... " ..
        "make sure the 'docker-image-zmq-toppra' container is running. " ..
        "Details can be found at https://github.com/CoppeliaRobotics/docker-image-zmq-toppra"
    )
    local context = simZMQ.ctx_new()
    local socket = simZMQ.socket(context, simZMQ.REQ)
    simZMQ.setsockopt(socket, simZMQ.RCVTIMEO, sim.packInt32Table {1000 * timeout})
    simZMQ.setsockopt(socket, simZMQ.LINGER, sim.packInt32Table {500})
    -- local result = simZMQ.connect(socket, 'tcp://localhost:22505')
    -- try to make it IPv6 compatable
    local result = simZMQ.connect(socket, 'tcp://*:22505')
    if result == -1 then
        local err = simZMQ.errnum()
        error('connect failed: ' .. err .. ': ' .. simZMQ.strerror(err))
    end</pre>
<p>另外, 在 coppeliasim_zmqremoteapi_client 模組,  __init__.py 中, 也必須納入 IPv6 相容設定:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class RemoteAPIClient:
    """Client to connect to CoppeliaSim's ZMQ Remote API."""

    def __init__(self, host='localhost', port=23000, cntport=None, *, verbose=None):
        """Create client and connect to the ZMQ Remote API server."""
        self.verbose = int(os.environ.get('VERBOSE', '0')) if verbose is None else verbose
        self.context = zmq.Context()
        self.socket = self.context.socket(zmq.REQ)
        # Enable IPv6 on the socket
        self.socket.setsockopt(zmq.IPV6, 1)
        self.socket.connect(f'tcp://{host}:{port}')
        self.uuid = str(uuid.uuid4())
        self.callbackFuncs = {}
        self.requiredItems = {}
        self.VERSION = 2
        self.timeout = 10 * 60
        self.sendCnt = 0
        main_globals = sys.modules['__main__'].__dict__
        main_globals['require'] = self.require</pre>
<p>最後 addOns\ZMQ remote API server.lua 中也必須改為 IPv6 相容:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">--    if zmqRemoteApi.verbose() &gt; 0 then
        sim.addLog(
            sim.verbosity_scriptinfos,
            string.format('ZeroMQ Remote API server starting (rpcPort=%d)...', rpcPort)
        )
--    end
    cbor = require 'org.conman.cbor'
    context = simZMQ.ctx_new()
    rpcSocket = simZMQ.socket(context, simZMQ.REP)
    -- enable IPv6 for ZMQ, default is false to IPv6
    simZMQ.setsockopt(rpcSocket,simZMQ.IPV6,sim.packUInt32Table{1})
    -- ZMQ IPv4ONLY default is true: http://api.zeromq.org/4-2:zmq-setsockopt
    simZMQ.setsockopt(rpcSocket,simZMQ.IPV4ONLY,sim.packUInt32Table{0})
    -- end enabling IPv6
    simZMQ.bind(rpcSocket, string.format('tcp://*:%d', rpcPort))
    if zmqRemoteApi.verbose() &gt; 0 then
        sim.addLog(sim.verbosity_scriptinfos, 'ZeroMQ Remote API server started')
    end</pre>
<p>在 4.7.0 中執行的 ZMQ Remote API Python 測試程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># CoppeliaSim 4.7.0 rev4 適用
# 與 4.5.1 只差在:
'''
# 利用 size 數列, 建立圓柱物件, 2 代表 cylinder
# 8 表示 respondable, 1 為 質量
digit1_handle = sim.createPureShape(2, 8, size, 1, None)
已經改為 4.7.0 的:
digit1_handle = sim.createPrimitiveShape(sim.primitiveshape_cylinder, size, 0)
respondable 屬性與質量必須另外設定
'''
# zmqRemoteApi_IPv6 為將 zmq 通訊協定修改為 IPv4 與 IPv6 相容
# pip install pyzmq cbor keyboard
# for 4.5.1
#from zmqRemoteApi_IPv6 import RemoteAPIClient
# for 4.7.0
from coppeliasim_zmqremoteapi_client import RemoteAPIClient
import time
import math
import keyboard
  
# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線
client = RemoteAPIClient('[::1]', 23000)
# 以 getObject 方法取得場景物件
sim = client.getObject('sim')
box = sim.getObject('/box')
  
# 啟動模擬
sim.startSimulation()
# 建立尺寸數列, 分別定義 x, y, z 方向尺寸
x = 0.2
y = 0.2
z = 0.1
size = [x, y, z]
  
# 利用 size 數列, 建立圓柱物件
# https://manual.coppeliarobotics.com/en/regularApi/simCreatePrimitiveShape.htm
digit1_handle = sim.createPrimitiveShape(sim.primitiveshape_cylinder, size, 0)
# 將 digit1 設為動態
# 設置質量屬性
sim.setObjectFloatParam(digit1_handle, sim.shapefloatparam_mass , 1.0)
# 設置物體為動態
sim.setObjectInt32Param(digit1_handle, sim.shapeintparam_static, 0)
sim.resetDynamicObject(digit1_handle)
# 設為具備碰撞檢測屬性
sim.setObjectInt32Param(digit1_handle, sim.shapeintparam_respondable , 1)
# 將圓柱物件命名為 digit1, 若用於機械計分可做為個位數轉盤
# 之後可再導入帶有數字組立的外型零件
sim.setObjectAlias(digit1_handle, 'digit1')
# 轉角單位為徑度
sim.setObjectOrientation(digit1_handle, -1, [0, math.pi/2, 0])
# 起始物件中心位於 [0, 0, 0], 為了位於地板, 往 z 提升一個半徑高度
sim.setObjectPosition(digit1_handle, -1, [0, 0, x/2])
  
# 建立 revolute joint 命名為 joint, 且將 joint mode 設為 dynamic, control mode 設為 velocity
joint1_handle = sim.createJoint(sim.joint_revolute_subtype, sim.jointmode_dynamic, 0, None)
sim.setObjectInt32Param(joint1_handle, sim.jointintparam_dynctrlmode, sim.jointdynctrl_velocity)
sim.setObjectAlias(joint1_handle, 'joint1')
  
# 取得 cylinder 的位置座標
digit1_pos = sim.getObjectPosition(digit1_handle, -1)
joint1_pos = [digit1_pos[0], digit1_pos[1], digit1_pos[2]]
  
# 將 joint1 至於 cylinder 中心
sim.setObjectPosition(joint1_handle, -1, joint1_pos)
# 取得 digit1_handle 的方位
digit1_ori = sim.getObjectOrientation(digit1_handle, -1)
# 將 joint1_handle 方位與 digit1 對齊
sim.setObjectOrientation(joint1_handle, -1, digit1_ori)
  
# 將 joint1 置於 box 上
sim.setObjectParent(joint1_handle, box, True)
# 將 cylinder 置於 joint1 上
sim.setObjectParent(digit1_handle, joint1_handle, True)
  
# 鎖定 joint1
# for 4.5.1
#sim.setJointForce(joint1_handle, float('inf'))
# for 4.7.1
sim.setJointTargetForce(joint1_handle, float('inf'))
  
print("基本場景建立完成!")
  
# 設定主迴圈
while True:
    # 設定 joint1 目標速度
    sim.setJointTargetVelocity(joint1_handle, 10)
    # 讓 coppeliasim 有時間按照設定讓 joint1 旋轉
    time.sleep(0.01) 
  
    if keyboard.is_pressed('q'):
        # 可以按下 q 鍵跳出重複執行迴圈
        break
  
# 終止模擬
sim.stopSimulation()</pre>
<p>若加入 Model 程式庫中的加速度規於輪子上, 並將轉動感測數據列出:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from coppeliasim_zmqremoteapi_client import RemoteAPIClient
import time
import math
import keyboard

# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線
client = RemoteAPIClient('[::1]', 23000)
# 以 getObject 方法取得場景物件
sim = client.getObject('sim')
box = sim.getObject('/box')

# 啟動模擬
sim.startSimulation()

# 建立尺寸數列, 分別定義 x, y, z 方向尺寸
x = 0.2
y = 0.2
z = 0.1
size = [x, y, z]

# 利用 size 數列, 建立圓柱物件
digit1_handle = sim.createPrimitiveShape(sim.primitiveshape_cylinder, size, 0)
sim.setObjectAlias(digit1_handle, 'digit1')
sim.setObjectOrientation(digit1_handle, -1, [0, math.pi/2, 0])
sim.setObjectPosition(digit1_handle, -1, [0, 0, x/2])

# 將 digit1 設為動態
# 設置質量屬性
sim.setObjectFloatParam(digit1_handle, sim.shapefloatparam_mass , 1.0)
# 設置物體為動態
sim.setObjectInt32Param(digit1_handle, sim.shapeintparam_static, 0)
sim.resetDynamicObject(digit1_handle)
# 設為具備碰撞檢測屬性
sim.setObjectInt32Param(digit1_handle, sim.shapeintparam_respondable , 1)

# 建立 revolute joint 命名為 joint, 且將 joint mode 設為 dynamic, control mode 設為 velocity
joint1_handle = sim.createJoint(sim.joint_revolute_subtype, sim.jointmode_dynamic, 0, None)
sim.setObjectInt32Param(joint1_handle, sim.jointintparam_dynctrlmode, sim.jointdynctrl_velocity)
sim.setObjectAlias(joint1_handle, 'joint1')

# 取得 cylinder 的位置座標
digit1_pos = sim.getObjectPosition(digit1_handle, -1)
joint1_pos = [digit1_pos[0], digit1_pos[1], digit1_pos[2]]

# 將 joint1 至於 cylinder 中心
sim.setObjectPosition(joint1_handle, -1, joint1_pos)
# 取得 digit1_handle 的方位
digit1_ori = sim.getObjectOrientation(digit1_handle, -1)
# 將 joint1_handle 方位與 digit1 對齊
sim.setObjectOrientation(joint1_handle, -1, digit1_ori)

# 將 joint1 置於 box 上
sim.setObjectParent(joint1_handle, box, True)
# 將 cylinder 置於 joint1 上
sim.setObjectParent(digit1_handle, joint1_handle, True)

# 鎖定 joint1
sim.setJointTargetForce(joint1_handle, float('inf'))

print("基本場景建立完成!")

# 載入加速度計模型
accel_model_path = 'models/components/sensors/Accelerometer.ttm'
accel_handle = sim.loadModel(accel_model_path)

# 確保加速度計在圓柱物件上
sim.setObjectPosition(accel_handle, digit1_handle, [0, 0, x/2])
sim.setObjectParent(accel_handle, digit1_handle, True)

# 取得加速度計的句柄
# 通常模型載入後的物件名稱是 'Accelerometer'
accel_sensor_handle = sim.getObjectHandle('Accelerometer')

# 設定主迴圈
while True:
    # 設定 joint1 目標速度
    sim.setJointTargetVelocity(joint1_handle, 10)

    # 嘗試讀取加速度計的數據
    # 使用 getObjectPosition 和 getObjectOrientation 來讀取加速度計數據
    # 這僅僅是示例，你需要根據實際 API 文檔來確定如何讀取數據
    position = sim.getObjectPosition(accel_sensor_handle, -1)
    orientation = sim.getObjectOrientation(accel_sensor_handle, -1)
    
    # 根據感測器的數據進行處理，這裡僅為示例
    print(f'Accelerometer position: {position}')
    print(f'Accelerometer orientation: {orientation}')

    # 讓 CoppeliaSim 有時間按照設定讓 joint1 旋轉
    time.sleep(0.1)  # 增加延遲以便更穩定地讀取數據

    if keyboard.is_pressed('q'):
        # 可以按下 q 鍵跳出重複執行迴圈
        break

# 終止模擬
sim.stopSimulation()
</pre>
<p>上列 ZMQ Remote API Python 範例含 CoppeliaSim 4.7.0 rev4 程式庫: <a href="/downloads/zmq_remote_api_ex.7z">zmq_remote_api_ex.7z</a></p>
<hr/>
<p><a href="/downloads/cad2024_foosball_with_ball_python_script.7z">cad2024_foosball_with_ball_python_script.7z</a></p>
<p>將上列採用 Python script 控制的手足球, 改為使用 ZMQ Remote API Python 執行控制:</p>
<p><a href="/downloads/cad2024_foosball.7z">cad2024_foosball.7z</a></p>
<p>Ball-Plate-Control: <a href="https://github.com/mdecycu/Ball-Plate-Control">https://github.com/mdecycu/Ball-Plate-Control</a> </p>
<h3>ZMQ</h3>
<p><a href="https://learning-0mq-with-pyzmq.readthedocs.io/en/latest/index.html">https://learning-0mq-with-pyzmq.readthedocs.io/en/latest/index.html</a></p>
<p style="padding-left: 30px;">ØMQ is a neat messaging library that allows you to build your own messaging infrastructure. ØMQ does not provide out of box messaging system experience like ActiveMQ or RabbitMQ. It is higher level concept than sockets and provides as low level conceptual framework as possible to build messaging systems. It can help build framework that scales where services could be handled by different applications that does one job well.</p>
<p style="padding-left: 30px;">Distributed applications are also easier to change compared to a monolithic applications. It’s expensive to try to define the behavior of each of many software applications that work together in a large network. It’s much cheaper, and more flexible, to define the interfaces between them: the APIs. Messaging is an API that can be stretched across a network.<br/><br/>ØMQ 是一個精簡的訊息傳遞程式庫 (messaging library)，允許使用者自行建立訊息傳遞基礎架構。ØMQ 不像 ActiveMQ 或 RabbitMQ 那樣提供開箱即用的訊息系統體驗。ØMQ 是比封包更高層級的概念，同時提供了儘可能低階的概念框架來構建訊息傳遞系統。它能夠幫助構建可擴展的框架 (framework)，使得這個框架中，不同的服務可以由專注於單一任務的獨立應用程式來處理。</p>
<p style="padding-left: 30px;">與單一應用程式相比，分散式應用程式更容易更改。嘗試定義在大型網路中協同工作的眾多軟體應用程式的行為，其成本很高; 定義它們之間的介面（API）要便宜得多，也更靈活。使得訊息傳遞是一種可以跨網路擴展的 API。</p>
<p>使用 pyzmq 建立程式範例:</p>
<p>server:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import zmq
import time

context = zmq.Context()
socket = context.socket(zmq.REP)
socket.bind("tcp://*:5555")

def process_request(request):
    # 模擬處理請求
    time.sleep(1)
    return f"已處理請求: {request}"

print("服務器已啟動，等待請求...")

while True:
    message = socket.recv_string()
    print(f"收到請求: {message}")
    
    response = process_request(message)
    
    socket.send_string(response)</pre>
<p>client:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import zmq

context = zmq.Context()
socket = context.socket(zmq.REQ)
socket.connect("tcp://localhost:5555")

for request in range(5):
    print(f"發送請求 {request}...")
    socket.send_string(f"請求 {request}")
    
    response = socket.recv_string()
    print(f"收到回覆: {response}")</pre>
<p>上列採用 pyzmq 模組的程式組合，主要展示 ZMQ 程式庫在兩個應用程式間負責傳遞訊息，其特性如下:<br/><br/>1. 通訊介面：<br/><br/>伺服器端和客戶端之間透過 ZMQ 定義了一個簡單的通訊介面。雙方不需要了解對方的內部運作，只需知道如何發送和接收訊息。<br/><br/>2. 跨網路的應用程式介面（API）：<br/><br/>使用 ZMQ 建立了一個可以跨網路運作的 API。伺服器和客戶端程式可以在不同的電腦上執行，只要能夠透過網路連線即可傳遞訊息。<br/><br/>3. 彈性：<br/><br/>使用者可以輕鬆修改伺服器的內部邏輯（例如: 變更用來處理請求的函式設計），而不需要更動客戶端的程式碼。<br/>同樣地，使用者也可以新增更多客戶端或甚至替換現有客戶端，只要客戶端程式遵循相同的訊息傳遞格式。<br/><br/>4. 成本效益：<br/><br/>定義這個簡單的訊息傳遞介面，比起詳細規劃每個應用程式的所有可能行為要簡單得多。<br/><br/>5. 可擴展性：<br/><br/>此一模型可以輕鬆擴展到更複雜的情境 (例如:新增多個伺服器、實現負載平衡等)，而基本的訊息傳遞模式可保持不變。</p>
<p>另外一組範例，以解二階微分方程為例：</p>
<p>y'' + p(x)y' + q(x)y = f(x), with boundary conditions y(a) = α and y(b) = β</p>
<p>可將問題範圍分割成多個子區間，每個工作者負責解決一個子區間。</p>
<p>首先，建立一個任務派送器：</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># task_dispatcher.py
import zmq
import numpy as np
import time

def task_dispatcher():
    try:
        context = zmq.Context()
        task_sender = context.socket(zmq.PUSH)
        task_sender.bind("tcp://127.0.0.1:5557")
        print("Task sender bound to tcp://127.0.0.1:5557")

        result_receiver = context.socket(zmq.PULL)
        result_receiver.bind("tcp://127.0.0.1:5558")
        print("Result receiver bound to tcp://127.0.0.1:5558")

        print("Task dispatcher started. Waiting for workers to connect...")
        time.sleep(1)  # 給工作者一些時間來連接
        
        # 定義問題參數
        a, b = 0, 1  # 邊界
        alpha, beta = 0, 1  # 邊界條件
        N = 1000  # 總點數
        num_workers = 4  # 工作者數量

        h = (b - a) / (N - 1)  # 步長
        x = np.linspace(a, b, N)

        # 定義方程係數
        def p(x): return 1
        def q(x): return -2
        def f(x): return np.exp(-x)

        print("Dispatching tasks...")
        # 分配任務
        points_per_worker = N // num_workers
        for i in range(num_workers):
            start = i * points_per_worker
            end = (i + 1) * points_per_worker if i &lt; num_workers - 1 else N
            task = {
                'worker_id': i,
                'start': start,
                'end': end,
                'x': x[start:end].tolist(),
                'h': h,
                'p': [p(xi) for xi in x[start:end]],
                'q': [q(xi) for xi in x[start:end]],
                'f': [f(xi) for xi in x[start:end]]
            }
            task_sender.send_pyobj(task)
            print(f"Task sent to worker {i}")

        print("All tasks dispatched. Waiting for results...")

        # 收集結果
        results = [None] * num_workers
        for _ in range(num_workers):
            result = result_receiver.recv_pyobj()
            worker_id = result['worker_id']
            results[worker_id] = result['y']
            print(f"Received result from worker {worker_id}")

        # 組合結果
        y = np.concatenate(results)

        # 應用邊界條件
        y[0] = alpha
        y[-1] = beta

        print("Solution computed. First few values:", y[:5])
        print("Last few values:", y[-5:])

    except zmq.ZMQError as e:
        print(f"ZMQ Error occurred: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    task_dispatcher()</pre>
<p>接著安排負責運算的 client 端程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># worker.py
import zmq
import numpy as np

def solve_segment(x, h, p, q, f):
    n = len(x)
    A = np.zeros((n, n))
    b = np.zeros(n)

    # 設置三對角矩陣
    for i in range(1, n-1):
        A[i, i-1] = 1 - h * p[i] / 2
        A[i, i] = -2 + h**2 * q[i]
        A[i, i+1] = 1 + h * p[i] / 2
        b[i] = h**2 * f[i]

    # 設置邊界條件（這裡使用自然邊界條件）
    A[0, 0] = A[-1, -1] = 1
    A[0, 1] = A[-1, -2] = -1

    return np.linalg.solve(A, b)

def worker(worker_id):
    context = zmq.Context()
    task_receiver = context.socket(zmq.PULL)
    task_receiver.connect("tcp://localhost:5557")

    result_sender = context.socket(zmq.PUSH)
    result_sender.connect("tcp://localhost:5558")

    print(f"Worker {worker_id} started. Waiting for task...")

    task = task_receiver.recv_pyobj()
    print(f"Worker {worker_id} received task")

    x = np.array(task['x'])
    h = task['h']
    p = np.array(task['p'])
    q = np.array(task['q'])
    f = np.array(task['f'])

    y = solve_segment(x, h, p, q, f)

    result = {
        'worker_id': worker_id,
        'y': y.tolist()
    }
    result_sender.send_pyobj(result)
    print(f"Worker {worker_id} sent result")

if __name__ == "__main__":
    import sys
    worker(int(sys.argv[1]) if len(sys.argv) &gt; 1 else 0)</pre>
<p>執行流程，先執行任務派送程式:</p>
<p>python task_dispatcher.py</p>
<p>然後在不同的終端中運行多個工作者：</p>
<p>python worker.py 0<br/>python worker.py 1<br/>python worker.py 2<br/>python worker.py 3</p>
<p>此一系統的工作原理:</p>
<ol>
<li>任務派發器將整個問題域分割成幾個子區間。</li>
<li>每個子區間的資料（包括 x 值、步長 h、方程式係數 p、q 和 f）被打包成一個任務，發送給工作者。</li>
<li>每個工作者接收一個子區間的任務，使用有限差分法解決該子區間的方程。</li>
<li>工作者將解決方案發送回任務派發器。</li>
<li>任務派發器收集所有工作者的結果，將它們組合成完整的解，並應用邊界條件。</li>
</ol>
<p>這個例子展示了如何使用 pyzmq 來實現一個分散式計算系統，用於解決複雜的數值問題。它將一個大問題分解成多個小問題，利用多台機器或多個處理器並行計算，從而提高計算效率。</p>
<p>注意：這個實現使用了自然邊界條件（Neumann邊界條件）來處理子區間的邊界。在實際應用中，可能需要根據具體問題調整邊界條件的處理方式。</p>
<p><a href="https://zx7978123.medium.com/%E8%AE%93%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0-%E7%A8%8B%E5%BC%8F-%E5%AE%B9%E5%99%A8%E5%8F%AF%E4%BB%A5%E4%BA%92%E7%9B%B8%E6%BA%9D%E9%80%9A%E6%96%B9%E6%B3%95-%E8%B6%85%E7%B0%A1%E5%96%AE%E7%9A%84zeromq-%E6%95%99%E5%AD%B8-407f7d17c23">Reference</a></p>
<h2>SolidWorks</h2>
<p>下載 <a href="http://229.cycu.org/solidworks_2023.7z">SolidWorks_2023.7z</a> (學校所提供的教育版 SolidWorks 2023 SP2.1)</p>
<p>安裝過程:</p>
<p>確定電腦在安裝其他套件或更新時, 已經重新啟動電腦, 否則請在安裝前重新啟動電腦.</p>
<p>另外若安裝時電腦並非位於校網中, 請透過 VPN 連線進入校區網段, 使用 VPN 連網細節請參考"VPN_校外網路取得校內IP服務.docx" 中的說明.</p>
<p>以下安裝資訊僅適用於校網中, 在其他網段無法使用, 安裝完成後電腦必須位於校網或以 VPN 登入校網, 否則無法使用.</p>
<p>解開上列壓縮檔案後, 執行 setup.exe 進行安裝, 畫面如下:</p>
<p><img caption="false" height="265" src="/images/solidworks_2023_step1.png" width="300"/></p>
<p>選擇安裝在此電腦上, 接著下一步:</p>
<p>安裝序號有 24 碼, 可從"<a href="http://229.cycu.org/SOLIDWORKS2023安裝序號及IP＿README_utf8.txt">SOLIDWORKS2023安裝序號及IP＿README_utf8.txt</a>" 檔案中取得, 複製序號後貼上即可.</p>
<p><img alt="" height="266" src="/images/solidworks_2023_step2.png" width="300"/></p>
<p>接著下一步, 安裝程式將會連線至 SolidWorks, 之後選擇不要安裝更新版本:</p>
<p><img alt="" height="266" src="/images/solidworks_2023_step3.png" width="300"/></p>
<p>接下來選擇接受 SolidWorks 的條款, 若全部安裝需要 21 GB:</p>
<p><img alt="" height="266" src="/images/solidworks_2023_step4.png" width="300"/></p>
<p></p>
<p>其中:</p>
<p>繁體中文佔 327MB</p>
<p>Flow Simulation 佔 1.3GB</p>
<p>Plastics 佔 1.7GB</p>
<p>Composer 佔 1.6GB</p>
<p>CAM 佔 2.3GB</p>
<p>Visualize 佔 3.9GB</p>
<p>Electrical 佔 733MB</p>
<p>3D Experience Marketplace 佔 2MB</p>
<p>3D Experience Exchange for SolidWorks 佔 2MB</p>
<p>Simulation 佔 350MB</p>
<p>Motion 佔 5MB</p>
<p>若上述延伸套件都選擇不安裝, 則需要 8.6GB:</p>
<p><img alt="" height="266" src="/images/solidworks_2023_step5.png" width="300"/></p>
<p>確定安裝內容後, 選擇馬上安裝:</p>
<p><img alt="" height="228" src="/images/solidworks_2023_step6.png" width="300"/></p>
<p>按下確定後開始進行下載安裝.</p>
<p><img alt="" height="266" src="/images/solidworks_2023_step7.png" width="300"/></p>
<p>安裝完成前, 選擇是否參加客戶經驗改進計畫:</p>
<p><img alt="" height="265" src="/images/solidworks_2023_step8.png" width="300"/></p>
<p>選擇完成, 並且重新啟動電腦:</p>
<p><img alt="" height="182" src="/images/solidworks_2023_step9.png" width="300"/></p>
<p>重新啟動電腦後, 利用桌面上的"SOLIDWORKS 2023" 開啟, 出現下列畫面, 選擇 Accept (若只安裝英文版介面) 後開始執行:</p>
<p><img alt="" height="169" src="/images/solidworks_2023_step11.png" width="300"/></p>
<p>上列流程選擇安裝英文版介面, 且僅安裝 SolidWorks 2023 本體以及 eDrawings, 實際配置於 ::6 電腦上.</p>
<p><img alt="" height="169" src="/images/solidworks_2023_step12.png" width="300"/></p>
<p><img alt="" height="169" src="/images/solidworks_2023_step13.png" width="300"/></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h1>Python</h1>
<p>以 Python 為主的可攜程式環境架構:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/python_2025">https://github.com/mdecycu/python_2025</a></p>
<p>2024 Fall 開始採用的 python_2025.7z (5.2GB), 包含下列模組:</p>
<p style="padding-left: 30px;">與 NX2406 配合的 <a href="http://229.cycu.org/Python310_pip_only.7z">Python310_pip_only.7z</a> (3.10.11 版)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/Python310_jupyter_notebook.7z">Python310_jupyter_notebook.7z</a></p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/Python310_jupyter_lab_collaborative.7z">Python310_jupyter_lab_collaborative.7z</a></p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/python_2025_batch_files.7z">python_2025_batch_files.7z</a> (2.64KB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/NX2406_CAD.7z">下載</a><span> NX2406 可攜 CAD 壓縮檔案 (1.76 GB, 解開後約 9 GB)</span></p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/data/CoppeliaSim_Edu_4.7.0_rev4_for_2024Fall.7z">CoppeliaSim_Edu_4.7.0_rev4_for_2024Fall.7z</a> (190MB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/data/homes_and_tmp.7z">homes_and_tmp.7z</a> (84MB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/data/msys64_20240507.7z">msys64_20240507.7z</a> (188MB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/data/git_putty_python.7z">git_putty_python.7z</a> (559MB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/data/sharex_wscite_wink3.7z">sharex_wscite_wink3.7z</a> (44.2MB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/python_2025/data/solvespace_and_utilities.7z">solvespace_and_utilities.7z</a> (7.28MB)</p>
<p style="padding-left: 30px;"><a href="http://229.cycu.org/kmolab_ex.7z">kmolab_ex.7z</a> (314MB)</p>
<hr/>
<p>Python 3.12 版已經移除 distutils, 表示先前利用 MSYS2 編譯模組的<a href="https://raw.githubusercontent.com/KmolYuan/Pyslvs-UI/a838ec7bde9ebf0857ae8d4f00a272fcb2f57bb7/platform/set_pycompiler.bat">設定</a>, 已經不再適用:</p>
<p style="padding-left: 30px;">The entire <code class="docutils literal notranslate"><span class="pre">distutils</span></code> package is deprecated, to be removed in Python 3.12. Its functionality for specifying package builds has already been completely replaced by third-party packages <code class="docutils literal notranslate"><span class="pre">setuptools</span></code> and <code class="docutils literal notranslate"><span class="pre">packaging</span></code>, and most other commonly used APIs are available elsewhere in the standard library (such as <a class="reference internal" href="https://docs.python.org/3.10/library/platform.html#module-platform" title="platform: Retrieves as much platform identifying data as possible."><code class="xref py py-mod docutils literal notranslate"><span class="pre">platform</span></code></a>, <a class="reference internal" href="https://docs.python.org/3.10/library/shutil.html#module-shutil" title="shutil: High-level file operations, including copying."><code class="xref py py-mod docutils literal notranslate"><span class="pre">shutil</span></code></a>, <a class="reference internal" href="https://docs.python.org/3.10/library/subprocess.html#module-subprocess" title="subprocess: Subprocess management."><code class="xref py py-mod docutils literal notranslate"><span class="pre">subprocess</span></code></a> or <a class="reference internal" href="https://docs.python.org/3.10/library/sysconfig.html#module-sysconfig" title="sysconfig: Python's configuration information"><code class="xref py py-mod docutils literal notranslate"><span class="pre">sysconfig</span></code></a>). There are no plans to migrate any other functionality from <code class="docutils literal notranslate"><span class="pre">distutils</span></code>, and applications that are using other functions should plan to make private copies of the code. Refer to <span class="target" id="index-28"></span><a class="pep reference external" href="https://www.python.org/dev/peps/pep-0632"><strong>PEP 632</strong></a> for discussion.</p>
<p style="padding-left: 30px;">The <code class="docutils literal notranslate"><span class="pre">bdist_wininst</span></code> command deprecated in Python 3.8 has been removed. The <code class="docutils literal notranslate"><span class="pre">bdist_wheel</span></code> command is now recommended to distribute binary packages on Windows. (Contributed by Victor Stinner in <a class="reference external" href="https://bugs.python.org/issue?@action=redirect&amp;bpo=42802">bpo-42802</a>.)</p>
<p>若希望在 Windows 環境中利用 Visual Studio C++ 編譯 Python 模組, 可以下載  <a href="https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/">https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/</a> 安裝後, 重新開機即可.</p>
<p>若要將 visual-cpp-build-tools 配置為可攜套件模組, 則可透過 <a href="https://github.com/Data-Oriented-House/PortableBuildTools">https://github.com/Data-Oriented-House/PortableBuildTools</a> 完成.</p>
<p><a href="/downloads/nxopen_base_and_center_pole_python.txt">nxopen_base_and_center_pole_python.txt</a></p>
<p>split_pdf.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_split.py
# pip install pypdf2 pycryptodome
import os
from PyPDF2 import PdfWriter, PdfReader
 
pdfReader = PdfReader(open("parm.pdf", "rb"))
information = [("151.pdf",1,300)]
  
for page in range(len(information)):
    pdf_writer = PdfWriter()
    start = information[page][1]
    end = information[page][2]
    while start&lt;=end:
        pdf_writer.add_page(pdfReader.pages[start-1])
        start+=1
    if not os.path.exists("./"):
        os.makedirs(savepath)
    output_filename = '{}_{}_page_{}.pdf'.format(information[page][0],information[page][1], information[page][2])
    with open(output_filename,'wb') as out:
        pdf_writer.write(out)
print("已經完成 pdf 切割與存檔")</pre>
<p>combine_pdf.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pip install pypdf2 pycryptodome
import os
from PyPDF2 import PdfWriter, PdfReader
 
pdf_write_object = PdfWriter()
 
pdfFileNames = ["1.pdf", "2.pdf", "3.pdf"]
newFileName = "Programming_Process_in_NX_CAM_en"
filenameString = ""
 
for filename in pdfFileNames:
    pdf_read_object = PdfReader(open(filename, "rb"))
    filenameString += filename + ", "
    for page in range(len(pdf_read_object.pages)):
        pdf_write_object.add_page(pdf_read_object.pages[page])
  
final_file_object = open(newFileName + ".pdf", 'wb')
pdf_write_object.write(final_file_object)
final_file_object.close()
 
print("已經將 " + filenameString+ " 合併為: "+ newFileName + ".pdf")</pre>
<p>gen_python_3.10.11.py for NX2312</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import urllib.request
import os
   
dir_path = os.path.dirname(os.path.realpath(__file__))
# basic files for Python installation
# before 3.12.0
py_list = ["core", "dev", "exe", "lib", "tcltk", "tools"]
# 3.12.1 no tools.msi
#py_list = ["core", "dev", "exe", "lib", "tcltk"]
# Python version 3.10.11 for NX2312
version = "3.10.11"
# Python msi download URL
ftp = "https://www.python.org/ftp/python/" + version + "/amd64/"
# location for Portable Python
path = "y:\\tmp\\Python310"
# create directory
try:
    os.mkdir(path)
except:
    # path exists
    pass
# get Python installation msi files and extract into target dir
for i in py_list:
    filename = i + ".msi"
    url = ftp + filename
    # download basic python msi file
    urllib.request.urlretrieve(url, filename)
    os.system("msiexec.exe /a " + i + ".msi targetdir=" + path)
    # delete msi file
    os.remove(dir_path + "\\" + i + ".msi")
    os.remove(path + "\\" + i + ".msi")
</pre>
<h1>Project</h1>
<p>已知:</p>
<ol>
<li>修課學員經由 @nfu.edu.tw 網域, 可利用"學號@nfu.edu.tw"經由 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> 登入 MS 365.</li>
<li>登入後, 使用者可以利用"<a href="https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">應用程式註冊</a>"建立應用程式</li>
<li>所註冊的延伸應用程式則可以利用 Microsoft Online 主機所提供的 OAuth2 API 程式庫, 取得登入者的 profile</li>
<li>經由上列步驟取得登入者的 profile 後, 延伸應用程式可設法讀取課程學員的作業倉儲與網站連結</li>
<li>當每一階段的學員作業網頁完成後, 若再經由亂數方法, 隨機分配給每一位學員 10 個除自己以外的學員作業網站進行評分, 即可根據既定的評分基準完成自評</li>
<li>隨機分配的學員作業網址可利用 email 寄出, 而評分回報則可利用 MS 365 的 Forms 表單取回</li>
</ol>
<p>以下為上列流程的 step 1 測試程式 (<a href="/downloads/teams_oauth2_flask_py.txt">teams_oauth2_flask_py.txt</a>):</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, redirect, request, session, url_for
import requests
import json

app = Flask(__name__)
app.secret_key = 'your_secret_key'  # 用於 Flask session 的秘密金鑰

# 替換成你的 Azure AD 應用程式資訊
'''
CLIENT_ID 為"應用程式 (用戶端) 識別碼"
CLIENT_SECRET 則為"憑證及秘密"中"用戶端密碼"的"值"
'''
CLIENT_ID = 'id'
CLIENT_SECRET = 'secret'
TENANT_ID = 'id'
AUTHORITY = f'https://login.microsoftonline.com/{TENANT_ID}'
REDIRECT_URI = 'http://localhost:8000/callback'
SCOPE = 'User.Read'

# 用於登錄和取得授權碼
@app.route('/')
def index():
    auth_url = (f'{AUTHORITY}/oauth2/v2.0/authorize'
                f'?client_id={CLIENT_ID}'
                f'&amp;response_type=code'
                f'&amp;redirect_uri={REDIRECT_URI}'
                f'&amp;response_mode=query'
                f'&amp;scope={SCOPE}')
    return redirect(auth_url)

# 處理回調和交換授權碼
@app.route('/callback')
def callback():
    code = request.args.get('code')
    token_url = f'{AUTHORITY}/oauth2/v2.0/token'
    token_data = {
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': REDIRECT_URI,
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'scope': SCOPE
    }
    token_r = requests.post(token_url, data=token_data)
    token_r.raise_for_status()
    tokens = token_r.json()
    session['access_token'] = tokens['access_token']
    return redirect(url_for('profile'))

# 使用訪問令牌呼叫 Microsoft Graph API 來獲取用戶資料
@app.route('/profile')
def profile():
    access_token = session.get('access_token')
    if not access_token:
        return redirect(url_for('index'))

    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    graph_url = 'https://graph.microsoft.com/v1.0/me'
    graph_r = requests.get(graph_url, headers=headers)
    graph_r.raise_for_status()
    user_info = graph_r.json()
    user_email = str(user_info["mail"])
    user_id = user_email.split("@")[0]
    session["user_id"] = user_id
    # 登出 MS Online 並重定向回首頁
    # 返回 HTML 及 JavaScript 以進行自動登出
    return (f'Hello, {user_id} &lt;br&gt;'
            f'&lt;script type="text/javascript"&gt;'
            f'  window.location = "https://login.microsoftonline.com/common/oauth2/v2.0/logout";'
            f'&lt;/script&gt;')

@app.route('/userid')
def userid():
    return session["user_id"]
    

# 登出功能
@app.route('/logout')
def logout():
    # 清除 session 中的訪問令牌
    session.pop('access_token', None)
    # 重定向到 MS Online 登出 URL
    return redirect('https://login.microsoftonline.com/common/oauth2/v2.0/logout')

if __name__ == '__main__':
    app.run(debug=True, port=8000)
</pre>
<p>以下則為寄信範例:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import json

# 替換為你的應用程式資訊
CLIENT_ID = 'your_client_id'
CLIENT_SECRET = 'your_client_secret'
TENANT_ID = 'your_tenant_id'
AUTHORITY = f'https://login.microsoftonline.com/{TENANT_ID}'
TOKEN_URL = f'{AUTHORITY}/oauth2/v2.0/token'
SCOPE = 'https://graph.microsoft.com/.default'

# 獲取 OAuth2 訪問令牌
def get_access_token():
    token_data = {
        'grant_type': 'client_credentials',
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'scope': SCOPE
    }
    token_r = requests.post(TOKEN_URL, data=token_data)
    token_r.raise_for_status()
    tokens = token_r.json()
    return tokens['access_token']

# 發送電子郵件
def send_email(access_token, to_address, subject, body):
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    email_data = {
        "message": {
            "subject": subject,
            "body": {
                "contentType": "Text",
                "content": body
            },
            "toRecipients": [
                {
                    "emailAddress": {
                        "address": to_address
                    }
                }
            ]
        },
        "saveToSentItems": "true"
    }
    email_url = 'https://graph.microsoft.com/v1.0/me/sendMail'
    response = requests.post(email_url, headers=headers, json=email_data)
    response.raise_for_status()
    print("Email sent successfully!")

if __name__ == "__main__":
    token = get_access_token()
    send_email(token, 'recipient@example.com', 'Test Subject', 'This is the email body.')
</pre>
<hr/>
<p>以下利用 ChatGPT 4omini 進行對話:</p>
<p>問:</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">使用 python + flask 開發一個簡單的資料庫程式, 並使用 SQLite, 目前表單有使用者學號以及其 github 帳號, 還有一個備註欄位, 只需要 add, query, update 與 delete 功能, 該如何進行?</p>
<p data-pm-slice="0 0 []">答:</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">1. 安裝 Flask 和 SQLite<br/><br/>首先，確保你已經安裝了 Flask 和 SQLite。如果你還沒有安裝，請使用以下命令：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pip install Flask
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">SQLite 通常已經隨 Python 安裝，不需要額外安裝。如果你需要 SQLite 的 Python 模組，可以使用以下命令：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pip install sqlite3
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">2. 建立 Flask 應用程式</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">應用程式結構</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">flask_app/
│
├── app.py
├── schema.sql
└── templates/
    ├── index.html
    ├── add.html
    ├── update.html
    └── query.html
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">schema.sql — 定義 SQLite 資料表<br/><br/>在 schema.sql 文件中，定義 SQLite 資料表結構：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id TEXT NOT NULL UNIQUE,
    github_account TEXT NOT NULL,
    notes TEXT
);
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">app.py — Flask 應用程式<br/><br/>在 app.py 中，設置 Flask 應用程式並建立 CRUD 功能：</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, request, redirect, url_for, render_template
import sqlite3

app = Flask(__name__)

DATABASE = 'database.db'

def get_db():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with app.app_context():
        db = get_db()
        with open('schema.sql', 'r') as f:
            db.executescript(f.read())
        db.commit()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/add', methods=['GET', 'POST'])
def add_user():
    if request.method == 'POST':
        student_id = request.form['student_id']
        github_account = request.form['github_account']
        notes = request.form.get('notes', '')

        db = get_db()
        db.execute('INSERT INTO users (student_id, github_account, notes) VALUES (?, ?, ?)',
                   (student_id, github_account, notes))
        db.commit()
        return redirect(url_for('index'))

    return render_template('add.html')

@app.route('/update/&lt;int:user_id&gt;', methods=['GET', 'POST'])
def update_user(user_id):
    db = get_db()
    if request.method == 'POST':
        student_id = request.form['student_id']
        github_account = request.form['github_account']
        notes = request.form.get('notes', '')

        db.execute('UPDATE users SET student_id = ?, github_account = ?, notes = ? WHERE id = ?',
                   (student_id, github_account, notes, user_id))
        db.commit()
        return redirect(url_for('index'))

    user = db.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()
    return render_template('update.html', user=user)

@app.route('/delete/&lt;int:user_id&gt;')
def delete_user(user_id):
    db = get_db()
    db.execute('DELETE FROM users WHERE id = ?', (user_id,))
    db.commit()
    return redirect(url_for('index'))

@app.route('/query')
def query_users():
    db = get_db()
    users = db.execute('SELECT * FROM users').fetchall()
    return render_template('query.html', users=users)

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">templates/index.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Index&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Welcome to User Management&lt;/h1&gt;
    &lt;a href="{{ url_for('add_user') }}"&gt;Add User&lt;/a&gt; |
    &lt;a href="{{ url_for('query_users') }}"&gt;Query Users&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">templates/add.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Add User&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Add User&lt;/h1&gt;
    &lt;form action="{{ url_for('add_user') }}" method="post"&gt;
        &lt;label for="student_id"&gt;Student ID:&lt;/label&gt;
        &lt;input type="text" id="student_id" name="student_id" required&gt;&lt;br&gt;
        &lt;label for="github_account"&gt;GitHub Account:&lt;/label&gt;
        &lt;input type="text" id="github_account" name="github_account" required&gt;&lt;br&gt;
        &lt;label for="notes"&gt;Notes:&lt;/label&gt;
        &lt;textarea id="notes" name="notes"&gt;&lt;/textarea&gt;&lt;br&gt;
        &lt;input type="submit" value="Add"&gt;
    &lt;/form&gt;
    &lt;a href="{{ url_for('index') }}"&gt;Back&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">templates/update.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Update User&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Update User&lt;/h1&gt;
    &lt;form action="{{ url_for('update_user', user_id=user['id']) }}" method="post"&gt;
        &lt;label for="student_id"&gt;Student ID:&lt;/label&gt;
        &lt;input type="text" id="student_id" name="student_id" value="{{ user['student_id'] }}" required&gt;&lt;br&gt;
        &lt;label for="github_account"&gt;GitHub Account:&lt;/label&gt;
        &lt;input type="text" id="github_account" name="github_account" value="{{ user['github_account'] }}" required&gt;&lt;br&gt;
        &lt;label for="notes"&gt;Notes:&lt;/label&gt;
        &lt;textarea id="notes" name="notes"&gt;{{ user['notes'] }}&lt;/textarea&gt;&lt;br&gt;
        &lt;input type="submit" value="Update"&gt;
    &lt;/form&gt;
    &lt;a href="{{ url_for('index') }}"&gt;Back&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">templates/query.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Query Users&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Users&lt;/h1&gt;
    &lt;table&gt;
        &lt;tr&gt;
            &lt;th&gt;ID&lt;/th&gt;
            &lt;th&gt;Student ID&lt;/th&gt;
            &lt;th&gt;GitHub Account&lt;/th&gt;
            &lt;th&gt;Notes&lt;/th&gt;
            &lt;th&gt;Actions&lt;/th&gt;
        &lt;/tr&gt;
        {% for user in users %}
        &lt;tr&gt;
            &lt;td&gt;{{ user['id'] }}&lt;/td&gt;
            &lt;td&gt;{{ user['student_id'] }}&lt;/td&gt;
            &lt;td&gt;{{ user['github_account'] }}&lt;/td&gt;
            &lt;td&gt;{{ user['notes'] }}&lt;/td&gt;
            &lt;td&gt;
                &lt;a href="{{ url_for('update_user', user_id=user['id']) }}"&gt;Update&lt;/a&gt; |
                &lt;a href="{{ url_for('delete_user', user_id=user['id']) }}"&gt;Delete&lt;/a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        {% endfor %}
    &lt;/table&gt;
    &lt;a href="{{ url_for('index') }}"&gt;Back&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">3. 啟動應用程式<br/><br/>確保你的 Flask 應用程式和模板文件已經正確配置，然後啟動應用程式：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">python app.py
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">接下來, 可以在瀏覽器中訪問 <code>http://127.0.0.1:5000/</code> 來查看和管理你的資料。</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>