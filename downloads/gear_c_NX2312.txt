/*
// compile and link start
// the nx2312 located at C:\python_2025_lite\data\nx
mkdir build

mkdir dist

REM compile gear.c
gcc.exe -c -g -IC:\python_2025_lite\data\nx\UGOPEN -MMD -MP -MF build/gear.o.d -o build/gear.o gear.c

REM link with libufun.lib and libugopenint.lib
gcc.exe -shared -o dist/gear.dll build/gear.o C:\python_2025_lite\data\nx\UGOPEN\libufun.lib C:\python_2025_lite\data\nx\UGOPEN\libugopenint.lib 

// compile and link end
//
#include <stdio.h> // 引入標準輸入輸出函式庫，使用 printf 等功能。

#include <uf.h> // 引入 NXOpen 的 UF 函式庫，提供與 NX 系統的功能。
#include <uf_ui.h> // 引入用戶界面函式庫，提供 UI 操作功能。

#define UF_CALL(X) (report( __FILE__, __LINE__, #X, (X))) // 定義宏，呼叫函數並報告錯誤信息。

// 錯誤報告函數，打印文件名、行號、函數名和錯誤碼。
static int report(char *file, int line, char *call, int irc) {
    if (irc) { // 檢查是否有錯誤。
        char messg[133]; // 定義字符數組存儲錯誤信息。
        printf("%s, line %d:  %s\n", file, line, call); // 打印錯誤信息。
        (UF_get_fail_message(irc, messg)) ? // 獲取錯誤信息。
            printf("    returned a %d\n", irc) : // 如果無錯誤信息，打印返回碼。
            printf("    returned error %d:  %s\n", irc, messg); // 否則打印錯誤碼和信息。
    }
    return(irc); // 返回錯誤碼。
}

// 執行特定的 NX API 操作。
static void do_ugopen_api(void) {
    // 顯示一條信息在 NX 界面上，第二個參數 1 表示在視窗顯示。
    uc1601("Hello NX Programming!", 1);
}

// NXOpen 的入口函數。
void ufusr(char *param, int *retcode, int param_len) {
    if (!UF_CALL(UF_initialize())) { // 初始化 NX 系統，檢查是否成功。
        do_ugopen_api(); // 調用特定的 API 操作。
        UF_CALL(UF_terminate()); // 結束 NX 系統。
    }
}

// 提供函數告訴 NX 何時卸載模塊。
int ufusr_ask_unload(void) {
    return (UF_UNLOAD_IMMEDIATELY); // 返回立即卸載的指令。
}

/******************************************************************************
 *                                                                            *
 * PROGRAM DESCRIPTION -                                                      *
 *   The following example requires a blank, open part. The code creates a    *
 *   spur gear																  *
 * gear.c															  *
 ******************************************************************************/
#include <stdio.h> // 再次引入標準輸入輸出函式庫。
#include <math.h> // 引入數學函式庫，可能用於數學計算。
#include <uf.h> // 引入 NXOpen 的 UF 函式庫。
#include <uf_defs.h> // 引入定義的庫。
#include <uf_curve.h> // 引入曲線相關的庫。
#include <uf_modl_curves.h> // 引入模型曲線相關的庫。
#include <uf_modl.h> // 引入模型相關的庫。
#include <uf_disp.h> // 引入顯示相關的庫。
#include <uf_ui.h> // 引入用戶界面函式庫。
#include <uf_csys.h> // 引入坐標系相關的庫。
#include <uf_obj.h> // 引入對象相關的庫。
#include <uf_vec.h> // 引入向量相關的庫。
#include <uf_lib.h> // 引入通用庫。

#define POLES 6 // 定義常數，可能用於齒輪的極數。
#define WEIGHT 1.0 // 定義常數，可能用於物體的重量。
#define ORDER 6 // 定義常數，可能用於曲線的階數。

// 重複定義的錯誤報告函數。
#define UF_CALL(X) (report(__FILE__, __LINE__, #X, (X))) // 錯誤報告宏。
static int report(char *file, int line, char *call, int irc) {
    if (irc) { // 檢查錯誤。
        char messg[133]; // 錯誤信息緩存。
        printf("%s, line %d:  %s\n", file, line, call); // 打印錯誤信息。
        (UF_get_fail_message(irc, messg)) ? // 獲取錯誤信息。
            printf("    returned a %d\n", irc) : // 無錯誤信息時打印返回碼。
            printf("    returned error %d:  %s\n", irc, messg); // 有錯誤信息時打印詳細信息。
    }
    return(irc); // 返回錯誤碼。
}

// 提示用戶輸入三個數字的函數。
static logical prompt_for_three_numbers(char *prompt, char *item1, char *item2, char *item3,
                                         double *number1, double *number2, double *number3) {
    int irc, resp; // 定義返回碼和響應。
    char menu[3][16]; // 定義字符數組存儲提示項。
    double da[3]; // 定義雙精度數組存儲用戶輸入的數字。
	
    // 複製提示項到 menu 數組。
    strncpy(&menu[0][0], item1, 15);
    strncpy(&menu[1][0], item2, 15);
    strncpy(&menu[2][0], item3, 15);

    // 將外部數字存入數組。
    da[0] = *number1;
    da[1] = *number2;
    da[2] = *number3;
	
    // 顯示用戶界面並獲取用戶輸入。
    resp = uc1609(prompt, menu, 3, da, &irc);
    if (resp == 3 || resp == 4) { // 如果用戶確認或取消。
        *number1 = da[0]; // 存儲用戶輸入的數字。
        *number2 = da[1];
        *number3 = da[2];
        return TRUE; // 返回成功。
    }
    else return FALSE; // 返回失敗。
}


static void do_ugopen_api(void) {
    // 定義一個靜態函數 do_ugopen_api，用於執行特定的 NX API 操作。
    
    int i, j, k_fixup, p_fixup, trim_opts[3], arc_opts[3]; // 定義整數變量，用於控制流程和選項。
    int create_flag = 1, style1, method, method1 = 0, flag1; // 定義創建標誌、樣式、方法等。
    int resp, int_teeth_no, num_instances; // 定義響應、牙齒數量和實例數量的變量。

    // 定義標籤變量，用於存儲 NX 物件的標識符。
    tag_t lh_spline, rh_spline, lh_base_spline, rh_base_spline, temp_tag, od_arc_tag, wcs_tag,
           curve_obj[3], lh_fillet, rh_fillet, root_arc_tag, cyl_tag, instances, tooth_gap_tag,
           teeth_grp_tag, teeth_tag[240];

    // 定義節點序列，用於曲線插值。
    double knotseq[12] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
    
    // 定義多個雙精度數組，用於存儲曲線控制點、半徑、角度等。
    double pole_array[POLES * 4], poles[6][3], poles1[6][3], poles2[6][3];
    double base_rad, root_rad, rad2, theta1, theta2, theta3, delta_theta,
           theta_p, rot_angle, angle1;
    double t_mat[6][6], l_mat[6][6], u_mat[6][6], b_mat[6][2], y_mat[6][2];
    double point1[3], point2[3], point3[3], tangent1[3];
    double pitch_dia = 12.0, pressure_angle = 20.0, dia_pitch, addendum, pitch_rad, undercut,
           deddendum, sub1, sub2, sub2sq, sub1sq, x_pitch, teeth_no = 48.0, clearance;
    double vec_x[3] = {1.0, 0.0, 0.0}, zc_dir[3] = {0.0, 0.0, 1.0}; // 定義方向向量。
    double start_angle, end_angle, junk3[3], c_point[3];
    double magnitude, magnitude1, magnitude2, l1, l2, l_new, parm1;
    double val1, val2, max_fillet, mtx[9];
    double delta_angle, length1;
    double origin[3] = {0.0, 0.0, 0.0}; // 定義原點位置。
    double tooth_length = 2.0, gear_od; // 定義齒輪外徑和齒長。

    // 定義一個常數 delta_u，用於控制計算的精度。
    double delta_u = 1.0 / ((double)(POLES - ORDER + 1));

    // 定義一個字符數組，存儲不同的齒輪選項。
    char options[6][38] = {
        "Full-depth, 14.5 deg pressure angle",
        "Full-depth, 20 deg pressure angle",
        "Stub, 20 deg pressure angle",
        "Coarse-pitch 20 deg pressure angle",
        "Coarse-pitch 25 deg pressure angle",
        "Fine-pitch 20 deg pressure angle"
    };

    // 定義字符數組，用於存儲用戶輸入的參數。
    char tooth_length_st[32], gear_od_st[32], teeth_no_st[32], angle_st[32];
    char *taper_angle = "0.0"; // 定義斜角的初始值。
    char *limit1[2] = {"        ", "        "}; // 定義限制條件的字符串。
    char start_limit_st[80], end_limit_st[80]; // 定義起始和結束限制的字符串。
    char debugstring[80] = ""; // 定義調試用的字符串。

    // 定義弧形和直線的結構，用於描述曲線。
    UF_CURVE_arc_t arc_coords; 
    UF_CURVE_line_t ln1; 

    // 定義列表指針，用於存儲循環、特徵和實例的列表。
    uf_list_p_t loop_list, features, instances_feature_list;

    // 設置限制條件的初始值。
    limit1[0] = "0.0";
    limit1[1] = "2.0";

    // 初始化矩陣 t_mat、l_mat 和 u_mat 為零。
    for (i = 0; i < 6; i++) {
        for (j = 0; j < 6; j++) {
            t_mat[i][j] = 0.0; // 將 t_mat 初始化為 0。
            l_mat[i][j] = 0.0; // 將 l_mat 初始化為 0。
            u_mat[i][j] = 0.0; // 將 u_mat 初始化為 0。
        }
    }

    // 設置 t_mat 的特定值，這些值可能用於計算。
    t_mat[0][0] = 1.0;
    t_mat[5][5] = 1.0;

    // 設置 t_mat 的其他值，用於控制點的計算。
    t_mat[1][0] = 0.32768;
    t_mat[4][5] = t_mat[1][0];
    t_mat[1][1] = 0.4096;
    t_mat[4][4] = t_mat[1][1];
    t_mat[1][2] = 0.2048;
    t_mat[4][3] = t_mat[1][2];
    t_mat[1][3] = 0.0512;
    t_mat[4][2] = t_mat[1][3];
    t_mat[1][4] = 0.0064;
    t_mat[4][1] = t_mat[1][4];
    t_mat[1][5] = 0.00032;
    t_mat[4][0] = t_mat[1][5];

    // 設置 t_mat 的其他值。
    t_mat[2][0] = 0.07776;
    t_mat[3][5] = t_mat[2][0];
    t_mat[2][1] = 0.2592;
    t_mat[3][4] = t_mat[2][1];
    t_mat[2][2] = 0.3456;
    t_mat[3][3] = t_mat[2][2];
    t_mat[2][3] = 0.2304;
    t_mat[3][2] = t_mat[2][3];
    t_mat[2][4] = 0.0768;
    t_mat[3][1] = t_mat[2][4];
    t_mat[2][5] = 0.01024;
    t_mat[3][0] = t_mat[2][5];

    // 將 l_mat 對角線設置為 1.0。
    for (i = 0; i < 6; i++) {
        l_mat[i][i] = 1.0;
    }

    // 將 u_mat 的特定值設置為 1.0。
    u_mat[0][0] = 1.0;
    u_mat[5][5] = 1.0;

    // 將 l_mat 和 u_mat 的其他值設置為 t_mat 的值。
    for (i = 1; i < 6; i++) {
        l_mat[i][0] = t_mat[i][0]; // 將 l_mat 的首列設置為 t_mat 的首列。
        u_mat[1][i] = t_mat[1][i]; // 將 u_mat 的第二行設置為 t_mat 的第二行。
    }

	l_mat[2][1]=t_mat[2][1]/t_mat[1][1];
	l_mat[3][1]=t_mat[3][1]/t_mat[1][1];
	l_mat[4][1]=t_mat[4][1]/t_mat[1][1];
        
	u_mat[2][2]=t_mat[2][2]-l_mat[2][1]*u_mat[1][2];
	u_mat[2][3]=t_mat[2][3]-l_mat[2][1]*u_mat[1][3];
	u_mat[2][4]=t_mat[2][4]-l_mat[2][1]*u_mat[1][4];
	u_mat[2][5]=t_mat[2][5]-l_mat[2][1]*u_mat[1][5];
        
	l_mat[3][2]=(t_mat[3][2]-l_mat[3][1]*u_mat[1][2])/u_mat[2][2];
	l_mat[4][2]=(t_mat[4][2]-l_mat[4][1]*u_mat[1][2])/u_mat[2][2];
        
	u_mat[3][3]=t_mat[3][3]-l_mat[3][1]*u_mat[1][3]-l_mat[3][2]*u_mat[2][3];
	u_mat[3][4]=t_mat[3][4]-l_mat[3][1]*u_mat[1][4]-l_mat[3][2]*u_mat[2][4];
	u_mat[3][5]=t_mat[3][5]-l_mat[3][1]*u_mat[1][5]-l_mat[3][2]*u_mat[2][5];
        
	l_mat[4][3]=(t_mat[4][3]-l_mat[4][1]*u_mat[1][3]-l_mat[4][2]*u_mat[2][3]-l_mat[4][3]*u_mat[3][4])/u_mat[3][3];
	u_mat[4][4]=t_mat[4][4]-l_mat[4][1]*u_mat[1][4]-l_mat[4][2]*u_mat[2][4]-l_mat[4][3]*u_mat[3][4];
	u_mat[4][5]=t_mat[4][5]-l_mat[4][1]*u_mat[1][5]-l_mat[4][2]*u_mat[2][5]-l_mat[4][3]*u_mat[3][5];
	
	//restart: ;
       // 顯示一個擁有 6 個選項的表單, options is the menu items
       // uc1603 的第二個輸入變數為 0, 表示沒有內定選項
       // uc1603 傳回 2 表示使用者按下取消
       //
       // uc1603 傳回Return:
       // 1 = Back
       // 2 = Cancel Operation
       // 5-18 = The given menu item was selected
       // 19 = Disallowed state, unable to bring up dialog
	resp = uc1603 ("Standard Imperial Involute Gear Systems to ANSI & AGMA", 0, options, 6 );

	if (resp == 2) goto ending1;
       // 若使用者選擇 6 個選項中的一個, 則會回應三個欄位的輸入
	prompt_for_three_numbers("Gear Data", "Pitch Diameter", "No of Teeth", "Tooth length",
			&pitch_dia, &teeth_no, &tooth_length);
       uc1601("After get three numbers",1);
       // 由於 uc1603 傳回第一個選項其值為 5, 因此將傳回值減 4, 可以讓第一選項其 style1 = 1
	style1 = resp - 4;
	pitch_rad = pitch_dia/2.0;
       // 根據使用者所選的正齒輪參數進行繪圖
	switch (style1)
	{
	case 1:
		// Full-depth, 14.5 deg press angle
		pressure_angle = 14.5;
		base_rad = pitch_rad*cos(pressure_angle*DEGRA);
		dia_pitch = teeth_no/pitch_dia;
		addendum = 1.0/dia_pitch;
		deddendum = 1.157/dia_pitch;
		clearance = 0.157/dia_pitch;
		max_fillet = 1.5*clearance;
		break;
	case 2:
		// Full-depth, 20 deg press angle
		pressure_angle = 20.0;
		base_rad = pitch_rad*cos(pressure_angle*DEGRA);
		dia_pitch = teeth_no/pitch_dia;
		addendum = 1.0/dia_pitch;
		deddendum = 1.157/dia_pitch;
		clearance = 0.157/dia_pitch;
		max_fillet = 1.5*clearance;
		break;
	case 3:
		// Stub, 20 deg pressure angle
		pressure_angle = 20.0;
		base_rad = pitch_rad*cos(pressure_angle*DEGRA);
		dia_pitch = teeth_no/pitch_dia;
		addendum = 0.8/dia_pitch;
		deddendum = 1.0/dia_pitch;
		clearance = 0.2/dia_pitch;
		max_fillet = 1.5*clearance;
		break;
	case 4:
		// Coarse-pitch 20 deg press angle
		pressure_angle = 20.0;
		base_rad = pitch_rad*cos(pressure_angle*DEGRA);
		dia_pitch = teeth_no/pitch_dia;
		addendum = 1.0/dia_pitch;
		deddendum = 1.25/dia_pitch;
		clearance = 0.25/dia_pitch;
		max_fillet = 0.3/dia_pitch;
		break;
	case 5:
		// Coarse-pitch 25 deg press angle
		pressure_angle = 25.0;
		base_rad = pitch_rad*cos(pressure_angle*DEGRA);
		dia_pitch = teeth_no/pitch_dia;
		addendum = 1.0/dia_pitch;
		deddendum = 1.25/dia_pitch;
		clearance = 0.25/dia_pitch;
		max_fillet = 0.3/dia_pitch;
		break;
	case 6:
		// Fine-pitch 20 deg press angle
		pressure_angle = 20.0;
		base_rad = pitch_rad*cos(pressure_angle*DEGRA);
		dia_pitch = teeth_no/pitch_dia;
		addendum = 1.0/dia_pitch;
		deddendum = 0.002+1.2/dia_pitch;
		clearance = 0.002+0.2/dia_pitch;
		max_fillet = 0.3/dia_pitch;
		break;
	}
	
	root_rad = pitch_rad - deddendum;
	gear_od = (pitch_rad + addendum)*2.0;

//	Determine od involute angle
	
	sub1 = (pitch_rad+addendum)/base_rad;
	theta2 = sqrt(sub1*sub1-1.0);

	sprintf(gear_od_st,"%f",gear_od);
	sprintf(tooth_length_st,"TOOTH_LENGTH1=%f",tooth_length);
       // 根據齒輪尺寸, 繪製一個圓柱
       // 建立一個全新的 cylinder
       // 圓心, 高度, 直徑
	UF_MODL_create_cyl1 (UF_NULLSIGN, origin,tooth_length_st, gear_od_st, 
			zc_dir, &cyl_tag);
       /*
	sprintf(start_limit_st,"0.0");
	//sprintf(end_limit_st,"TOOTH_LENGTH1");
       sprintf(end_limit_st,"2.0");
	strcpy(&limit1[0][0],start_limit_st);
	strcpy(&limit1[1][0],end_limit_st);
       */
       // root_rad 為齒根圓半徑, base_rad 則為基圓半徑
	if (root_rad < base_rad) method = 0;
	if (root_rad > base_rad) method = 1;
       uc1601("switch method",1);
       // 問題就在 switch method 之後
switch (method) {
    // 根據方法選擇不同的處理邏輯
    case 0:
        uc1601("method is 0", 1); // 日誌輸出，表明使用的是方法 0
        
        // 創建常規截面樣條曲線
        theta1 = 0.0; // 初始化角度
        theta3 = 0.0; // 用於計算的角度
        delta_theta = (theta2 - theta1) / 5.0; // 計算角度增量
        
        // 計算基準圓的控制點
        for (i = 0; i < 6; i++) {
            // 計算 b_mat 的控制點坐標
            b_mat[i][0] = base_rad * sin(theta3) - base_rad * theta3 * cos(theta3);
            b_mat[i][1] = base_rad * cos(theta3) + base_rad * theta3 * sin(theta3);
            theta3 += delta_theta; // 增加角度
        }
        
        // 解決線性方程組以獲得 y_mat 的值
        y_mat[0][0] = b_mat[0][0] / l_mat[0][0];
        y_mat[0][1] = b_mat[0][1] / l_mat[0][0];
        
        y_mat[1][0] = (b_mat[1][0] - l_mat[1][0] * y_mat[0][0]) / l_mat[1][1];
        y_mat[1][1] = (b_mat[1][1] - l_mat[1][0] * y_mat[0][1]) / l_mat[1][1];

        // 繼續求解 y_mat 的其餘行
        y_mat[2][0] = (b_mat[2][0] - l_mat[2][0] * y_mat[0][0] - l_mat[2][1] * y_mat[1][0]) / l_mat[2][2];
        y_mat[2][1] = (b_mat[2][1] - l_mat[2][0] * y_mat[0][1] - l_mat[2][1] * y_mat[1][1]) / l_mat[2][2];

        y_mat[3][0] = (b_mat[3][0] - l_mat[3][0] * y_mat[0][0] - l_mat[3][1] * y_mat[1][0] - l_mat[3][2] * y_mat[2][0]) / l_mat[3][3];
        y_mat[3][1] = (b_mat[3][1] - l_mat[3][0] * y_mat[0][1] - l_mat[3][1] * y_mat[1][1] - l_mat[3][2] * y_mat[2][1]) / l_mat[3][3];

        y_mat[4][0] = (b_mat[4][0] - l_mat[4][0] * y_mat[0][0] - l_mat[4][1] * y_mat[1][0] - l_mat[4][2] * y_mat[2][0] - l_mat[4][3] * y_mat[3][0]) / l_mat[4][4];
        y_mat[4][1] = (b_mat[4][1] - l_mat[4][0] * y_mat[0][1] - l_mat[4][1] * y_mat[1][1] - l_mat[4][2] * y_mat[2][1] - l_mat[4][3] * y_mat[3][1]) / l_mat[4][4];

        y_mat[5][0] = (b_mat[5][0] - l_mat[5][0] * y_mat[0][0] - l_mat[5][1] * y_mat[1][0] - l_mat[5][2] * y_mat[2][0] - l_mat[5][3] * y_mat[3][0] - l_mat[5][4] * y_mat[4][0]) / l_mat[5][5];
        y_mat[5][1] = (b_mat[5][1] - l_mat[5][0] * y_mat[0][1] - l_mat[5][1] * y_mat[1][1] - l_mat[5][2] * y_mat[2][1] - l_mat[5][3] * y_mat[3][1] - l_mat[5][4] * y_mat[4][1]) / l_mat[5][5];

        // 計算 poles 控制點
        poles[5][0] = y_mat[5][0];
        poles[5][1] = y_mat[5][1];

        // 反向計算其他控制點
        poles[4][0] = (y_mat[4][0] - u_mat[4][5] * poles[5][0]) / u_mat[4][4];
        poles[4][1] = (y_mat[4][1] - u_mat[4][5] * poles[5][1]) / u_mat[4][4];

        poles[3][0] = (y_mat[3][0] - u_mat[3][4] * poles[4][0] - u_mat[3][5] * poles[5][0]) / u_mat[3][3];
        poles[3][1] = (y_mat[3][1] - u_mat[3][4] * poles[4][1] - u_mat[3][5] * poles[5][1]) / u_mat[3][3];

        poles[2][0] = (y_mat[2][0] - u_mat[2][3] * poles[3][0] - u_mat[2][4] * poles[4][0] - u_mat[2][5] * poles[5][0]) / u_mat[2][2];
        poles[2][1] = (y_mat[2][1] - u_mat[2][3] * poles[3][1] - u_mat[2][4] * poles[4][1] - u_mat[2][5] * poles[5][1]) / u_mat[2][2];

        poles[1][0] = (y_mat[1][0] - u_mat[1][2] * poles[2][0] - u_mat[1][3] * poles[3][0] - u_mat[1][4] * poles[4][0] - u_mat[1][5] * poles[5][0]) / u_mat[1][1];
        poles[1][1] = (y_mat[1][1] - u_mat[1][2] * poles[2][1] - u_mat[1][3] * poles[3][1] - u_mat[1][4] * poles[4][1] - u_mat[1][5] * poles[5][1]) / u_mat[1][1];

        poles[0][0] = y_mat[0][0] - u_mat[0][1] * poles[1][0] - u_mat[0][2] * poles[2][0] - u_mat[0][3] * poles[3][0] - u_mat[0][4] * poles[4][0] - u_mat[0][5] * poles[5][0];
        poles[0][1] = y_mat[0][1] - u_mat[0][1] * poles[1][1] - u_mat[0][2] * poles[2][1] - u_mat[0][3] * poles[3][1] - u_mat[0][4] * poles[4][1] - u_mat[0][5] * poles[5][1];

        // 設置第一個控制點為 0
        poles[1][0] = 0.0;
        poles[0][0] = 0.0;

        // 計算旋轉角度
        rad2 = pitch_dia / 2.0; // 半徑
        sub1 = rad2 / base_rad; // 計算比例
        sub1sq = sub1 * sub1; // 計算平方
        theta_p = sqrt(sub1sq - 1.0); // 計算 theta_p
        x_pitch = base_rad * sin(theta_p) - base_rad * theta_p * cos(theta_p); // 計算 x_pitch
        rot_angle = PI / (2.0 * teeth_no) - asin(x_pitch / rad2); // 計算旋轉角度
        
        // 應用旋轉角度來計算新控制點
        for (i = 0; i < 6; i++) {
            poles1[i][0] = poles[i][0] * cos(-rot_angle) - poles[i][1] * sin(-rot_angle); // x 軸旋轉
            poles1[i][1] = poles[i][0] * sin(-rot_angle) + poles[i][1] * cos(-rot_angle); // y 軸旋轉
            poles1[i][2] = 0.0; // z 軸保持為 0
        }
        
        // 將 poles1 的值反向到 poles2
        for (i = 0; i < 6; i++) {
            poles2[i][0] = -poles1[i][0]; // x 軸取反
            poles2[i][1] = poles1[i][1]; // y 軸保持不變
            poles2[i][2] = 0.0; // z 軸保持為 0
        }

        // 準備生成齒形曲線
        // 將控制點放入 pole_array
        for (int j = 0; j < 6; j++) {
            pole_array[j * 4 + 0] = poles1[j][0];
            pole_array[j * 4 + 1] = poles1[j][1];
            pole_array[j * 4 + 2] = 0.0;
            pole_array[j * 4 + 3] = 1.0;
        }
        
        // 建立齒形曲線的結束序列
        for (i = ORDER; i < POLES; i++) {
            knotseq[i] = (i - ORDER + 1) * delta_u; // 計算結束序列
        }
        
        uc1601("Going to first spline creation", 1); // 日誌輸出，表明即將創建樣條
        
        int m;
        char failmessage[256];
        // 調用 API 創建樣條
        m = UF_CALL(UF_MODL_create_spline(POLES, ORDER, knotseq, pole_array, &lh_spline, &k_fixup, &p_fixup));
        
        // 獲取錯誤消息
        UF_get_fail_message(m, failmessage);
        uc1601(failmessage, 1); // 日誌輸出錯誤信息

// 將 poles2 中的控制點放入 pole_array
pole_array[0] = poles2[0][0];
pole_array[1] = poles2[0][1];
pole_array[2] = 0.0; // Z 軸設為 0
pole_array[3] = 1.0; // 齒輪的權重
pole_array[4] = poles2[1][0];
pole_array[5] = poles2[1][1];
pole_array[6] = 0.0;
pole_array[7] = 1.0;
pole_array[8] = poles2[2][0];
pole_array[9] = poles2[2][1];
pole_array[10] = 0.0;
pole_array[11] = 1.0;
pole_array[12] = poles2[3][0];
pole_array[13] = poles2[3][1];
pole_array[14] = 0.0;
pole_array[15] = 1.0;
pole_array[16] = poles2[4][0];
pole_array[17] = poles2[4][1];
pole_array[18] = 0.0;
pole_array[19] = 1.0;
pole_array[20] = poles2[5][0];
pole_array[21] = poles2[5][1];
pole_array[22] = 0.0;
pole_array[23] = 1.0;

// 調用 API 創建樣條曲線
m = UF_CALL(UF_MODL_create_spline(POLES, ORDER, knotseq, pole_array, &rh_spline, &k_fixup, &p_fixup));
UF_get_fail_message(m, failmessage); // 獲取錯誤信息
uc1601(failmessage, 1); // 日誌輸出錯誤信息

// 設置點 1 的位置
point1[0] = 0.0;
point1[1] = pitch_dia / 2.0 + addendum; // 根據加高度設定 Y 坐標
point1[2] = 0.0;

// 建立通過三點的圓弧
UF_CURVE_create_arc_thru_3pts(create_flag, &poles1[5][0], point1, &poles2[5][0], &od_arc_tag);

// 獲取樣條的切線屬性
UF_MODL_ask_curve_props(lh_spline, 0.0, &point1[0], tangent1, junk3, junk3, junk3, junk3);

// 計算起始角度
UF_VEC3_angle_between(vec_x, &poles1[0][0], zc_dir, &start_angle);
point2[0] = root_rad * cos(start_angle);
point2[1] = root_rad * sin(start_angle);
point2[2] = 0.0;

// 設定直線的起始點和結束點
ln1.start_point[0] = point2[0];
ln1.start_point[1] = point2[1];
ln1.start_point[2] = 0.0;
ln1.end_point[0] = point1[0];
ln1.end_point[1] = point1[1];
ln1.end_point[2] = 0.0;

// 建立直線
UF_CALL(UF_CURVE_create_line(&ln1, &lh_base_spline));

// 獲取右側樣條的切線屬性
UF_MODL_ask_curve_props(rh_spline, 0.0, &point1[0], tangent1, junk3, junk3, junk3, junk3);

// 計算結束角度
UF_VEC3_angle_between(vec_x, &poles2[0][0], zc_dir, &end_angle);
point3[0] = root_rad * cos(end_angle);
point3[1] = root_rad * sin(end_angle);
point3[2] = 0.0;

// 設定直線的起始點和結束點
ln1.start_point[0] = point3[0];
ln1.start_point[1] = point3[1];
ln1.start_point[2] = 0.0;
ln1.end_point[0] = point1[0];
ln1.end_point[1] = point1[1];
ln1.end_point[2] = 0.0;

// 建立直線
UF_CALL(UF_CURVE_create_line(&ln1, &rh_base_spline));

// 計算點 3 和點 1 的距離
UF_VEC3_distance(point3, point1, &length1);

// 設置點 1 為根半徑的點
point1[0] = 0.0;
point1[1] = root_rad;
point1[2] = 0.0;

// 建立通過三點的圓弧
UF_CURVE_create_arc_thru_3pts(create_flag, point2, point1, point3, &root_arc_tag);

// 如果距離大於最大圓角半徑
if (length1 > max_fillet) {
    curve_obj[0] = root_arc_tag;
    curve_obj[1] = lh_base_spline;
    point1[0] = poles1[0][0] - max_fillet; // 設置圓角的起點
    point1[1] = poles1[0][1] - max_fillet;
    point1[2] = 0.0;

    trim_opts[0] = TRUE; // 修剪選項
    trim_opts[1] = TRUE;
    arc_opts[0] = UF_CURVE_TANGENT_OUTSIDE; // 圓角的選項
    UF_CURVE_create_fillet(UF_CURVE_2_CURVE, curve_obj, point1, max_fillet, trim_opts, arc_opts, &lh_fillet);

    curve_obj[0] = rh_base_spline;
    curve_obj[1] = root_arc_tag;
    point1[0] = poles2[0][0] + max_fillet; // 設置另一個圓角的起點
    point1[1] = poles2[0][1] - max_fillet;
    point1[2] = 0.0;

    trim_opts[0] = TRUE; // 修剪選項
    trim_opts[1] = TRUE;
    arc_opts[1] = UF_CURVE_TANGENT_OUTSIDE;
    UF_CURVE_create_fillet(UF_CURVE_2_CURVE, curve_obj, point1, max_fillet, trim_opts, arc_opts, &rh_fillet);

    // 創建一個循環列表以包含所有的曲線
    UF_CALL(UF_MODL_create_list(&loop_list));
    UF_CALL(UF_MODL_put_list_item(loop_list, od_arc_tag));
    UF_CALL(UF_MODL_put_list_item(loop_list, lh_spline));
    UF_CALL(UF_MODL_put_list_item(loop_list, lh_base_spline));
    UF_CALL(UF_MODL_put_list_item(loop_list, lh_fillet));
    UF_CALL(UF_MODL_put_list_item(loop_list, root_arc_tag));
    UF_CALL(UF_MODL_put_list_item(loop_list, rh_fillet));
    UF_CALL(UF_MODL_put_list_item(loop_list, rh_base_spline));
    UF_CALL(UF_MODL_put_list_item(loop_list, rh_spline));

// 確定問題就出在此一除料
/*
extern int UF_MODL_create_extruded1 (
uf_list_p_t objects,
char * taper_angle,
char * limit[ 2 ],
double point[ 3 ],
double direction[ 3 ],
UF_FEATURE_SIGN sign,
tag_t target_body,
uf_list_p_t * features );
uf_list_p_t 	objects	Input	List of objects to be extruded.
char * 	taper_angle	Input	Taper angle (in degrees).
char * 	limit[ 2 ]	Input	Limit of extrusion. This is declared as:
char *limit[2]. The first value is the start value of
the extrusion and the second value is the end of the
extrusion (see the example program).
double 	point[ 3 ]	Input	not used
double 	direction[ 3 ]	Input	Extrusion axis.
UF_FEATURE_SIGN 	sign	Input	The sign of the operation to be performed.
UF_NULLSIGN = create new target solid
UF_POSITIVE = add to target solid
UF_NEGATIVE = subtract from target solid
UF_UNSIGNED = intersect with target solid
tag_t 	target_body	Input	Target body to perform Boolean
uf_list_p_t * 	features	Output to be freed	List of feature identifiers created. This list
must be freed by calling UF_MODL_delete_list.
*/

// 創建一個擠出物體，使用指定的參數
UF_MODL_create_extruded1(loop_list, taper_angle, limit1,
                          origin, zc_dir, UF_NEGATIVE, cyl_tag, &features);

// 從 features 中獲取第一項物體標籤 tooth_gap_tag
UF_CALL(UF_MODL_ask_list_item(features, 0, &tooth_gap_tag));

// 刪除 loop_list 和 features 以釋放記憶體
UF_MODL_delete_list(&loop_list);
UF_MODL_delete_list(&features);

// 創建一個新的列表 loop_list
UF_CALL(UF_MODL_create_list(&loop_list));

// 將 tooth_gap_tag 添加到 loop_list 中
UF_CALL(UF_MODL_put_list_item(loop_list, tooth_gap_tag));

// 將不同的物體標記設置為隱藏狀態
UF_OBJ_set_blank_status(od_arc_tag, UF_OBJ_BLANKED);
UF_OBJ_set_blank_status(lh_spline, UF_OBJ_BLANKED);
UF_OBJ_set_blank_status(lh_base_spline, UF_OBJ_BLANKED);
UF_OBJ_set_blank_status(lh_fillet, UF_OBJ_BLANKED);
UF_OBJ_set_blank_status(root_arc_tag, UF_OBJ_BLANKED);
UF_OBJ_set_blank_status(rh_fillet, UF_OBJ_BLANKED);
UF_OBJ_set_blank_status(rh_base_spline, UF_OBJ_BLANKED);
UF_OBJ_set_blank_status(rh_spline, UF_OBJ_BLANKED);
}
else if (length1 < max_fillet)  // 如果 length1 小於 max_fillet
{
    // 設置曲線物件，並計算相應的點
    curve_obj[0] = root_arc_tag;  // 設定第一條曲線
    curve_obj[1] = lh_spline;      // 設定第二條曲線
    point1[0] = poles1[0][0] - max_fillet;  // 計算 x 坐標
    point1[1] = poles1[0][1] + max_fillet;  // 計算 y 坐標
    point1[2] = 0.0;  // 設置 z 坐標為 0
    trim_opts[0] = TRUE;  // 允許修剪
    trim_opts[1] = TRUE;  // 允許修剪
    arc_opts[0] = UF_CURVE_TANGENT_OUTSIDE;  // 設置圓弧的選項為外切
    // 創建一個圓角，並將結果儲存到 lh_fillet 中
    UF_CURVE_create_fillet(UF_CURVE_2_CURVE, curve_obj, point1, 
                           max_fillet, trim_opts, arc_opts, &lh_fillet); 

    // 設置右側曲線物件，計算對應的點
    curve_obj[0] = rh_spline;  // 設定第一條曲線
    curve_obj[1] = root_arc_tag; // 設定第二條曲線
    point1[0] = poles2[0][0] + max_fillet;  // 計算 x 坐標
    point1[1] = poles2[0][1] + max_fillet;  // 計算 y 坐標
    point1[2] = 0.0;  // 設置 z 坐標為 0
    trim_opts[0] = TRUE;  // 允許修剪
    trim_opts[1] = TRUE;  // 允許修剪
    arc_opts[1] = UF_CURVE_TANGENT_OUTSIDE;  // 設置圓弧的選項為外切
    // 創建另一個圓角，並將結果儲存到 rh_fillet 中
    UF_CURVE_create_fillet(UF_CURVE_2_CURVE, curve_obj, point1, 
                           max_fillet, trim_opts, arc_opts, &rh_fillet);

    // 刪除不再需要的基礎樣條
    UF_OBJ_delete_object(lh_base_spline);
    UF_OBJ_delete_object(rh_base_spline);

    // 創建一個新的列表 loop_list
    UF_CALL(UF_MODL_create_list(&loop_list));

    // 將各物體標籤添加到 loop_list 中
    UF_CALL(UF_MODL_put_list_item(loop_list, od_arc_tag));
    UF_CALL(UF_MODL_put_list_item(loop_list, lh_spline));
    UF_CALL(UF_MODL_put_list_item(loop_list, lh_fillet));
    UF_CALL(UF_MODL_put_list_item(loop_list, root_arc_tag));
    UF_CALL(UF_MODL_put_list_item(loop_list, rh_fillet));
    UF_CALL(UF_MODL_put_list_item(loop_list, rh_spline));

    // 再次創建擠出物體
    UF_MODL_create_extruded1(loop_list, taper_angle, limit1,
                             origin, zc_dir, UF_NEGATIVE, cyl_tag, &features);

    // 從 features 中獲取第一項物體標籤 tooth_gap_tag
    UF_CALL(UF_MODL_ask_list_item(features, 0, &tooth_gap_tag));

    // 刪除 loop_list 和 features 以釋放記憶體
    UF_MODL_delete_list(&loop_list);
    UF_MODL_delete_list(&features);

    // 創建一個新的列表 loop_list
    UF_CALL(UF_MODL_create_list(&loop_list));

    // 將 tooth_gap_tag 添加到 loop_list 中
    UF_CALL(UF_MODL_put_list_item(loop_list, tooth_gap_tag));

    // 將不同的物體標記設置為隱藏狀態
    UF_OBJ_set_blank_status(od_arc_tag, UF_OBJ_BLANKED);
    UF_OBJ_set_blank_status(lh_spline, UF_OBJ_BLANKED);
    UF_OBJ_set_blank_status(lh_fillet, UF_OBJ_BLANKED);
    UF_OBJ_set_blank_status(root_arc_tag, UF_OBJ_BLANKED);
    UF_OBJ_set_blank_status(rh_fillet, UF_OBJ_BLANKED);
    UF_OBJ_set_blank_status(rh_spline, UF_OBJ_BLANKED);
}
break;  // 結束此 case 的處理

case 1:  // 處理 case 1
    // 計算一些參數以準備後續計算
    sub2 = (pitch_rad - deddendum) / base_rad;  // 計算 sub2
    sub2sq = sub2 * sub2;  // 計算 sub2 的平方
    theta1 = sqrt(sub2sq - 1.0);  // 計算 theta1
    theta3 = theta1;  // 將 theta3 設置為 theta1
    delta_theta = (theta2 - theta1) / 5.0;  // 計算 theta 的增量

    // 使用 for 循環計算 b_mat 的值
    for (i = 0; i < 6; i++)
    {
        // 計算 b_mat 的 x 和 y 坐標
        b_mat[i][0] = base_rad * sin(theta3) - base_rad * theta3 * cos(theta3);
        b_mat[i][1] = base_rad * cos(theta3) + base_rad * theta3 * sin(theta3);
        theta3 = theta3 + delta_theta;  // 更新 theta3
    } 

    // 將計算結果存儲到 y_mat 中
    y_mat[0][0] = b_mat[0][0] / l_mat[0][0];  // 計算 y_mat 的第一行
    y_mat[0][1] = b_mat[0][1] / l_mat[0][0];

    // 計算 y_mat 的第二行
    y_mat[1][0] = (b_mat[1][0] - l_mat[1][0] * y_mat[0][0]) / l_mat[1][1];
    y_mat[1][1] = (b_mat[1][1] - l_mat[1][0] * y_mat[0][1]) / l_mat[1][1];

    // 計算 y_mat 的第三行
    y_mat[2][0] = (b_mat[2][0] - l_mat[2][0] * y_mat[0][0] - l_mat[2][1] * y_mat[1][0]) / l_mat[2][2];
    y_mat[2][1] = (b_mat[2][1] - l_mat[2][0] * y_mat[0][1] - l_mat[2][1] * y_mat[1][1]) / l_mat[2][2];

    // 計算 y_mat 的第四行
    y_mat[3][0] = (b_mat[3][0] - l_mat[3][0] * y_mat[0][0] - l_mat[3][1] * y_mat[1][0] - l_mat[3][2] * y_mat[2][0]) / l_mat[3][3];
    y_mat[3][1] = (b_mat[3][1] - l_mat[3][0] * y_mat[0][1] - l_mat[3][1] * y_mat[1][1] - l_mat[3][2] * y_mat[2][1]) / l_mat[3][3];

    // 計算 y_mat 的第五行
    y_mat[4][0] = (b_mat[4][0] - l_mat[4][0] * y_mat[0][0] - l_mat[4][1] * y_mat[1][0] - l_mat[4][2] * y_mat[2][0] - l_mat[4][3] * y_mat[3][0]) / l_mat[4][4];
    y_mat[4][1] = (b_mat[4][1] - l_mat[4][0] * y_mat[0][1] - l_mat[4][1] * y_mat[1][1] - l_mat[4][2] * y_mat[2][1] - l_mat[4][3] * y_mat[3][1]) / l_mat[4][4];

    // 計算 y_mat 的第六行
    y_mat[5][0] = (b_mat[5][0] - l_mat[5][0] * y_mat[0][0] - l_mat[5][1] * y_mat[1][0] - l_mat[5][2] * y_mat[2][0] - l_mat[5][3] * y_mat[3][0] - l_mat[5][4] * y_mat[4][0]) / l_mat[5][5];
    y_mat[5][1] = (b_mat[5][1] - l_mat[5][0] * y_mat[0][1] - l_mat[5][1] * y_mat[1][1] - l_mat[5][2] * y_mat[2][1] - l_mat[5][3] * y_mat[3][1] - l_mat[5][4]) / l_mat[5][5];

    // 將結果儲存到 poles 陣列
    poles[5][0] = y_mat[5][0];  // 儲存第六行的 x 坐標
    poles[5][1] = y_mat[5][1];  // 儲存第六行的 y 坐標

    // 計算 poles 的第五行
    poles[4][0] = (y_mat[4][0] - u_mat[4][5] * poles[5][0]) / u_mat[4][4];
    poles[4][1] = (y_mat[4][1] - u_mat[4][5] * poles[5][1]) / u_mat[4][4];

    // 計算 poles 的第四行
    poles[3][0] = (y_mat[3][0] - u_mat[3][4] * poles[4][0] - u_mat[3][5] * poles[5][0]) / u_mat[3][3];
    poles[3][1] = (y_mat[3][1] - u_mat[3][4] * poles[4][1] - u_mat[3][5] * poles[5][1]) / u_mat[3][3];

    // 計算 poles 的第三行
    poles[2][0] = (y_mat[2][0] - u_mat[2][3] * poles[3][0] - u_mat[2][4] * poles[4][0] - u_mat[2][5] * poles[5][0]) / u_mat[2][2];
    poles[2][1] = (y_mat[2][1] - u_mat[2][3] * poles[3][1] - u_mat[2][4] * poles[4][1] - u_mat[2][5] * poles[5][1]) / u_mat[2][2];

    // 計算 poles 的第二行
    poles[1][0] = (y_mat[1][0] - u_mat[1][2] * poles[2][0] - u_mat[1][3] * poles[3][0] - u_mat[1][4] * poles[4][0] - u_mat[1][5] * poles[5][0]) / u_mat[1][1];
    poles[1][1] = (y_mat[1][1] - u_mat[1][2] * poles[2][1] - u_mat[1][3] * poles[3][1] - u_mat[1][4] * poles[4][1] - u_mat[1][5] * poles[5][1]) / u_mat[1][1];

    // 計算 poles 的第一行
    poles[0][0] = y_mat[0][0] - u_mat[0][1] * poles[1][0] - u_mat[0][2] * poles[2][0] - u_mat[0][3] * poles[3][0] - u_mat[0][4] * poles[4][0] - u_mat[0][5] * poles[5][0];
    poles[0][1] = y_mat[0][1] - u_mat[0][1] * poles[1][1] - u_mat[0][2] * poles[2][1] - u_mat[0][3] * poles[3][1] - u_mat[0][4] * poles[4][1] - u_mat[0][5] * poles[5][1];

// 計算旋轉角度
rad2 = pitch_dia / 2.0;  // 計算 pitch_dia 的半徑
sub1 = rad2 / base_rad;  // 計算 sub1
sub1sq = sub1 * sub1;    // 計算 sub1 的平方
theta_p = sqrt(sub1sq - 1.0);  // 計算 theta_p
x_pitch = base_rad * sin(theta_p) - base_rad * theta_p * cos(theta_p);  // 計算 x_pitch
rot_angle = PI / (2.0 * teeth_no) - asin(x_pitch / rad2);  // 計算旋轉角度

// 將原始極點進行旋轉，存儲到 poles1
for (i = 0; i < 6; i++) {
    poles1[i][0] = poles[i][0] * cos(-rot_angle) - poles[i][1] * sin(-rot_angle);  // 旋轉 x 坐標
    poles1[i][1] = poles[i][0] * sin(-rot_angle) + poles[i][1] * cos(-rot_angle);  // 旋轉 y 坐標
    poles1[i][2] = 0.0;  // z 坐標設置為 0
}

// 將 poles1 的座標取反，存儲到 poles2
for (i = 0; i < 6; i++) {
    poles2[i][0] = -poles1[i][0];  // 取反 x 坐標
    poles2[i][1] = poles1[i][1];    // y 坐標保持不變
    poles2[i][2] = 0.0;              // z 坐標設置為 0
}

// 將 poles1 的點數據存儲到 pole_array 中
for (i = 0; i < 6; i++) {
    pole_array[i * 4] = poles1[i][0];    // x 坐標
    pole_array[i * 4 + 1] = poles1[i][1]; // y 坐標
    pole_array[i * 4 + 2] = 0.0;          // z 坐標
    pole_array[i * 4 + 3] = 1.0;          // 坐標權重設置為 1
}

// 創建左側樣條曲線
UF_CALL(UF_MODL_create_spline(POLES, ORDER, knotseq, pole_array,
                               &lh_spline, &k_fixup, &p_fixup));

// 將 poles2 的點數據存儲到 pole_array 中
for (i = 0; i < 6; i++) {
    pole_array[i * 4] = poles2[i][0];    // x 坐標
    pole_array[i * 4 + 1] = poles2[i][1]; // y 坐標
    pole_array[i * 4 + 2] = 0.0;          // z 坐標
    pole_array[i * 4 + 3] = 1.0;          // 坐標權重設置為 1
}

// 創建右側樣條曲線
UF_CALL(UF_MODL_create_spline(POLES, ORDER, knotseq, pole_array,
                               &rh_spline, &k_fixup, &p_fixup));

// 設置三個點以創建圓弧
point1[0] = 0.0;
point1[1] = pitch_dia / 2.0 + addendum;  // 計算圓弧的 y 坐標
point1[2] = 0.0;
UF_CURVE_create_arc_thru_3pts(create_flag, &poles1[5][0], point1, &poles2[5][0], &od_arc_tag);  // 創建圓弧

point1[0] = 0.0;
point1[1] = root_rad;  // 設置根部半徑
point1[2] = 0.0;
UF_CURVE_create_arc_thru_3pts(create_flag, &poles1[0][0], point1, &poles2[0][0], &root_arc_tag);  // 創建另一個圓弧

// 建立倒圓角繪圖，使用左側樣條和根部圓弧
curve_obj[0] = root_arc_tag;
curve_obj[1] = lh_spline;
point1[0] = poles1[0][0];
point1[1] = poles1[0][1] + max_fillet / 2.0;  // 計算圓角位置
point1[2] = 0.0;
trim_opts[0] = TRUE;  // 允許修剪
trim_opts[1] = TRUE;  // 允許修剪
arc_opts[0] = UF_CURVE_TANGENT_OUTSIDE;  // 設置為外切
UF_CURVE_create_fillet(UF_CURVE_2_CURVE, curve_obj, point1, max_fillet, trim_opts, arc_opts, &lh_fillet);  // 創建左側倒圓角

// 建立右側倒圓角繪圖，使用右側樣條和根部圓弧
curve_obj[0] = rh_spline;
curve_obj[1] = root_arc_tag;
point1[0] = poles2[0][0];
point1[1] = poles2[0][1] + max_fillet / 2.0;  // 計算圓角位置
point1[2] = 0.0;
trim_opts[0] = TRUE;  // 允許修剪
trim_opts[1] = TRUE;  // 允許修剪
arc_opts[1] = UF_CURVE_TANGENT_OUTSIDE;  // 設置為外切
UF_CURVE_create_fillet(UF_CURVE_2_CURVE, curve_obj, point1, max_fillet, trim_opts, arc_opts, &rh_fillet);  // 創建右側倒圓角

// 將要進行擠出除料的草圖輪廓存入 loop_list
UF_CALL(UF_MODL_create_list(&loop_list));
UF_CALL(UF_MODL_put_list_item(loop_list, od_arc_tag));
UF_CALL(UF_MODL_put_list_item(loop_list, lh_spline));
UF_CALL(UF_MODL_put_list_item(loop_list, lh_fillet));
UF_CALL(UF_MODL_put_list_item(loop_list, root_arc_tag));
UF_CALL(UF_MODL_put_list_item(loop_list, rh_fillet));
UF_CALL(UF_MODL_put_list_item(loop_list, rh_spline));

// 針對 loop_list 進行擠出除料
UF_MODL_create_extruded1(loop_list, taper_angle, limit1,
                          origin, zc_dir, UF_NEGATIVE, cyl_tag, &features);
UF_CALL(UF_MODL_ask_list_item(features, 0, &tooth_gap_tag));  // 獲取擠出結果
UF_MODL_delete_list(&loop_list);  // 刪除 loop_list
UF_MODL_delete_list(&features);    // 刪除 features
UF_CALL(UF_MODL_create_list(&loop_list));  // 創建新的 loop_list
UF_CALL(UF_MODL_put_list_item(loop_list, tooth_gap_tag));  // 將擠出結果添加到 loop_list

// 將不需要的物體設置為隱藏
UF_OBJ_set_blank_status(od_arc_tag, UF_OBJ_BLANKED);
UF_OBJ_set_blank_status(lh_spline, UF_OBJ_BLANKED);
UF_OBJ_set_blank_status(lh_fillet, UF_OBJ_BLANKED);
UF_OBJ_set_blank_status(root_arc_tag, UF_OBJ_BLANKED);
UF_OBJ_set_blank_status(rh_fillet, UF_OBJ_BLANKED);
UF_OBJ_set_blank_status(rh_spline, UF_OBJ_BLANKED);
break;  // 結束此 case 的處理
}
// 設定齒數和角度
int_teeth_no = teeth_no;
sprintf(teeth_no_st, "%d", int_teeth_no);
angle1 = 360.0 / teeth_no;
sprintf(angle_st, "%f", angle1);

// 旋轉陣列複製特徵
UF_MODL_create_circular_iset(method1, origin, zc_dir, teeth_no_st, angle_st, loop_list, &instances);

// 獲取實例的標籤
UF_MODL_ask_instance(instances, &instances_feature_list);

// 獲取實例數量
UF_CALL(UF_MODL_ask_list_count(instances_feature_list, &num_instances));
for (i = 0; i < num_instances; i++) {
    UF_CALL(UF_MODL_ask_list_item(instances_feature_list, i, &temp_tag));  // 獲取每個實例的標籤
    teeth_tag[i] = temp_tag;  // 存儲標籤
}

// 創建齒的集合
UF_MODL_create_set_of_feature("Teeth_set", &teeth_tag[0], num_instances, 1, &teeth_grp_tag);

// 結束處理
ending1: ;

// 使視圖適應物體
UF_CALL(UF_VIEW_fit_view(NULL_TAG, 1.0));	
}

// 用於插件卸載的函數
/*ARGSUSED*/
void ufusr(char *param, int *retcode, int param_len)
{
  if (!UF_CALL(UF_initialize())) {
    do_ugopen_api();  // 初始化 API
    UF_CALL(UF_terminate());  // 結束 API
  }
}

// 返回卸載狀態
int ufusr_ask_unload(void)
{
  return (UF_UNLOAD_IMMEDIATELY);  // 立即卸載
}
